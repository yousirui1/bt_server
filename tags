!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
-use	libowfat/GNUmakefile	/^	cd ..; tar cvvf $(VERSION).tar.xz --use=xz --exclude CVS $(VERSION)$/;"	m
-use	libowfat/Makefile	/^	cd ..; tar cvvf $(VERSION).tar.xz --use=xz --exclude CVS $(VERSION)$/;"	m
ADD_OUTSTANDING_ASYNC	libtorrent/include/libtorrent/debug.hpp	167;"	d
ADD_TASK	src/main.c	/^	ADD_TASK,$/;"	e	enum:BT_CMD	file:
ALL_OBJS	libowfat/GNUmakefile	/^ALL_OBJS=$(DNS_OBJS) $(BYTE_OBJS) $(FMT_OBJS) $(SCAN_OBJS) \\$/;"	m
ALL_OBJS	libowfat/Makefile	/^ALL_OBJS=$(DNS_OBJS) $(BYTE_OBJS) $(FMT_OBJS) $(SCAN_OBJS) \\$/;"	m
ANNOUNCE_FLAGS_HPP	libtorrent/include/libtorrent/kademlia/announce_flags.hpp	34;"	d
AR	Makefile	/^AR = $(CROSS_COMPILE)ar$/;"	m
ARRAY_H	libowfat/array.h	3;"	d
ARRAY_H	libowfat/libowfat/array.h	3;"	d
ARRAY_OBJS	libowfat/GNUmakefile	/^ARRAY_OBJS=$(patsubst array\/%.c,%.o,$(wildcard array\/*.c))$/;"	m
ARRAY_OBJS	libowfat/Makefile	/^ARRAY_OBJS=array_allocate.o array_bytes.o array_cat.o array_cat0.o array_catb.o array_cate.o array_cats.o array_cats0.o array_equal.o array_fail.o array_get.o array_length.o array_reset.o array_start.o array_trunc.o array_truncate.o iarray_allocate.o iarray_free.o iarray_get.o iarray_init.o iarray_length.o $/;"	m
AS	Makefile	/^AS = $(CROSS_COMPILE)as$/;"	m
BOOST_MP_CPP_INT_IMPORT_EXPORT_HPP	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	7;"	d
BOOST_SYMBOL_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	59;"	d
BOOST_SYMBOL_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	62;"	d
BOOST_SYMBOL_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	65;"	d
BOOST_SYMBOL_IMPORT	libtorrent/include/libtorrent/aux_/export.hpp	60;"	d
BOOST_SYMBOL_IMPORT	libtorrent/include/libtorrent/aux_/export.hpp	63;"	d
BOOST_SYMBOL_IMPORT	libtorrent/include/libtorrent/aux_/export.hpp	66;"	d
BT_CMD	src/main.c	/^typedef enum BT_CMD {$/;"	g	file:
BT_CMD	src/main.c	/^}BT_CMD;$/;"	t	typeref:enum:BT_CMD	file:
BUFFER_H	libowfat/buffer.h	3;"	d
BUFFER_H	libowfat/libowfat/buffer.h	3;"	d
BUFFER_INIT	libowfat/buffer.h	27;"	d
BUFFER_INIT	libowfat/libowfat/buffer.h	27;"	d
BUFFER_INIT_FREE	libowfat/buffer.h	28;"	d
BUFFER_INIT_FREE	libowfat/libowfat/buffer.h	28;"	d
BUFFER_INIT_READ	libowfat/buffer.h	29;"	d
BUFFER_INIT_READ	libowfat/libowfat/buffer.h	29;"	d
BUFFER_INSIZE	libowfat/buffer.h	30;"	d
BUFFER_INSIZE	libowfat/libowfat/buffer.h	30;"	d
BUFFER_OBJS	libowfat/GNUmakefile	/^BUFFER_OBJS=$(patsubst buffer\/%.c,%.o,$(wildcard buffer\/*.c))$/;"	m
BUFFER_OBJS	libowfat/Makefile	/^BUFFER_OBJS=buffer_0.o buffer_0small.o buffer_1.o buffer_1small.o buffer_2.o buffer_close.o buffer_feed.o buffer_flush.o buffer_free.o buffer_fromarray.o buffer_frombuf.o buffer_fromsa.o buffer_get.o buffer_get_new_token_sa.o buffer_get_new_token_sa_pred.o buffer_get_token.o buffer_get_token_pred.o buffer_get_token_sa.o buffer_get_token_sa_pred.o buffer_getc.o buffer_getline.o buffer_getline_sa.o buffer_getn.o buffer_getnewline_sa.o buffer_init.o buffer_init_free.o buffer_mmapread.o buffer_munmap.o buffer_peek.o buffer_put.o buffer_put8long.o buffer_putalign.o buffer_puterror.o buffer_puterror2.o buffer_putflush.o buffer_putlong.o buffer_putlonglong.o buffer_putm_internal.o buffer_putm_internal_flush.o buffer_putnlflush.o buffer_puts.o buffer_putsa.o buffer_putsaflush.o buffer_putsalign.o buffer_putsflush.o buffer_putspace.o buffer_putulong.o buffer_putulonglong.o buffer_putxlong.o buffer_seek.o buffer_stubborn.o buffer_stubborn2.o buffer_tosa.o errmsg_iam.o errmsg_info.o errmsg_infosys.o errmsg_puts.o errmsg_warn.o errmsg_warnsys.o errmsg_write.o $/;"	m
BUFFER_OUTSIZE	libowfat/buffer.h	31;"	d
BUFFER_OUTSIZE	libowfat/libowfat/buffer.h	31;"	d
BUFSIZE	libowfat/io/io_mmapwritefile.c	13;"	d	file:
BYTE_H	libowfat/byte.h	3;"	d
BYTE_H	libowfat/libowfat/byte.h	3;"	d
BYTE_OBJS	libowfat/GNUmakefile	/^BYTE_OBJS=$(patsubst byte\/%.c,%.o,$(wildcard byte\/*.c))$/;"	m
BYTE_OBJS	libowfat/Makefile	/^BYTE_OBJS=byte_chr.o byte_copy.o byte_copyr.o byte_diff.o byte_equal_notimingattack.o byte_rchr.o byte_zero.o $/;"	m
BYTE_TYPE	include/packet.h	29;"	d
CANREAD	libowfat/io_internal.h	/^  enum { CANREAD, CANWRITE, TIMEOUT } what;$/;"	e	enum:eventpacket::__anon41
CANWRITE	libowfat/io_internal.h	/^  enum { CANREAD, CANWRITE, TIMEOUT } what;$/;"	e	enum:eventpacket::__anon41
CASE_H	libowfat/case.h	3;"	d
CASE_H	libowfat/libowfat/case.h	3;"	d
CASE_OBJS	libowfat/GNUmakefile	/^CASE_OBJS=$(patsubst case\/%.c,%.o,$(wildcard case\/*.c))$/;"	m
CASE_OBJS	libowfat/Makefile	/^CASE_OBJS=case_diffb.o case_diffs.o case_lowerb.o case_lowers.o case_starts.o $/;"	m
CAS_H	libowfat/CAS.h	2;"	d
CC	Makefile	/^CC = $(CROSS_COMPILE)gcc$/;"	m
CC	libowfat/GNUmakefile	/^CC=clang$/;"	m
CC	libowfat/GNUmakefile	/^CC=gcc$/;"	m
CC	libowfat/GNUmakefile	/^CC?=gcc$/;"	m
CC	libowfat/Makefile	/^CC?=gcc$/;"	m
CCC	libowfat/GNUmakefile	/^CCC=$(CROSS)$(CC)$/;"	m
CCC	libowfat/Makefile	/^CCC=$(CROSS)$(CC)$/;"	m
CDB_H	libowfat/cdb.h	3;"	d
CDB_H	libowfat/libowfat/cdb.h	3;"	d
CDB_HASHSTART	libowfat/cdb.h	12;"	d
CDB_HASHSTART	libowfat/libowfat/cdb.h	12;"	d
CDB_HPLIST	libowfat/cdb_make.h	13;"	d
CDB_HPLIST	libowfat/libowfat/cdb_make.h	13;"	d
CDB_MAKE_H	libowfat/cdb_make.h	3;"	d
CDB_MAKE_H	libowfat/libowfat/cdb_make.h	3;"	d
CDB_OBJS	libowfat/GNUmakefile	/^CDB_OBJS=$(patsubst cdb\/%.c,%.o,$(wildcard cdb\/*.c))$/;"	m
CDB_OBJS	libowfat/Makefile	/^CDB_OBJS=cdb.o cdb_hash.o cdb_make.o cdb_traverse.o $/;"	m
CFLAGS	Makefile	/^CFLAGS := -I. -I.\/include -I.\/libowfat -L.\/libowfat -L.\/lib$/;"	m
CFLAGS	libowfat/GNUmakefile	/^CFLAGS=-pipe $(WARN) $(DEFINE) $(OPT_REG)$/;"	m
CFLAGS	libowfat/GNUmakefile	/^CFLAGS=-pipe -Wall -g -Og$/;"	m
CFLAGS	libowfat/Makefile	/^CFLAGS=-pipe $(WARN) $(DEFINE) $(OPT_REG)$/;"	m
CFLAGS_OPT	libowfat/GNUmakefile	/^CFLAGS_OPT=-pipe $(WARN) $(DEFINE) $(OPT_PLUS)$/;"	m
CFLAGS_OPT	libowfat/Makefile	/^CFLAGS_OPT=-pipe $(WARN) $(DEFINE) $(OPT_PLUS)$/;"	m
CLIENT_BUF	include/client.h	4;"	d
CMSG_LEN	libowfat/io/io_passfd.c	57;"	d	file:
CMSG_LEN	libowfat/io/io_receivefd.c	56;"	d	file:
CMSG_SPACE	libowfat/io/io_passfd.c	38;"	d	file:
CODE_HTTPERROR_302	include/ot_stats.h	/^  CODE_HTTPERROR_302,$/;"	e	enum:__anon15
CODE_HTTPERROR_400	include/ot_stats.h	/^  CODE_HTTPERROR_400,$/;"	e	enum:__anon15
CODE_HTTPERROR_400_COMPACT	include/ot_stats.h	/^  CODE_HTTPERROR_400_COMPACT,$/;"	e	enum:__anon15
CODE_HTTPERROR_400_PARAM	include/ot_stats.h	/^  CODE_HTTPERROR_400_PARAM,$/;"	e	enum:__anon15
CODE_HTTPERROR_402_NOTMODEST	include/ot_stats.h	/^  CODE_HTTPERROR_402_NOTMODEST,$/;"	e	enum:__anon15
CODE_HTTPERROR_402_PAYMENT_REQUIRED	include/ot_stats.h	/^  CODE_HTTPERROR_402_PAYMENT_REQUIRED,$/;"	e	enum:__anon15
CODE_HTTPERROR_403_IP	include/ot_stats.h	/^  CODE_HTTPERROR_403_IP,$/;"	e	enum:__anon15
CODE_HTTPERROR_404	include/ot_stats.h	/^  CODE_HTTPERROR_404,$/;"	e	enum:__anon15
CODE_HTTPERROR_500	include/ot_stats.h	/^  CODE_HTTPERROR_500,$/;"	e	enum:__anon15
CODE_HTTPERROR_COUNT	include/ot_stats.h	/^  CODE_HTTPERROR_COUNT$/;"	e	enum:__anon15
COMPLETE_ASYNC	libtorrent/include/libtorrent/debug.hpp	168;"	d
COMPLETIONPORT	libowfat/io_internal.h	/^  ,COMPLETIONPORT$/;"	e	enum:__io_waitmode
CONFIG_COMPILER	Makefile	/^CONFIG_COMPILER = gnu$/;"	m
CONVERT_UTF_H_INCLUDED	libtorrent/include/libtorrent/ConvertUTF.h	83;"	d
COUNT	libowfat/buffer/errmsg_puts.c	/^enum { COUNT=25 };$/;"	e	enum:__anon26	file:
CP	Makefile	/^CP = cp$/;"	m
CRITBIT_H_	libowfat/critbit.h	2;"	d
CRITBIT_H_	libowfat/libowfat/critbit.h	2;"	d
CRITBIT_OBJS	libowfat/GNUmakefile	/^CRITBIT_OBJS=$(patsubst critbit\/%.c,%.o,$(wildcard critbit\/*.c))$/;"	m
CRITBIT_OBJS	libowfat/Makefile	/^CRITBIT_OBJS=critbit.o $/;"	m
CROSS	libowfat/GNUmakefile	/^CROSS=$/;"	m
CROSS	libowfat/Makefile	/^CROSS=$/;"	m
CROSS_COMPILE	Makefile	/^CROSS_COMPILE = #arm-$/;"	m
CTRACE_HIST_SIZE	libtorrent/include/libtorrent/aux_/route.h	332;"	d
CTRACE_STACK_SIZE	libtorrent/include/libtorrent/aux_/route.h	331;"	d
CURNAME	libowfat/GNUmakefile	/^CURNAME=$(notdir $(shell pwd))$/;"	m
CURNAME	libowfat/Makefile	/^CURNAME=libowfat-0.31$/;"	m
CXX	Makefile	/^CXX = $(CROSS_COMPILE)g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $(CFLAGS) -I .\/libtorrent\/include -L .\/libtorrent\/lib -ltorrent-rasterbar -lboost_system $/;"	m
ConversionFlags	libtorrent/include/libtorrent/ConvertUTF.h	/^} ConversionFlags;$/;"	t	typeref:enum:__anon48
ConversionResult	libtorrent/include/libtorrent/ConvertUTF.h	/^enum ConversionResult {$/;"	g
DATAIN	libowfat/libowfat/socket.h	/^  DATAIN,	\/* only signal accept() if there is data coming in *\/$/;"	e	enum:defermode
DATAIN	libowfat/socket.h	/^  DATAIN,	\/* only signal accept() if there is data coming in *\/$/;"	e	enum:defermode
DATA_SIZE	include/base.h	72;"	d
DEBUG	Makefile	/^DEBUG = -g #-O2$/;"	m
DEBUG	include/base.h	40;"	d
DEBUG	include/base.h	56;"	d
DECL_FLAG	libtorrent/include/libtorrent/add_torrent_params.hpp	104;"	d
DECL_FLAG	libtorrent/include/libtorrent/add_torrent_params.hpp	127;"	d
DEFINE	libowfat/GNUmakefile	/^DEFINE=-D_REENTRANT$/;"	m
DEFINE	libowfat/Makefile	/^DEFINE=-D_REENTRANT$/;"	m
DEL_TASK	src/main.c	/^	DEL_TASK,$/;"	e	enum:BT_CMD	file:
DEVPOLL	libowfat/io_internal.h	/^  ,DEVPOLL$/;"	e	enum:__io_waitmode
DHT_OBSERVER_HPP	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	34;"	d
DIE	include/base.h	50;"	d
DIE	include/base.h	58;"	d
DIET	libowfat/GNUmakefile	/^DIET:=$(strip $(diet_path))$/;"	m
DIET	libowfat/GNUmakefile	/^DIET=$/;"	m
DIET	libowfat/GNUmakefile	/^DIET=\/opt\/diet\/bin\/diet$/;"	m
DIETLIBPATH	libowfat/GNUmakefile	/^DIETLIBPATH=$(shell $(DIET) -L $(CCC))$/;"	m
DNS_C_ANY	libowfat/dns.h	14;"	d
DNS_C_ANY	libowfat/libowfat/dns.h	14;"	d
DNS_C_IN	libowfat/dns.h	13;"	d
DNS_C_IN	libowfat/libowfat/dns.h	13;"	d
DNS_H	libowfat/dns.h	3;"	d
DNS_H	libowfat/libowfat/dns.h	3;"	d
DNS_NAME4_DOMAIN	libowfat/dns.h	82;"	d
DNS_NAME4_DOMAIN	libowfat/libowfat/dns.h	82;"	d
DNS_NAME6_DOMAIN	libowfat/dns.h	96;"	d
DNS_NAME6_DOMAIN	libowfat/libowfat/dns.h	96;"	d
DNS_OBJS	libowfat/GNUmakefile	/^DNS_OBJS=$(patsubst dns\/%.c,%.o,$(wildcard dns\/*.c))$/;"	m
DNS_OBJS	libowfat/Makefile	/^DNS_OBJS=dns_dfd.o dns_domain.o dns_dtda.o dns_ip.o dns_ip6.o dns_ipq.o dns_ipq6.o dns_mx.o dns_name.o dns_nd.o dns_nd6.o dns_packet.o dns_random.o dns_rcip.o dns_rcrw.o dns_resolve.o dns_sortip.o dns_sortip6.o dns_transmit.o dns_txt.o $/;"	m
DNS_T_A	libowfat/dns.h	16;"	d
DNS_T_A	libowfat/libowfat/dns.h	16;"	d
DNS_T_AAAA	libowfat/dns.h	27;"	d
DNS_T_AAAA	libowfat/libowfat/dns.h	27;"	d
DNS_T_ANY	libowfat/dns.h	29;"	d
DNS_T_ANY	libowfat/libowfat/dns.h	29;"	d
DNS_T_AXFR	libowfat/dns.h	28;"	d
DNS_T_AXFR	libowfat/libowfat/dns.h	28;"	d
DNS_T_CNAME	libowfat/dns.h	18;"	d
DNS_T_CNAME	libowfat/libowfat/dns.h	18;"	d
DNS_T_HINFO	libowfat/dns.h	21;"	d
DNS_T_HINFO	libowfat/libowfat/dns.h	21;"	d
DNS_T_KEY	libowfat/dns.h	26;"	d
DNS_T_KEY	libowfat/libowfat/dns.h	26;"	d
DNS_T_MX	libowfat/dns.h	22;"	d
DNS_T_MX	libowfat/libowfat/dns.h	22;"	d
DNS_T_NS	libowfat/dns.h	17;"	d
DNS_T_NS	libowfat/libowfat/dns.h	17;"	d
DNS_T_PTR	libowfat/dns.h	20;"	d
DNS_T_PTR	libowfat/libowfat/dns.h	20;"	d
DNS_T_RP	libowfat/dns.h	24;"	d
DNS_T_RP	libowfat/libowfat/dns.h	24;"	d
DNS_T_SIG	libowfat/dns.h	25;"	d
DNS_T_SIG	libowfat/libowfat/dns.h	25;"	d
DNS_T_SOA	libowfat/dns.h	19;"	d
DNS_T_SOA	libowfat/libowfat/dns.h	19;"	d
DNS_T_TXT	libowfat/dns.h	23;"	d
DNS_T_TXT	libowfat/libowfat/dns.h	23;"	d
EADDRINUSE	libowfat/libowfat/socket.h	121;"	d
EADDRINUSE	libowfat/socket.h	121;"	d
EADDRNOTAVAIL	libowfat/libowfat/socket.h	122;"	d
EADDRNOTAVAIL	libowfat/socket.h	122;"	d
EAFNOSUPPORT	libowfat/libowfat/socket.h	120;"	d
EAFNOSUPPORT	libowfat/socket.h	120;"	d
EAFNOSUPPORT	libowfat/socket/socket_sctp6b.c	14;"	d	file:
EAFNOSUPPORT	libowfat/socket/socket_tcp6.c	13;"	d	file:
EAFNOSUPPORT	libowfat/socket/socket_tcp6b.c	14;"	d	file:
EAFNOSUPPORT	libowfat/socket/socket_udp6.c	14;"	d	file:
EALREADY	libowfat/libowfat/socket.h	110;"	d
EALREADY	libowfat/socket.h	110;"	d
ECONNABORTED	libowfat/libowfat/socket.h	126;"	d
ECONNABORTED	libowfat/socket.h	126;"	d
ECONNREFUSED	libowfat/libowfat/socket.h	134;"	d
ECONNREFUSED	libowfat/socket.h	134;"	d
ECONNRESET	libowfat/libowfat/socket.h	127;"	d
ECONNRESET	libowfat/socket.h	127;"	d
ED25519_HPP	libtorrent/include/libtorrent/ed25519.hpp	2;"	d
EDESTADDRREQ	libowfat/libowfat/socket.h	112;"	d
EDESTADDRREQ	libowfat/socket.h	112;"	d
EDISCON	libowfat/libowfat/socket.h	143;"	d
EDISCON	libowfat/socket.h	143;"	d
EDQUOT	libowfat/libowfat/socket.h	140;"	d
EDQUOT	libowfat/socket.h	140;"	d
EHOSTDOWN	libowfat/libowfat/socket.h	136;"	d
EHOSTDOWN	libowfat/socket.h	136;"	d
EHOSTUNREACH	libowfat/libowfat/socket.h	137;"	d
EHOSTUNREACH	libowfat/socket.h	137;"	d
EINPROGRESS	libowfat/libowfat/socket.h	109;"	d
EINPROGRESS	libowfat/socket.h	109;"	d
EISCONN	libowfat/libowfat/socket.h	129;"	d
EISCONN	libowfat/socket.h	129;"	d
ELOOP	libowfat/libowfat/socket.h	135;"	d
ELOOP	libowfat/socket.h	135;"	d
EMSGSIZE	libowfat/libowfat/socket.h	113;"	d
EMSGSIZE	libowfat/socket.h	113;"	d
ENETDOWN	libowfat/libowfat/socket.h	123;"	d
ENETDOWN	libowfat/socket.h	123;"	d
ENETRESET	libowfat/libowfat/socket.h	125;"	d
ENETRESET	libowfat/socket.h	125;"	d
ENETUNREACH	libowfat/libowfat/socket.h	124;"	d
ENETUNREACH	libowfat/socket.h	124;"	d
ENOBUFS	libowfat/libowfat/socket.h	128;"	d
ENOBUFS	libowfat/socket.h	128;"	d
ENOPROTOOPT	libowfat/libowfat/socket.h	115;"	d
ENOPROTOOPT	libowfat/socket.h	115;"	d
ENOTCONN	libowfat/libowfat/socket.h	130;"	d
ENOTCONN	libowfat/socket.h	130;"	d
ENOTSOCK	libowfat/libowfat/socket.h	111;"	d
ENOTSOCK	libowfat/socket.h	111;"	d
EOPNOTSUPP	libowfat/libowfat/socket.h	118;"	d
EOPNOTSUPP	libowfat/socket.h	118;"	d
EPFNOSUPPORT	libowfat/libowfat/socket.h	119;"	d
EPFNOSUPPORT	libowfat/socket.h	119;"	d
EPFNOSUPPORT	libowfat/socket/socket_sctp6b.c	17;"	d	file:
EPFNOSUPPORT	libowfat/socket/socket_tcp6.c	16;"	d	file:
EPFNOSUPPORT	libowfat/socket/socket_tcp6b.c	17;"	d	file:
EPFNOSUPPORT	libowfat/socket/socket_udp6.c	17;"	d	file:
EPOLL	libowfat/io_internal.h	/^  ,EPOLL$/;"	e	enum:__io_waitmode
EPOLLRDNORM	libowfat/io/io_waituntil2.c	41;"	d	file:
EPOLLRDNORM	libowfat/io/io_waituntil2.c	44;"	d	file:
EPROCLIM	libowfat/libowfat/socket.h	138;"	d
EPROCLIM	libowfat/socket.h	138;"	d
EPROTONOSUPPORT	libowfat/libowfat/socket.h	116;"	d
EPROTONOSUPPORT	libowfat/socket.h	116;"	d
EPROTONOSUPPORT	libowfat/socket/socket_sctp4b.c	13;"	d	file:
EPROTONOSUPPORT	libowfat/socket/socket_sctp6b.c	20;"	d	file:
EPROTONOSUPPORT	libowfat/socket/socket_tcp6.c	19;"	d	file:
EPROTONOSUPPORT	libowfat/socket/socket_tcp6b.c	20;"	d	file:
EPROTONOSUPPORT	libowfat/socket/socket_udp6.c	20;"	d	file:
EPROTOTYPE	libowfat/libowfat/socket.h	114;"	d
EPROTOTYPE	libowfat/socket.h	114;"	d
EREMOTE	libowfat/libowfat/socket.h	142;"	d
EREMOTE	libowfat/socket.h	142;"	d
ERRMSG_H	libowfat/errmsg.h	3;"	d
ERRMSG_H	libowfat/libowfat/errmsg.h	3;"	d
ERROR	include/base.h	63;"	d
ERROR	src/bt.cpp	27;"	d	file:
ESHUTDOWN	libowfat/libowfat/socket.h	131;"	d
ESHUTDOWN	libowfat/socket.h	131;"	d
ESOCKTNOSUPPORT	libowfat/libowfat/socket.h	117;"	d
ESOCKTNOSUPPORT	libowfat/socket.h	117;"	d
ESTALE	libowfat/libowfat/socket.h	141;"	d
ESTALE	libowfat/socket.h	141;"	d
ETIMEDOUT	libowfat/libowfat/socket.h	133;"	d
ETIMEDOUT	libowfat/socket.h	133;"	d
ETOOMANYREFS	libowfat/libowfat/socket.h	132;"	d
ETOOMANYREFS	libowfat/socket.h	132;"	d
EUSERS	libowfat/libowfat/socket.h	139;"	d
EUSERS	libowfat/socket.h	139;"	d
EVENT_ACCEPT	include/ot_stats.h	/^  EVENT_ACCEPT,$/;"	e	enum:__anon14
EVENT_ANNOUNCE	include/ot_stats.h	/^  EVENT_ANNOUNCE,$/;"	e	enum:__anon14
EVENT_BUCKET_LOCKED	include/ot_stats.h	/^  EVENT_BUCKET_LOCKED,$/;"	e	enum:__anon14
EVENT_COMPLETED	include/ot_stats.h	/^  EVENT_COMPLETED,$/;"	e	enum:__anon14
EVENT_CONNECT	include/ot_stats.h	/^  EVENT_CONNECT,      \/* UDP only *\/$/;"	e	enum:__anon14
EVENT_CONNID_MISSMATCH	include/ot_stats.h	/^  EVENT_CONNID_MISSMATCH$/;"	e	enum:__anon14
EVENT_FAILED	include/ot_stats.h	/^  EVENT_FAILED,$/;"	e	enum:__anon14
EVENT_FULLSCRAPE	include/ot_stats.h	/^  EVENT_FULLSCRAPE,   \/* TCP only *\/$/;"	e	enum:__anon14
EVENT_FULLSCRAPE_REQUEST	include/ot_stats.h	/^  EVENT_FULLSCRAPE_REQUEST,$/;"	e	enum:__anon14
EVENT_FULLSCRAPE_REQUEST_GZIP	include/ot_stats.h	/^  EVENT_FULLSCRAPE_REQUEST_GZIP,$/;"	e	enum:__anon14
EVENT_READ	include/ot_stats.h	/^  EVENT_READ,$/;"	e	enum:__anon14
EVENT_RENEW	include/ot_stats.h	/^  EVENT_RENEW,$/;"	e	enum:__anon14
EVENT_SCRAPE	include/ot_stats.h	/^  EVENT_SCRAPE,$/;"	e	enum:__anon14
EVENT_SYNC	include/ot_stats.h	/^  EVENT_SYNC,$/;"	e	enum:__anon14
EVENT_WOODPECKER	include/ot_stats.h	/^  EVENT_WOODPECKER,$/;"	e	enum:__anon14
EWOULDBLOCK	libowfat/libowfat/socket.h	108;"	d
EWOULDBLOCK	libowfat/socket.h	108;"	d
FAIL	include/base.h	45;"	d
FAIL	include/base.h	57;"	d
FIND_DATA_050323_HPP	libtorrent/include/libtorrent/kademlia/find_data.hpp	34;"	d
FLAG_CONNECTED	src/proxy.c	/^  FLAG_CONNECTED     = 0x03,$/;"	e	enum:__anon9	file:
FLAG_CONNECTING	src/proxy.c	/^  FLAG_CONNECTING    = 0x01,$/;"	e	enum:__anon9	file:
FLAG_DISCONNECTED	src/proxy.c	/^  FLAG_DISCONNECTED  = 0x00,$/;"	e	enum:__anon9	file:
FLAG_MASK	src/proxy.c	/^  FLAG_MASK          = 0x07$/;"	e	enum:__anon9	file:
FLAG_MCA	include/trackerlogic.h	/^typedef enum { FLAG_TCP, FLAG_UDP, FLAG_MCA, FLAG_SELFPIPE } PROTO_FLAG;$/;"	e	enum:__anon21
FLAG_OUTGOING	src/proxy.c	/^  FLAG_OUTGOING      = 0x80,$/;"	e	enum:__anon9	file:
FLAG_SELFPIPE	include/trackerlogic.h	/^typedef enum { FLAG_TCP, FLAG_UDP, FLAG_MCA, FLAG_SELFPIPE } PROTO_FLAG;$/;"	e	enum:__anon21
FLAG_SERVERSOCKET	src/proxy.c	/^enum { FLAG_SERVERSOCKET = 1 };$/;"	e	enum:__anon8	file:
FLAG_TCP	include/trackerlogic.h	/^typedef enum { FLAG_TCP, FLAG_UDP, FLAG_MCA, FLAG_SELFPIPE } PROTO_FLAG;$/;"	e	enum:__anon21
FLAG_UDP	include/trackerlogic.h	/^typedef enum { FLAG_TCP, FLAG_UDP, FLAG_MCA, FLAG_SELFPIPE } PROTO_FLAG;$/;"	e	enum:__anon21
FLAG_WAITTRACKERID	src/proxy.c	/^  FLAG_WAITTRACKERID = 0x02,$/;"	e	enum:__anon9	file:
FMT_8LONG	libowfat/fmt.h	24;"	d
FMT_8LONG	libowfat/libowfat/fmt.h	24;"	d
FMT_ASN1LENGTH	libowfat/fmt.h	148;"	d
FMT_ASN1LENGTH	libowfat/libowfat/fmt.h	148;"	d
FMT_ASN1TAG	libowfat/fmt.h	149;"	d
FMT_ASN1TAG	libowfat/libowfat/fmt.h	149;"	d
FMT_H	libowfat/fmt.h	3;"	d
FMT_H	libowfat/libowfat/fmt.h	3;"	d
FMT_IP4	libowfat/ip4.h	17;"	d
FMT_IP4	libowfat/libowfat/ip4.h	17;"	d
FMT_IP6	libowfat/ip6.h	32;"	d
FMT_IP6	libowfat/libowfat/ip6.h	32;"	d
FMT_LEN	libowfat/fmt.h	26;"	d
FMT_LEN	libowfat/libowfat/fmt.h	26;"	d
FMT_LONG	libowfat/fmt.h	22;"	d
FMT_LONG	libowfat/libowfat/fmt.h	22;"	d
FMT_OBJS	libowfat/GNUmakefile	/^FMT_OBJS=$(patsubst fmt\/%.c,%.o,$(wildcard fmt\/*.c))$/;"	m
FMT_OBJS	libowfat/Makefile	/^FMT_OBJS=fmt_8long.o fmt_8longlong.o fmt_asn1derlength.o fmt_asn1dertag.o fmt_double.o fmt_escapecharc.o fmt_escapecharhtml.o fmt_escapecharjson.o fmt_escapecharquotedprintable.o fmt_escapecharquotedprintableutf8.o fmt_escapecharxml.o fmt_fill.o fmt_httpdate.o fmt_human.o fmt_humank.o fmt_iso8601.o fmt_long.o fmt_longlong.o fmt_minus.o fmt_netstring.o fmt_pad.o fmt_pb_double.o fmt_pb_float.o fmt_pb_int.o fmt_pb_sint.o fmt_pb_string.o fmt_pb_tag.o fmt_pb_type0_sint.o fmt_pb_type1_double.o fmt_pb_type1_fixed64.o fmt_pb_type2_string.o fmt_pb_type5_fixed32.o fmt_pb_type5_float.o fmt_plusminus.o fmt_str.o fmt_strm_internal.o fmt_strn.o fmt_tohex.o fmt_ulong.o fmt_ulong0.o fmt_ulonglong.o fmt_utf8.o fmt_varint.o fmt_xlong.o fmt_xlonglong.o fmt_xmlescape.o $/;"	m
FMT_ULONG	libowfat/fmt.h	23;"	d
FMT_ULONG	libowfat/libowfat/fmt.h	23;"	d
FMT_UTF8	libowfat/fmt.h	147;"	d
FMT_UTF8	libowfat/libowfat/fmt.h	147;"	d
FMT_XLONG	libowfat/fmt.h	25;"	d
FMT_XLONG	libowfat/libowfat/fmt.h	25;"	d
FORA	libowfat/test/proxy.c	/^  enum { UNDECIDED, FORA, FORB } dir;$/;"	e	enum:state::__anon43	file:
FORB	libowfat/test/proxy.c	/^  enum { UNDECIDED, FORA, FORB } dir;$/;"	e	enum:state::__anon43	file:
FROMBUF	libowfat/iob_internal.h	/^  enum { FROMBUF, FROMFILE } type;$/;"	e	enum:iob_entry::__anon44
FROMFILE	libowfat/iob_internal.h	/^  enum { FROMBUF, FROMFILE } type;$/;"	e	enum:iob_entry::__anon44
GETU32	src/ot_rijndael.c	365;"	d	file:
GET_TASK_STATE	src/main.c	/^	GET_TASK_STATE,$/;"	e	enum:BT_CMD	file:
G_DEBUGBUF_SIZE	include/trackerlogic.h	117;"	d
G_INBUF_SIZE	include/trackerlogic.h	112;"	d
G_OUTBUF_SIZE	include/trackerlogic.h	114;"	d
HAVE_EAGAIN_READWRITE	libowfat/io.h	69;"	d
HAVE_EAGAIN_READWRITE	libowfat/libowfat/io.h	69;"	d
HAVE_EPOLL	libowfat/haveepoll.h	1;"	d
HAVE_IO_FD_FLAGS	libowfat/io.h	86;"	d
HAVE_IO_FD_FLAGS	libowfat/libowfat/io.h	86;"	d
HAVE_IO_QUEUEFORREAD	libowfat/io.h	130;"	d
HAVE_IO_QUEUEFORREAD	libowfat/libowfat/io.h	130;"	d
HAVE_N2I	libowfat/haven2i.h	1;"	d
HAVE_PREAD	libowfat/havepread.h	1;"	d
HAVE_SENDFILE	libowfat/havesendfile.h	1;"	d
HAVE_SIGIO	libowfat/havesigio.h	1;"	d
HAVE_SOCKET_FASTOPEN	libowfat/libowfat/socket.h	89;"	d
HAVE_SOCKET_FASTOPEN	libowfat/socket.h	89;"	d
HAVE_UINT128	libowfat/haveuint128.h	1;"	d
HEAD_LEN	include/base.h	73;"	d
HELPLINE	src/opentracker.c	116;"	d	file:
HELPLINE	src/opentracker.c	136;"	d	file:
HTTPERROR_302	src/ot_http.c	89;"	d	file:
HTTPERROR_400	src/ot_http.c	90;"	d	file:
HTTPERROR_400_COMPACT	src/ot_http.c	92;"	d	file:
HTTPERROR_400_DOUBLEHASH	src/ot_http.c	93;"	d	file:
HTTPERROR_400_PARAM	src/ot_http.c	91;"	d	file:
HTTPERROR_402_NOTMODEST	src/ot_http.c	94;"	d	file:
HTTPERROR_403_IP	src/ot_http.c	95;"	d	file:
HTTPERROR_404	src/ot_http.c	96;"	d	file:
HTTPERROR_500	src/ot_http.c	97;"	d	file:
HTTPIN	libowfat/libowfat/socket.h	/^  HTTPIN,	\/* only signal accept() if a HTTP header has come in *\/$/;"	e	enum:defermode
HTTPIN	libowfat/socket.h	/^  HTTPIN,	\/* only signal accept() if a HTTP header has come in *\/$/;"	e	enum:defermode
IARRAY_H	libowfat/iarray.h	3;"	d
IARRAY_H	libowfat/libowfat/iarray.h	3;"	d
IFF_LOWER_UP	src/tools.c	198;"	d	file:
IFSCOPE_NONE	libtorrent/include/libtorrent/aux_/route.h	324;"	d
IF_COMPRESSION	src/ot_fullscrape.c	39;"	d	file:
IF_COMPRESSION	src/ot_fullscrape.c	42;"	d	file:
IF_NAMESIZE	libowfat/socket/socket_getifname.c	12;"	d	file:
INCLUDEDIR	libowfat/GNUmakefile	/^INCLUDEDIR=${prefix}\/include$/;"	m
INCLUDEDIR	libowfat/Makefile	/^INCLUDEDIR=${prefix}\/include$/;"	m
INCLUDES	libowfat/GNUmakefile	/^INCLUDES=buffer.h byte.h fmt.h ip4.h ip6.h mmap.h scan.h socket.h str.h stralloc.h \\$/;"	m
INCLUDES	libowfat/Makefile	/^INCLUDES=buffer.h byte.h fmt.h ip4.h ip6.h mmap.h scan.h socket.h str.h stralloc.h \\$/;"	m
INVARIANT_CHECK	libtorrent/include/libtorrent/invariant_check.hpp	80;"	d
IOB_H	libowfat/iob.h	3;"	d
IOB_H	libowfat/libowfat/iob.h	3;"	d
IOM_ERROR	libowfat/io.h	/^  IOM_ERROR=4$/;"	e	enum:__anon30
IOM_ERROR	libowfat/libowfat/io.h	/^  IOM_ERROR=4$/;"	e	enum:__anon36
IOM_READ	libowfat/io.h	/^  IOM_READ=1,$/;"	e	enum:__anon30
IOM_READ	libowfat/libowfat/io.h	/^  IOM_READ=1,$/;"	e	enum:__anon36
IOM_WRITE	libowfat/io.h	/^  IOM_WRITE=2,$/;"	e	enum:__anon30
IOM_WRITE	libowfat/libowfat/io.h	/^  IOM_WRITE=2,$/;"	e	enum:__anon36
IOPAUSE_H	libowfat/iopause.h	3;"	d
IOPAUSE_H	libowfat/libowfat/iopause.h	3;"	d
IOPAUSE_POLL	libowfat/iopause.h	6;"	d
IOPAUSE_POLL	libowfat/libowfat/iopause.h	6;"	d
IOPAUSE_READ	libowfat/iopause.h	12;"	d
IOPAUSE_READ	libowfat/libowfat/iopause.h	12;"	d
IOPAUSE_WRITE	libowfat/iopause.h	13;"	d
IOPAUSE_WRITE	libowfat/libowfat/iopause.h	13;"	d
IO_FD_BLOCK	libowfat/io.h	/^  IO_FD_BLOCK=2,	\/* skip the fcntl, assume fd is set to blocking *\/$/;"	e	enum:io_fd_flags
IO_FD_BLOCK	libowfat/libowfat/io.h	/^  IO_FD_BLOCK=2,	\/* skip the fcntl, assume fd is set to blocking *\/$/;"	e	enum:io_fd_flags
IO_FD_CANWRITE	libowfat/io.h	/^  IO_FD_CANWRITE=1,	\/* new TCP connection, we know it's writable *\/$/;"	e	enum:io_fd_flags
IO_FD_CANWRITE	libowfat/libowfat/io.h	/^  IO_FD_CANWRITE=1,	\/* new TCP connection, we know it's writable *\/$/;"	e	enum:io_fd_flags
IO_FD_NONBLOCK	libowfat/io.h	/^  IO_FD_NONBLOCK=4,	\/* skip the fcntl, assume fd is set to non-blocking *\/$/;"	e	enum:io_fd_flags
IO_FD_NONBLOCK	libowfat/libowfat/io.h	/^  IO_FD_NONBLOCK=4,	\/* skip the fcntl, assume fd is set to non-blocking *\/$/;"	e	enum:io_fd_flags
IO_H	libowfat/io.h	3;"	d
IO_H	libowfat/libowfat/io.h	3;"	d
IO_OBJS	libowfat/GNUmakefile	/^IO_OBJS=$(patsubst io\/%.c,%.o,$(wildcard io\/*.c))$/;"	m
IO_OBJS	libowfat/Makefile	/^IO_OBJS=io_appendfile.o io_block.o io_canread.o io_canwrite.o io_check.o io_close.o io_closeonexec.o io_createfile.o io_debugstring.o io_dontwantread.o io_dontwantwrite.o io_eagain.o io_eagain_read.o io_eagain_write.o io_fd.o io_finishandshutdown.o io_getcookie.o io_mmapwritefile.o io_nonblock.o io_passfd.o io_pipe.o io_readfile.o io_readwritefile.o io_receivefd.o io_sendfile.o io_setcookie.o io_sigpipe.o io_socketpair.o io_timedout.o io_timeout.o io_timeouted.o io_tryread.o io_tryreadtimeout.o io_trywrite.o io_trywritetimeout.o io_wait.o io_waitread.o io_waituntil.o io_waituntil2.o io_waitwrite.o io_wantread.o io_wantwrite.o iob_addbuf.o iob_addbuf_free.o iob_addbuf_internal.o iob_addbuf_munmap.o iob_addfile.o iob_addfile_close.o iob_adds.o iob_adds_free.o iob_bytesleft.o iob_free.o iob_new.o iob_prefetch.o iob_reset.o iob_send.o iob_write.o $/;"	m
IP4_FMT	libowfat/ip4.h	16;"	d
IP4_FMT	libowfat/libowfat/ip4.h	16;"	d
IP4_H	libowfat/ip4.h	3;"	d
IP4_H	libowfat/libowfat/ip4.h	3;"	d
IP6_FMT	libowfat/ip6.h	31;"	d
IP6_FMT	libowfat/libowfat/ip6.h	31;"	d
IP6_H	libowfat/ip6.h	3;"	d
IP6_H	libowfat/libowfat/ip6.h	3;"	d
IPADDR_LEN	include/client.h	5;"	d
IPV6_ADD_MEMBERSHIP	libowfat/socket/socket_mcjoin6.c	16;"	d	file:
IPV6_DROP_MEMBERSHIP	libowfat/socket/socket_mcleave6.c	16;"	d	file:
IPV6_PROTECTION_LEVEL	libtorrent/include/libtorrent/socket.hpp	111;"	d
ISSET_H	libowfat/isset.h	3;"	d
ISSET_H	libowfat/libowfat/isset.h	3;"	d
JSON_TYPE	include/packet.h	30;"	d
KADEMLIA_IO_HPP	libtorrent/include/libtorrent/kademlia/io.hpp	34;"	d
KADEMLIA_NODE_ENTRY_HPP	libtorrent/include/libtorrent/kademlia/node_entry.hpp	34;"	d
KQUEUE	libowfat/io_internal.h	/^  ,KQUEUE$/;"	e	enum:__io_waitmode
LD	Makefile	/^LD = $(CROSS_COMPILE)ld$/;"	m
LIBC_HAS_IP6	libowfat/haveip6.h	1;"	d
LIBC_HAS_IP6	libowfat/socket/socket_mchopcount6.c	14;"	d	file:
LIBC_HAS_IP6	libowfat/socket/socket_mcjoin6.c	18;"	d	file:
LIBC_HAS_IP6	libowfat/socket/socket_mcleave6.c	18;"	d	file:
LIBC_HAS_SCOPE_ID	libowfat/havescope.h	1;"	d
LIBDIR	libowfat/GNUmakefile	/^LIBDIR=$(DIETLIBPATH)$/;"	m
LIBDIR	libowfat/GNUmakefile	/^LIBDIR=${prefix}\/lib$/;"	m
LIBDIR	libowfat/Makefile	/^LIBDIR=${prefix}\/lib$/;"	m
LIBS	libowfat/GNUmakefile	/^LIBS=byte.a fmt.a scan.a str.a uint.a open.a stralloc.a unix.a socket.a \\$/;"	m
LIBS	libowfat/Makefile	/^LIBS=byte.a fmt.a scan.a str.a uint.a open.a stralloc.a unix.a socket.a \\$/;"	m
LIBTORRENT_AUX_PORTMAP_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/portmap.hpp	34;"	d
LIBTORRENT_DHT_STATE_HPP	libtorrent/include/libtorrent/kademlia/dht_state.hpp	34;"	d
LIBTORRENT_ED25519_HPP	libtorrent/include/libtorrent/kademlia/ed25519.hpp	34;"	d
LIBTORRENT_GET_ITEM_HPP	libtorrent/include/libtorrent/kademlia/get_item.hpp	34;"	d
LIBTORRENT_GET_PEERS_HPP	libtorrent/include/libtorrent/kademlia/get_peers.hpp	34;"	d
LIBTORRENT_ITEM_HPP	libtorrent/include/libtorrent/kademlia/item.hpp	34;"	d
LIBTORRENT_LSD_HPP	libtorrent/include/libtorrent/aux_/lsd.hpp	34;"	d
LIBTORRENT_REVISION	libtorrent/include/libtorrent/version.hpp	47;"	d
LIBTORRENT_TYPES_HPP	libtorrent/include/libtorrent/kademlia/types.hpp	34;"	d
LIBTORRENT_VERSION	libtorrent/include/libtorrent/version.hpp	46;"	d
LIBTORRENT_VERSION_MAJOR	libtorrent/include/libtorrent/version.hpp	38;"	d
LIBTORRENT_VERSION_MINOR	libtorrent/include/libtorrent/version.hpp	39;"	d
LIBTORRENT_VERSION_NUM	libtorrent/include/libtorrent/version.hpp	44;"	d
LIBTORRENT_VERSION_TINY	libtorrent/include/libtorrent/version.hpp	40;"	d
LIVESYNC_INCOMING_BUFFSIZE	src/ot_livesync.c	31;"	d	file:
LIVESYNC_INCOMING_BUFFSIZE	src/proxy.c	51;"	d	file:
LIVESYNC_MAXDELAY	src/ot_livesync.c	36;"	d	file:
LIVESYNC_MAXDELAY	src/proxy.c	56;"	d	file:
LIVESYNC_OUTGOING_BUFFSIZE_PEERS	src/ot_livesync.c	33;"	d	file:
LIVESYNC_OUTGOING_BUFFSIZE_PEERS	src/proxy.c	54;"	d	file:
LIVESYNC_OUTGOING_WATERMARK_PEERS	src/ot_livesync.c	34;"	d	file:
LIVESYNC_OUTGOING_WATERMARK_PEERS	src/proxy.c	55;"	d	file:
LIVESYNC_PORT	include/ot_livesync.h	42;"	d
LOG_DIR	include/base.h	69;"	d
LOG_ERR_FILE	include/base.h	70;"	d
LOG_TO_STDERR	src/ot_stats.c	35;"	d	file:
LOG_TO_STDERR	src/ot_stats.c	37;"	d	file:
MAKE_TORRETN	src/main.c	/^	MAKE_TORRETN,$/;"	e	enum:BT_CMD	file:
MAN3DIR	libowfat/GNUmakefile	/^MAN3DIR=${prefix}\/man\/man3$/;"	m
MAN3DIR	libowfat/Makefile	/^MAN3DIR=${prefix}\/man\/man3$/;"	m
MAXPRECBIT	src/trackerlogic.c	228;"	d	file:
MAXPRECBIT	src/trackerlogic.c	231;"	d	file:
MAX_ALLOCA	libowfat/fmt.h	211;"	d
MAX_ALLOCA	libowfat/libowfat/fmt.h	211;"	d
MAX_BUFLEN	include/base.h	65;"	d
MAX_CONFIGLEN	include/base.h	67;"	d
MAX_FILENAMELEN	include/base.h	66;"	d
MAX_PEERS	src/proxy.c	49;"	d	file:
MMAP_H	libowfat/libowfat/mmap.h	3;"	d
MMAP_H	libowfat/mmap.h	3;"	d
MMAP_OBJS	libowfat/GNUmakefile	/^MMAP_OBJS=$(patsubst mmap\/%.c,%.o,$(wildcard mmap\/*.c))$/;"	m
MMAP_OBJS	libowfat/Makefile	/^MMAP_OBJS=mmap_private.o mmap_read.o mmap_readat.o mmap_shared.o mmap_unmap.o $/;"	m
MTX_DBG	src/ot_mutex.c	24;"	d	file:
MULT_OBJS	libowfat/GNUmakefile	/^MULT_OBJS=$(patsubst mult\/%.c,%.o,$(wildcard mult\/*.c))$/;"	m
MULT_OBJS	libowfat/Makefile	/^MULT_OBJS=imult16.o imult32.o imult64.o range_arrayinbuf.o range_str2inbuf.o range_str4inbuf.o range_strinbuf.o umult16.o umult32.o umult64.o $/;"	m
MUSH	libowfat/dns/dns_random.c	12;"	d	file:
NATIVE	libowfat/GNUmakefile	/^NATIVE=$/;"	m
NATIVE	libowfat/Makefile	/^NATIVE=$/;"	m
NDELAY_H	libowfat/libowfat/ndelay.h	3;"	d
NDELAY_H	libowfat/ndelay.h	3;"	d
NETLINK_NO_ENOBUFS	libtorrent/include/libtorrent/socket.hpp	74;"	d
NODE_HPP	libtorrent/include/libtorrent/kademlia/node.hpp	34;"	d
NODE_ID_HPP	libtorrent/include/libtorrent/kademlia/node_id.hpp	33;"	d
NOMINMAX	libtorrent/include/libtorrent/config.hpp	238;"	d
NO_UINT16_MACROS	libowfat/uint/uint16_pack.c	1;"	d	file:
NO_UINT16_MACROS	libowfat/uint/uint16_pack_big.c	1;"	d	file:
NO_UINT16_MACROS	libowfat/uint/uint16_read.c	1;"	d	file:
NO_UINT16_MACROS	libowfat/uint/uint16_read_big.c	1;"	d	file:
NO_UINT16_MACROS	libowfat/uint/uint16_unpack.c	1;"	d	file:
NO_UINT16_MACROS	libowfat/uint/uint16_unpack_big.c	1;"	d	file:
NO_UINT32_MACROS	libowfat/uint/uint32_pack.c	1;"	d	file:
NO_UINT32_MACROS	libowfat/uint/uint32_pack_big.c	1;"	d	file:
NO_UINT32_MACROS	libowfat/uint/uint32_read.c	1;"	d	file:
NO_UINT32_MACROS	libowfat/uint/uint32_read_big.c	1;"	d	file:
NO_UINT32_MACROS	libowfat/uint/uint32_unpack.c	1;"	d	file:
NO_UINT32_MACROS	libowfat/uint/uint32_unpack_big.c	1;"	d	file:
NO_UINT64_MACROS	libowfat/uint/uint64_pack.c	1;"	d	file:
NO_UINT64_MACROS	libowfat/uint/uint64_pack_big.c	1;"	d	file:
NO_UINT64_MACROS	libowfat/uint/uint64_read.c	1;"	d	file:
NO_UINT64_MACROS	libowfat/uint/uint64_read_big.c	1;"	d	file:
NO_UINT64_MACROS	libowfat/uint/uint64_unpack.c	1;"	d	file:
NO_UINT64_MACROS	libowfat/uint/uint64_unpack_big.c	1;"	d	file:
NUM_TYPES	libtorrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
OBJCOPY	Makefile	/^OBJCOPY = $(CROSS_COMPILE)objcopy$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR := $(TOP_DIR)\/obj$/;"	m
OBSERVER_HPP	libtorrent/include/libtorrent/kademlia/observer.hpp	34;"	d
OPENREADCLOSE_H	libowfat/libowfat/openreadclose.h	3;"	d
OPENREADCLOSE_H	libowfat/openreadclose.h	3;"	d
OPEN_H	libowfat/libowfat/open.h	3;"	d
OPEN_H	libowfat/open.h	3;"	d
OPEN_OBJS	libowfat/GNUmakefile	/^OPEN_OBJS=$(patsubst open\/%.c,%.o,$(wildcard open\/*.c))$/;"	m
OPEN_OBJS	libowfat/Makefile	/^OPEN_OBJS=open_append.o open_excl.o open_read.o open_rw.o open_trunc.o open_write.o openreadclose.o readclose.o $/;"	m
OPT_PLUS	libowfat/GNUmakefile	/^OPT_PLUS=-O3 $(NATIVE)$/;"	m
OPT_PLUS	libowfat/Makefile	/^OPT_PLUS=-O3 $(NATIVE)$/;"	m
OPT_REG	libowfat/GNUmakefile	/^OPT_REG=-O2$/;"	m
OPT_REG	libowfat/Makefile	/^OPT_REG=-O2$/;"	m
OT_ACCESSLIST_H__	include/ot_accesslist.h	7;"	d
OT_ADMINIP_MAX	include/trackerlogic.h	47;"	d
OT_BUCKET_COUNT	include/trackerlogic.h	56;"	d
OT_BUCKET_COUNT_BITS	include/trackerlogic.h	54;"	d
OT_BUCKET_COUNT_SHIFT	include/trackerlogic.h	57;"	d
OT_CLEAN_H__	include/ot_clean.h	7;"	d
OT_CLEAN_INTERVAL_MINUTES	include/ot_clean.h	10;"	d
OT_CLEAN_SLEEP	include/ot_clean.h	13;"	d
OT_CLIENT_REQUEST_INTERVAL	include/trackerlogic.h	31;"	d
OT_CLIENT_REQUEST_INTERVAL_RANDOM	include/trackerlogic.h	37;"	d
OT_CLIENT_REQUEST_VARIATION	include/trackerlogic.h	32;"	d
OT_CLIENT_SYNC_RENEW_BOUNDARY	include/trackerlogic.h	44;"	d
OT_CLIENT_TIMEOUT	include/trackerlogic.h	28;"	d
OT_CLIENT_TIMEOUT_CHECKINTERVAL	include/trackerlogic.h	29;"	d
OT_CLIENT_TIMEOUT_SEND	include/trackerlogic.h	30;"	d
OT_FULLSCRAPE_H__	include/ot_fullscrape.h	7;"	d
OT_HASH_COMPARE_SIZE	include/trackerlogic.h	85;"	d
OT_HTTP_H__	include/ot_http.h	7;"	d
OT_IOVEC_H__	include/ot_iovec.h	7;"	d
OT_IP_SIZE	include/trackerlogic.h	20;"	d
OT_IP_SIZE	include/trackerlogic.h	23;"	d
OT_LIVESYNC_H__	include/ot_livesync.h	7;"	d
OT_MAXMULTISCRAPE_COUNT	src/ot_http.c	33;"	d	file:
OT_MAX_THREADS	include/trackerlogic.h	48;"	d
OT_MODEST_PEER_TIMEOUT	include/trackerlogic.h	41;"	d
OT_MUTEX_H__	include/ot_mutex.h	7;"	d
OT_PEERFLAG	include/trackerlogic.h	82;"	d
OT_PEERLIST_HASBUCKETS	include/trackerlogic.h	107;"	d
OT_PEERTIME	include/trackerlogic.h	83;"	d
OT_PEER_BUCKET_MAXCOUNT	include/ot_vector.h	16;"	d
OT_PEER_BUCKET_MINCOUNT	include/ot_vector.h	15;"	d
OT_PEER_COMPARE_SIZE	include/trackerlogic.h	86;"	d
OT_PEER_TIMEOUT	include/trackerlogic.h	50;"	d
OT_PERMISSION_MAY_FULLSCRAPE	include/ot_accesslist.h	/^  OT_PERMISSION_MAY_FULLSCRAPE = 0x1,$/;"	e	enum:__anon11
OT_PERMISSION_MAY_LIVESYNC	include/ot_accesslist.h	/^  OT_PERMISSION_MAY_LIVESYNC   = 0x4,$/;"	e	enum:__anon11
OT_PERMISSION_MAY_PROXY	include/ot_accesslist.h	/^  OT_PERMISSION_MAY_PROXY      = 0x8$/;"	e	enum:__anon11
OT_PERMISSION_MAY_STAT	include/ot_accesslist.h	/^  OT_PERMISSION_MAY_STAT       = 0x2,$/;"	e	enum:__anon11
OT_RIJNDAEL_H__	include/ot_rijndael.h	13;"	d
OT_SCRAPE_CHUNK_SIZE	src/ot_fullscrape.c	33;"	d	file:
OT_SCRAPE_MAXENTRYLEN	src/ot_fullscrape.c	36;"	d	file:
OT_SETIP	include/trackerlogic.h	77;"	d
OT_SETIP	include/trackerlogic.h	79;"	d
OT_SETPORT	include/trackerlogic.h	81;"	d
OT_STATS_H__	include/ot_stats.h	7;"	d
OT_STATS_TMPSIZE	src/ot_stats.c	42;"	d	file:
OT_SYNC_CHUNK_SIZE	src/ot_sync.c	28;"	d	file:
OT_SYNC_H__	include/ot_sync.h	7;"	d
OT_SYNC_INTERVAL_MINUTES	src/proxy.c	59;"	d	file:
OT_SYNC_PEER	src/ot_livesync.c	/^enum { OT_SYNC_PEER };$/;"	e	enum:__anon4	file:
OT_SYNC_PEER	src/proxy.c	/^enum { OT_SYNC_PEER };$/;"	e	enum:__anon7	file:
OT_SYNC_SLEEP	src/proxy.c	62;"	d	file:
OT_TORRENT_TIMEOUT	include/trackerlogic.h	35;"	d
OT_TORRENT_TIMEOUT_HOURS	include/trackerlogic.h	34;"	d
OT_TRACKERLOGIC_H__	include/trackerlogic.h	7;"	d
OT_UDP_H__	include/ot_udp.h	7;"	d
OT_VECTOR_GROW_RATIO	include/ot_vector.h	11;"	d
OT_VECTOR_H__	include/ot_vector.h	7;"	d
OT_VECTOR_MIN_MEMBERS	include/ot_vector.h	10;"	d
OT_VECTOR_SHRINK_RATIO	include/ot_vector.h	13;"	d
OT_VECTOR_SHRINK_THRESH	include/ot_vector.h	12;"	d
OUTSIDE	libowfat/textcode/scan_html.c	/^  OUTSIDE,	\/*                                        ^^^^^^^^^^^^^^^^ -> libowfat<home *\/$/;"	e	enum:htmlmode	file:
O_BINARY	libowfat/test/cdbget2.c	9;"	d	file:
O_NDELAY	libowfat/io/io_block.c	13;"	d	file:
O_NDELAY	libowfat/io/io_nonblock.c	13;"	d	file:
O_NDELAY	libowfat/open/open_append.c	7;"	d	file:
O_NDELAY	libowfat/open/open_excl.c	7;"	d	file:
O_NDELAY	libowfat/open/open_read.c	7;"	d	file:
O_NDELAY	libowfat/open/open_rw.c	7;"	d	file:
O_NDELAY	libowfat/open/open_trunc.c	7;"	d	file:
O_NDELAY	libowfat/open/open_write.c	7;"	d	file:
O_NDELAY	libowfat/unix/ndelay_off.c	13;"	d	file:
O_NDELAY	libowfat/unix/ndelay_on.c	13;"	d	file:
PACKET_LEN	include/base.h	74;"	d
PACKET_LEN_OFFSET	src/socket.c	7;"	d	file:
PACKET_ORDER_OFFSET	src/socket.c	8;"	d	file:
PACKET_TOKEN_OFFSET	src/socket.c	9;"	d	file:
PEERS_BENCODED	include/trackerlogic.h	21;"	d
PEERS_BENCODED	include/trackerlogic.h	24;"	d
PEER_FLAG_COMPLETED	include/trackerlogic.h	/^static const uint8_t PEER_FLAG_COMPLETED = 0x40;$/;"	v
PEER_FLAG_FROM_SYNC	include/trackerlogic.h	/^static const uint8_t PEER_FLAG_FROM_SYNC = 0x10;$/;"	v
PEER_FLAG_LEECHING	include/trackerlogic.h	/^static const uint8_t PEER_FLAG_LEECHING  = 0x00;$/;"	v
PEER_FLAG_SEEDING	include/trackerlogic.h	/^static const uint8_t PEER_FLAG_SEEDING   = 0x80;$/;"	v
PEER_FLAG_STOPPED	include/trackerlogic.h	/^static const uint8_t PEER_FLAG_STOPPED   = 0x20;$/;"	v
POLL	libowfat/io_internal.h	/^  POLL$/;"	e	enum:__io_waitmode
PP_NARG	libowfat/libowfat/va_narg.h	6;"	d
PP_NARG	libowfat/va_narg.h	6;"	d
PRINT_HPP_	include/print.hpp	2;"	d
PROGRESS_NOTIFICATION	libtorrent/include/libtorrent/alert_types.hpp	67;"	d
PROGRESS_NOTIFICATION	libtorrent/include/libtorrent/alert_types.hpp	69;"	d
PROTECTION_LEVEL_UNRESTRICTED	libtorrent/include/libtorrent/socket.hpp	107;"	d
PROTOBUF_TYPE	include/packet.h	31;"	d
PROTO_FLAG	include/trackerlogic.h	/^typedef enum { FLAG_TCP, FLAG_UDP, FLAG_MCA, FLAG_SELFPIPE } PROTO_FLAG;$/;"	t	typeref:enum:__anon21
PROXYPEER_ISCONNECTED	src/proxy.c	232;"	d	file:
PROXYPEER_NEEDSCONNECT	src/proxy.c	231;"	d	file:
PROXYPEER_SETCONNECTED	src/proxy.c	236;"	d	file:
PROXYPEER_SETCONNECTING	src/proxy.c	234;"	d	file:
PROXYPEER_SETDISCONNECTED	src/proxy.c	233;"	d	file:
PROXYPEER_SETWAITTRACKERID	src/proxy.c	235;"	d	file:
PUFF_HPP_INCLUDED	libtorrent/include/libtorrent/puff.hpp	25;"	d
PUTU32	src/ot_rijndael.c	366;"	d	file:
Protocol	libtorrent/include/libtorrent/socket.hpp	45;"	d
Protocol	libtorrent/include/libtorrent/socket.hpp	59;"	d
QMAKE	Makefile	/^QMAKE= qmake$/;"	m
RANGECHECK_H	libowfat/libowfat/rangecheck.h	3;"	d
RANGECHECK_H	libowfat/rangecheck.h	3;"	d
READCLOSE_H	libowfat/libowfat/readclose.h	2;"	d
READCLOSE_H	libowfat/readclose.h	2;"	d
REFRESH_050324_HPP	libtorrent/include/libtorrent/kademlia/refresh.hpp	34;"	d
ROF_SRCIF_SELECTED	libtorrent/include/libtorrent/aux_/route.h	96;"	d
ROTATE	libowfat/dns/dns_random.c	11;"	d	file:
ROUTING_TABLE_HPP	libtorrent/include/libtorrent/kademlia/routing_table.hpp	34;"	d
RPC_MANAGER_HPP	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	34;"	d
RTAX_AUTHOR	libtorrent/include/libtorrent/aux_/route.h	302;"	d
RTAX_BRD	libtorrent/include/libtorrent/aux_/route.h	303;"	d
RTAX_DST	libtorrent/include/libtorrent/aux_/route.h	296;"	d
RTAX_GATEWAY	libtorrent/include/libtorrent/aux_/route.h	297;"	d
RTAX_GENMASK	libtorrent/include/libtorrent/aux_/route.h	299;"	d
RTAX_IFA	libtorrent/include/libtorrent/aux_/route.h	301;"	d
RTAX_IFP	libtorrent/include/libtorrent/aux_/route.h	300;"	d
RTAX_MAX	libtorrent/include/libtorrent/aux_/route.h	304;"	d
RTAX_NETMASK	libtorrent/include/libtorrent/aux_/route.h	298;"	d
RTA_AUTHOR	libtorrent/include/libtorrent/aux_/route.h	290;"	d
RTA_BRD	libtorrent/include/libtorrent/aux_/route.h	291;"	d
RTA_DST	libtorrent/include/libtorrent/aux_/route.h	284;"	d
RTA_GATEWAY	libtorrent/include/libtorrent/aux_/route.h	285;"	d
RTA_GENMASK	libtorrent/include/libtorrent/aux_/route.h	287;"	d
RTA_IFA	libtorrent/include/libtorrent/aux_/route.h	289;"	d
RTA_IFP	libtorrent/include/libtorrent/aux_/route.h	288;"	d
RTA_NETMASK	libtorrent/include/libtorrent/aux_/route.h	286;"	d
RTFREE	libtorrent/include/libtorrent/aux_/route.h	413;"	d
RTFREE_LOCKED	libtorrent/include/libtorrent/aux_/route.h	414;"	d
RTF_BLACKHOLE	libtorrent/include/libtorrent/aux_/route.h	180;"	d
RTF_BROADCAST	libtorrent/include/libtorrent/aux_/route.h	190;"	d
RTF_CLONING	libtorrent/include/libtorrent/aux_/route.h	176;"	d
RTF_CONDEMNED	libtorrent/include/libtorrent/aux_/route.h	193;"	d
RTF_DELCLONE	libtorrent/include/libtorrent/aux_/route.h	175;"	d
RTF_DONE	libtorrent/include/libtorrent/aux_/route.h	174;"	d
RTF_DYNAMIC	libtorrent/include/libtorrent/aux_/route.h	172;"	d
RTF_GATEWAY	libtorrent/include/libtorrent/aux_/route.h	169;"	d
RTF_HOST	libtorrent/include/libtorrent/aux_/route.h	170;"	d
RTF_IFSCOPE	libtorrent/include/libtorrent/aux_/route.h	192;"	d
RTF_LLINFO	libtorrent/include/libtorrent/aux_/route.h	178;"	d
RTF_LOCAL	libtorrent/include/libtorrent/aux_/route.h	189;"	d
RTF_MODIFIED	libtorrent/include/libtorrent/aux_/route.h	173;"	d
RTF_MULTICAST	libtorrent/include/libtorrent/aux_/route.h	191;"	d
RTF_PINNED	libtorrent/include/libtorrent/aux_/route.h	188;"	d
RTF_PRCLONING	libtorrent/include/libtorrent/aux_/route.h	184;"	d
RTF_PROTO1	libtorrent/include/libtorrent/aux_/route.h	182;"	d
RTF_PROTO2	libtorrent/include/libtorrent/aux_/route.h	181;"	d
RTF_PROTO3	libtorrent/include/libtorrent/aux_/route.h	186;"	d
RTF_REJECT	libtorrent/include/libtorrent/aux_/route.h	171;"	d
RTF_STATIC	libtorrent/include/libtorrent/aux_/route.h	179;"	d
RTF_UP	libtorrent/include/libtorrent/aux_/route.h	168;"	d
RTF_WASCLONED	libtorrent/include/libtorrent/aux_/route.h	185;"	d
RTF_XRESOLVE	libtorrent/include/libtorrent/aux_/route.h	177;"	d
RTM_ADD	libtorrent/include/libtorrent/aux_/route.h	246;"	d
RTM_CHANGE	libtorrent/include/libtorrent/aux_/route.h	248;"	d
RTM_DELADDR	libtorrent/include/libtorrent/aux_/route.h	258;"	d
RTM_DELETE	libtorrent/include/libtorrent/aux_/route.h	247;"	d
RTM_DELMADDR	libtorrent/include/libtorrent/aux_/route.h	261;"	d
RTM_GET	libtorrent/include/libtorrent/aux_/route.h	249;"	d
RTM_GET2	libtorrent/include/libtorrent/aux_/route.h	267;"	d
RTM_GET_SILENT	libtorrent/include/libtorrent/aux_/route.h	263;"	d
RTM_IFINFO	libtorrent/include/libtorrent/aux_/route.h	259;"	d
RTM_IFINFO2	libtorrent/include/libtorrent/aux_/route.h	265;"	d
RTM_LOCK	libtorrent/include/libtorrent/aux_/route.h	253;"	d
RTM_LOSING	libtorrent/include/libtorrent/aux_/route.h	250;"	d
RTM_MISS	libtorrent/include/libtorrent/aux_/route.h	252;"	d
RTM_NEWADDR	libtorrent/include/libtorrent/aux_/route.h	257;"	d
RTM_NEWMADDR	libtorrent/include/libtorrent/aux_/route.h	260;"	d
RTM_NEWMADDR2	libtorrent/include/libtorrent/aux_/route.h	266;"	d
RTM_OLDADD	libtorrent/include/libtorrent/aux_/route.h	254;"	d
RTM_OLDDEL	libtorrent/include/libtorrent/aux_/route.h	255;"	d
RTM_REDIRECT	libtorrent/include/libtorrent/aux_/route.h	251;"	d
RTM_RESOLVE	libtorrent/include/libtorrent/aux_/route.h	256;"	d
RTM_RTTUNIT	libtorrent/include/libtorrent/aux_/route.h	123;"	d
RTM_VERSION	libtorrent/include/libtorrent/aux_/route.h	241;"	d
RTV_EXPIRE	libtorrent/include/libtorrent/aux_/route.h	274;"	d
RTV_HOPCOUNT	libtorrent/include/libtorrent/aux_/route.h	273;"	d
RTV_MTU	libtorrent/include/libtorrent/aux_/route.h	272;"	d
RTV_RPIPE	libtorrent/include/libtorrent/aux_/route.h	275;"	d
RTV_RTT	libtorrent/include/libtorrent/aux_/route.h	278;"	d
RTV_RTTVAR	libtorrent/include/libtorrent/aux_/route.h	279;"	d
RTV_SPIPE	libtorrent/include/libtorrent/aux_/route.h	276;"	d
RTV_SSTHRESH	libtorrent/include/libtorrent/aux_/route.h	277;"	d
RT_ADDREF	libtorrent/include/libtorrent/aux_/route.h	386;"	d
RT_ADDREF_LOCKED	libtorrent/include/libtorrent/aux_/route.h	372;"	d
RT_CONVERT_LOCK	libtorrent/include/libtorrent/aux_/route.h	360;"	d
RT_LOCK	libtorrent/include/libtorrent/aux_/route.h	346;"	d
RT_LOCK_ASSERT_HELD	libtorrent/include/libtorrent/aux_/route.h	340;"	d
RT_LOCK_ASSERT_NOTHELD	libtorrent/include/libtorrent/aux_/route.h	343;"	d
RT_LOCK_SPIN	libtorrent/include/libtorrent/aux_/route.h	353;"	d
RT_REMREF	libtorrent/include/libtorrent/aux_/route.h	407;"	d
RT_REMREF_LOCKED	libtorrent/include/libtorrent/aux_/route.h	392;"	d
RT_UNLOCK	libtorrent/include/libtorrent/aux_/route.h	365;"	d
SAFEMULT_H	libowfat/libowfat/safemult.h	3;"	d
SAFEMULT_H	libowfat/safemult.h	3;"	d
SCAN_H	libowfat/libowfat/scan.h	3;"	d
SCAN_H	libowfat/scan.h	3;"	d
SCAN_OBJS	libowfat/GNUmakefile	/^SCAN_OBJS=$(patsubst scan\/%.c,%.o,$(wildcard scan\/*.c))$/;"	m
SCAN_OBJS	libowfat/Makefile	/^SCAN_OBJS=scan_8int.o scan_8long.o scan_8longlong.o scan_8longn.o scan_8short.o scan_asn1derlength.o scan_asn1dertag.o scan_charsetnskip.o scan_double.o scan_fromhex.o scan_httpdate.o scan_int.o scan_iso8601.o scan_long.o scan_longlong.o scan_longn.o scan_netstring.o scan_noncharsetnskip.o scan_nonwhitenskip.o scan_pb_tag.o scan_pb_type0_sint.o scan_pb_type1_double.o scan_pb_type1_fixed64.o scan_pb_type2_stringlen.o scan_pb_type5_fixed32.o scan_pb_type5_float.o scan_plusminus.o scan_short.o scan_uint.o scan_ulong.o scan_ulonglong.o scan_ulongn.o scan_ushort.o scan_utf8.o scan_varint.o scan_whitenskip.o scan_xint.o scan_xlong.o scan_xlonglong.o scan_xlongn.o scan_xshort.o $/;"	m
SCAN_PATH	include/scan_urlencoded_query.h	/^  SCAN_PATH                  = 1,$/;"	e	enum:__anon19
SCAN_SEARCHPATH_FLAG	include/scan_urlencoded_query.h	/^} SCAN_SEARCHPATH_FLAG;$/;"	t	typeref:enum:__anon19
SCAN_SEARCHPATH_PARAM	include/scan_urlencoded_query.h	/^  SCAN_SEARCHPATH_PARAM      = 2,$/;"	e	enum:__anon19
SCAN_SEARCHPATH_TERMINATOR	include/scan_urlencoded_query.h	/^  SCAN_SEARCHPATH_TERMINATOR = 8$/;"	e	enum:__anon19
SCAN_SEARCHPATH_VALUE	include/scan_urlencoded_query.h	/^  SCAN_SEARCHPATH_VALUE      = 4,$/;"	e	enum:__anon19
SCAN_URLENCODED_QUERY_H__	include/scan_urlencoded_query.h	7;"	d
SCHED_PRIORITY_SERVER	src/main.c	64;"	d	file:
SCHED_PRIORITY_SERVER	src/main.c	706;"	d	file:
SELECT_H	libowfat/select.h	2;"	d
SENDFILE	libowfat/io/io_sendfile.c	9;"	d	file:
SENDFILE	libowfat/trybsdsf.c	2;"	d	file:
SESSION_VIEW_HPP_	include/session_view.hpp	34;"	d
SET_TRACKER	src/main.c	/^	SET_TRACKER,$/;"	e	enum:BT_CMD	file:
SLOTS	libowfat/io.h	/^enum { SLOTS=128 };$/;"	e	enum:__anon28
SLOTS	libowfat/libowfat/io.h	/^enum { SLOTS=128 };$/;"	e	enum:__anon34
SOCKET_H	libowfat/libowfat/socket.h	3;"	d
SOCKET_H	libowfat/socket.h	3;"	d
SOCKET_OBJS	libowfat/GNUmakefile	/^SOCKET_OBJS=$(patsubst socket\/%.c,%.o,$(wildcard socket\/*.c))$/;"	m
SOCKET_OBJS	libowfat/Makefile	/^SOCKET_OBJS=fmt_ip4.o fmt_ip6.o fmt_ip6_flat.o fmt_ip6c.o fmt_ip6if.o fmt_ip6ifc.o init.o scan_ip4.o scan_ip6.o scan_ip6_flat.o scan_ip6if.o socket_accept4.o socket_accept6.o socket_bind4.o socket_bind4_reuse.o socket_bind6.o socket_bind6_reuse.o socket_broadcast.o socket_connect4.o socket_connect6.o socket_connected.o socket_deferaccept.o socket_fastopen.o socket_fastopen_connect4.o socket_fastopen_connect6.o socket_getifidx.o socket_getifname.o socket_ip4loopback.o socket_listen.o socket_local4.o socket_local6.o socket_mchopcount6.o socket_mcjoin4.o socket_mcjoin6.o socket_mcleave4.o socket_mcleave6.o socket_mcloop4.o socket_mcloop6.o socket_mcttl4.o socket_noipv6.o socket_quickack.o socket_recv4.o socket_recv6.o socket_remote4.o socket_remote6.o socket_sctp4.o socket_sctp4b.o socket_sctp6.o socket_sctp6b.o socket_send4.o socket_send6.o socket_tcp4.o socket_tcp4b.o socket_tcp6.o socket_tcp6b.o socket_tryreservein.o socket_udp4.o socket_udp6.o socket_v4mappedprefix.o socket_v6any.o socket_v6loopback.o $/;"	m
SOL_NETLINK	libtorrent/include/libtorrent/socket.hpp	69;"	d
SOL_TCP	libowfat/socket/socket_fastopen.c	11;"	d	file:
START_BT	src/main.c	/^	START_BT= 2000,$/;"	e	enum:BT_CMD	file:
STATS_NETWORK_NODE_BITWIDTH	src/ot_stats.c	66;"	d	file:
STATS_NETWORK_NODE_COUNT	src/ot_stats.c	67;"	d	file:
STATS_NETWORK_NODE_LIMIT	src/ot_stats.c	78;"	d	file:
STATS_NETWORK_NODE_LIMIT	src/ot_stats.c	81;"	d	file:
STATS_NETWORK_NODE_MAXDEPTH	src/ot_stats.c	77;"	d	file:
STATS_NETWORK_NODE_MAXDEPTH	src/ot_stats.c	80;"	d	file:
STOP_BT	src/main.c	/^	STOP_BT,$/;"	e	enum:BT_CMD	file:
STRALLOC_H	libowfat/libowfat/stralloc.h	3;"	d
STRALLOC_H	libowfat/stralloc.h	3;"	d
STRALLOC_OBJS	libowfat/GNUmakefile	/^STRALLOC_OBJS=$(patsubst stralloc\/%.c,%.o,$(wildcard stralloc\/*.c))$/;"	m
STRALLOC_OBJS	libowfat/Makefile	/^STRALLOC_OBJS=stralloc_append.o stralloc_cat.o stralloc_catb.o stralloc_catlong0.o stralloc_catm_internal.o stralloc_cats.o stralloc_catulong0.o stralloc_chomp.o stralloc_chop.o stralloc_copy.o stralloc_copyb.o stralloc_copys.o stralloc_diff.o stralloc_diffs.o stralloc_free.o stralloc_init.o stralloc_ready.o stralloc_readyplus.o stralloc_starts.o stralloc_zero.o $/;"	m
STREAMSYNC_OUTGOING_BUFFSIZE	src/proxy.c	52;"	d	file:
STRICT	libtorrent/include/libtorrent/aux_/windows.hpp	43;"	d
STRIP	Makefile	/^STRIP = $(CROSS_COMPILE)strip$/;"	m
STRUCT_HTTP_FLAG	include/ot_http.h	/^} STRUCT_HTTP_FLAG;$/;"	t	typeref:enum:__anon12
STRUCT_HTTP_FLAG_BZIP2	include/ot_http.h	/^  STRUCT_HTTP_FLAG_BZIP2          = 4$/;"	e	enum:__anon12
STRUCT_HTTP_FLAG_GZIP	include/ot_http.h	/^  STRUCT_HTTP_FLAG_GZIP           = 2,$/;"	e	enum:__anon12
STRUCT_HTTP_FLAG_WAITINGFORTASK	include/ot_http.h	/^  STRUCT_HTTP_FLAG_WAITINGFORTASK = 1,$/;"	e	enum:__anon12
STR_H	libowfat/libowfat/str.h	3;"	d
STR_H	libowfat/str.h	3;"	d
STR_OBJS	libowfat/GNUmakefile	/^STR_OBJS=$(patsubst str\/%.c,%.o,$(wildcard str\/*.c))$/;"	m
STR_OBJS	libowfat/Makefile	/^STR_OBJS=str_chr.o str_copy.o str_diff.o str_diffn.o str_len.o str_rchr.o str_start.o $/;"	m
ST_DATA	libtorrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
ST_FIN	libtorrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
ST_RESET	libtorrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
ST_STATE	libtorrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
ST_SYN	libtorrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
SUCCESS	include/base.h	62;"	d
SUCCESS	src/bt.cpp	26;"	d	file:
SUCCESS_HTTP_HEADER_LENGTH	src/ot_http.c	/^  SUCCESS_HTTP_HEADER_LENGTH = 80,$/;"	e	enum:__anon2	file:
SUCCESS_HTTP_HEADER_LENGTH_CONTENT_ENCODING	src/ot_http.c	/^  SUCCESS_HTTP_HEADER_LENGTH_CONTENT_ENCODING = 32,$/;"	e	enum:__anon2	file:
SUCCESS_HTTP_SIZE_OFF	src/ot_http.c	/^  SUCCESS_HTTP_SIZE_OFF = 17 };$/;"	e	enum:__anon2	file:
SYNC_IN	include/ot_sync.h	/^enum { SYNC_IN, SYNC_OUT };$/;"	e	enum:__anon16
SYNC_OUT	include/ot_sync.h	/^enum { SYNC_IN, SYNC_OUT };$/;"	e	enum:__anon16
TAGARG	libowfat/textcode/scan_html.c	/^  TAGARG,	\/*         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -> http:\/\/example.com\/"foo *\/$/;"	e	enum:htmlmode	file:
TAIA_FMTFRAC	libowfat/libowfat/taia.h	63;"	d
TAIA_FMTFRAC	libowfat/taia.h	63;"	d
TAIA_H	libowfat/libowfat/taia.h	3;"	d
TAIA_H	libowfat/taia.h	3;"	d
TAIA_OBJS	libowfat/GNUmakefile	/^TAIA_OBJS=$(patsubst taia\/%.c,%.o,$(wildcard taia\/*.c))$/;"	m
TAIA_OBJS	libowfat/Makefile	/^TAIA_OBJS=taia_add.o taia_addsec.o taia_approx.o taia_frac.o taia_half.o taia_less.o taia_now.o taia_pack.o taia_sub.o taia_tai.o taia_uint.o taia_unpack.o $/;"	m
TAIA_PACK	libowfat/libowfat/taia.h	50;"	d
TAIA_PACK	libowfat/taia.h	50;"	d
TAI_H	libowfat/libowfat/tai.h	3;"	d
TAI_H	libowfat/tai.h	3;"	d
TAI_OBJS	libowfat/GNUmakefile	/^TAI_OBJS=$(patsubst tai\/%.c,%.o,$(wildcard tai\/*.c))$/;"	m
TAI_OBJS	libowfat/Makefile	/^TAI_OBJS=tai_add.o tai_now.o tai_pack.o tai_sub.o tai_uint.o tai_unpack.o $/;"	m
TAI_PACK	libowfat/libowfat/tai.h	55;"	d
TAI_PACK	libowfat/tai.h	55;"	d
TARGET_ARCH	Makefile	/^TARGET_ARCH = x64$/;"	m
TASK_CLASS_MASK	include/ot_mutex.h	/^  TASK_CLASS_MASK                  = 0x0f00,$/;"	e	enum:__anon13
TASK_DMEM	include/ot_mutex.h	/^  TASK_DMEM                        = 0x0300,$/;"	e	enum:__anon13
TASK_DONE	include/ot_mutex.h	/^  TASK_DONE                        = 0x0f00,$/;"	e	enum:__anon13
TASK_END	src/main.c	/^	TASK_END = 8000,$/;"	e	enum:BT_CMD	file:
TASK_FLAGS_MASK	include/ot_mutex.h	/^  TASK_FLAGS_MASK                  = 0xf000$/;"	e	enum:__anon13
TASK_FLAG_BZIP2	include/ot_mutex.h	/^  TASK_FLAG_BZIP2                  = 0x2000,$/;"	e	enum:__anon13
TASK_FLAG_GZIP	include/ot_mutex.h	/^  TASK_FLAG_GZIP                   = 0x1000,$/;"	e	enum:__anon13
TASK_FULLSCRAPE	include/ot_mutex.h	/^  TASK_FULLSCRAPE                  = 0x0200, \/* Default mode *\/$/;"	e	enum:__anon13
TASK_FULLSCRAPE_TPB_ASCII	include/ot_mutex.h	/^  TASK_FULLSCRAPE_TPB_ASCII        = 0x0202,$/;"	e	enum:__anon13
TASK_FULLSCRAPE_TPB_ASCII_PLUS	include/ot_mutex.h	/^  TASK_FULLSCRAPE_TPB_ASCII_PLUS   = 0x0203,$/;"	e	enum:__anon13
TASK_FULLSCRAPE_TPB_BINARY	include/ot_mutex.h	/^  TASK_FULLSCRAPE_TPB_BINARY       = 0x0201,$/;"	e	enum:__anon13
TASK_FULLSCRAPE_TPB_URLENCODED	include/ot_mutex.h	/^  TASK_FULLSCRAPE_TPB_URLENCODED   = 0x0204,$/;"	e	enum:__anon13
TASK_FULLSCRAPE_TRACKERSTATE	include/ot_mutex.h	/^  TASK_FULLSCRAPE_TRACKERSTATE     = 0x0205,$/;"	e	enum:__anon13
TASK_STATS	include/ot_mutex.h	/^  TASK_STATS                       = 0x0100, \/* Mask *\/$/;"	e	enum:__anon13
TASK_STATS_BUSY_NETWORKS	include/ot_mutex.h	/^  TASK_STATS_BUSY_NETWORKS         = 0x0009,$/;"	e	enum:__anon13
TASK_STATS_COMPLETED	include/ot_mutex.h	/^  TASK_STATS_COMPLETED             = 0x000c,$/;"	e	enum:__anon13
TASK_STATS_CONNS	include/ot_mutex.h	/^  TASK_STATS_CONNS                 = 0x0001,$/;"	e	enum:__anon13
TASK_STATS_EVERYTHING	include/ot_mutex.h	/^  TASK_STATS_EVERYTHING            = 0x0106,$/;"	e	enum:__anon13
TASK_STATS_FULLLOG	include/ot_mutex.h	/^  TASK_STATS_FULLLOG               = 0x0107,$/;"	e	enum:__anon13
TASK_STATS_FULLSCRAPE	include/ot_mutex.h	/^  TASK_STATS_FULLSCRAPE            = 0x0005,$/;"	e	enum:__anon13
TASK_STATS_HTTPERRORS	include/ot_mutex.h	/^  TASK_STATS_HTTPERRORS            = 0x0007,$/;"	e	enum:__anon13
TASK_STATS_NUMWANTS	include/ot_mutex.h	/^  TASK_STATS_NUMWANTS              = 0x000d,$/;"	e	enum:__anon13
TASK_STATS_PEERS	include/ot_mutex.h	/^  TASK_STATS_PEERS                 = 0x0102,$/;"	e	enum:__anon13
TASK_STATS_RENEW	include/ot_mutex.h	/^  TASK_STATS_RENEW                 = 0x000a,$/;"	e	enum:__anon13
TASK_STATS_SCRAPE	include/ot_mutex.h	/^  TASK_STATS_SCRAPE                = 0x0004,$/;"	e	enum:__anon13
TASK_STATS_SLASH24S	include/ot_mutex.h	/^  TASK_STATS_SLASH24S              = 0x0103,$/;"	e	enum:__anon13
TASK_STATS_SYNCS	include/ot_mutex.h	/^  TASK_STATS_SYNCS                 = 0x000b,$/;"	e	enum:__anon13
TASK_STATS_TCP	include/ot_mutex.h	/^  TASK_STATS_TCP                   = 0x0002,$/;"	e	enum:__anon13
TASK_STATS_TOP10	include/ot_mutex.h	/^  TASK_STATS_TOP10                 = 0x0104,$/;"	e	enum:__anon13
TASK_STATS_TOP100	include/ot_mutex.h	/^  TASK_STATS_TOP100                = 0x0105,$/;"	e	enum:__anon13
TASK_STATS_TORRENTS	include/ot_mutex.h	/^  TASK_STATS_TORRENTS              = 0x0101,$/;"	e	enum:__anon13
TASK_STATS_TPB	include/ot_mutex.h	/^  TASK_STATS_TPB                   = 0x0006,$/;"	e	enum:__anon13
TASK_STATS_UDP	include/ot_mutex.h	/^  TASK_STATS_UDP                   = 0x0003,$/;"	e	enum:__anon13
TASK_STATS_VERSION	include/ot_mutex.h	/^  TASK_STATS_VERSION               = 0x0008,$/;"	e	enum:__anon13
TASK_STATS_WOODPECKERS	include/ot_mutex.h	/^  TASK_STATS_WOODPECKERS           = 0x0108,$/;"	e	enum:__anon13
TASK_TASK_MASK	include/ot_mutex.h	/^  TASK_TASK_MASK                   = 0x0fff,$/;"	e	enum:__anon13
TEXTCODE_H	libowfat/libowfat/textcode.h	3;"	d
TEXTCODE_H	libowfat/textcode.h	3;"	d
TEXTCODE_OBJS	libowfat/GNUmakefile	/^TEXTCODE_OBJS=$(patsubst textcode\/%.c,%.o,$(wildcard textcode\/*.c))$/;"	m
TEXTCODE_OBJS	libowfat/Makefile	/^TEXTCODE_OBJS=base64.o base64url.o fmt_base64.o fmt_base64url.o fmt_cescape.o fmt_foldwhitespace.o fmt_hexdump.o fmt_html.o fmt_html_tagarg.o fmt_jsonescape.o fmt_ldapescape.o fmt_ldapescape2.o fmt_quotedprintable.o fmt_to_array.o fmt_to_sa.o fmt_tofrom_array.o fmt_urlencoded.o fmt_uuencoded.o fmt_xml.o fmt_yenc.o scan_base64.o scan_base64url.o scan_cescape.o scan_hexdump.o scan_html.o scan_jsonescape.o scan_ldapescape.o scan_quotedprintable.o scan_to_array.o scan_to_sa.o scan_tofrom_array.o scan_urlencoded.o scan_uuencoded.o scan_yenc.o $/;"	m
TIMEOUT	libowfat/io_internal.h	/^  enum { CANREAD, CANWRITE, TIMEOUT } what;$/;"	e	enum:eventpacket::__anon41
TIMESTAMP_HISTORY_HPP	libtorrent/include/libtorrent/timestamp_history.hpp	34;"	d
TIMEZONE_OFFSET	src/tools.c	30;"	d	file:
TOP_DIR	Makefile	/^TOP_DIR := $(shell pwd)$/;"	m
TORRENT_ABI_VERSION	libtorrent/include/libtorrent/aux_/export.hpp	42;"	d
TORRENT_ABI_VERSION	libtorrent/include/libtorrent/aux_/export.hpp	44;"	d
TORRENT_ADDRESS_HPP_INCLUDED	libtorrent/include/libtorrent/address.hpp	34;"	d
TORRENT_ADD_TORRENT_PARAMS_HPP_INCLUDED	libtorrent/include/libtorrent/add_torrent_params.hpp	34;"	d
TORRENT_ALERT_HPP_INCLUDED	libtorrent/include/libtorrent/alert.hpp	34;"	d
TORRENT_ALERT_MANAGER_HPP_INCLUDED	libtorrent/include/libtorrent/alert_manager.hpp	34;"	d
TORRENT_ALERT_TYPES_HPP_INCLUDED	libtorrent/include/libtorrent/alert_types.hpp	34;"	d
TORRENT_ALIGNED_STORAGE_HPP_INCLUDE	libtorrent/include/libtorrent/aux_/aligned_storage.hpp	34;"	d
TORRENT_ALIGNED_UNION_HPP_INCLUDE	libtorrent/include/libtorrent/aux_/aligned_union.hpp	34;"	d
TORRENT_ALLOCA	libtorrent/include/libtorrent/aux_/alloca.hpp	80;"	d
TORRENT_ALLOCATING_HANDLER_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	34;"	d
TORRENT_ALLOCA_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/alloca.hpp	34;"	d
TORRENT_AMIGA	libtorrent/include/libtorrent/config.hpp	96;"	d
TORRENT_ANDROID	libtorrent/include/libtorrent/config.hpp	174;"	d
TORRENT_ANNOUNCE_ENTRY_HPP_INCLUDED	libtorrent/include/libtorrent/announce_entry.hpp	34;"	d
TORRENT_ARRAY_HPP	libtorrent/include/libtorrent/aux_/array.hpp	34;"	d
TORRENT_ASSERT	libtorrent/include/libtorrent/assert.hpp	114;"	d
TORRENT_ASSERT	libtorrent/include/libtorrent/assert.hpp	91;"	d
TORRENT_ASSERT_FAIL	libtorrent/include/libtorrent/assert.hpp	108;"	d
TORRENT_ASSERT_FAIL	libtorrent/include/libtorrent/assert.hpp	117;"	d
TORRENT_ASSERT_FAIL_VAL	libtorrent/include/libtorrent/assert.hpp	105;"	d
TORRENT_ASSERT_FAIL_VAL	libtorrent/include/libtorrent/assert.hpp	116;"	d
TORRENT_ASSERT_FAIL_VAL	libtorrent/include/libtorrent/assert.hpp	99;"	d
TORRENT_ASSERT_HPP_INCLUDED	libtorrent/include/libtorrent/assert.hpp	34;"	d
TORRENT_ASSERT_PRECOND	libtorrent/include/libtorrent/assert.hpp	113;"	d
TORRENT_ASSERT_PRECOND	libtorrent/include/libtorrent/assert.hpp	88;"	d
TORRENT_ASSERT_VAL	libtorrent/include/libtorrent/assert.hpp	104;"	d
TORRENT_ASSERT_VAL	libtorrent/include/libtorrent/assert.hpp	115;"	d
TORRENT_ASSERT_VAL	libtorrent/include/libtorrent/assert.hpp	95;"	d
TORRENT_AUTO_RETURN_TYPES	libtorrent/include/libtorrent/config.hpp	452;"	d
TORRENT_AUTO_RETURN_TYPES	libtorrent/include/libtorrent/config.hpp	85;"	d
TORRENT_AUX_IO_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/io.hpp	34;"	d
TORRENT_AUX_SESSION_SETTINGS_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/session_settings.hpp	34;"	d
TORRENT_AUX_TIME_HPP	libtorrent/include/libtorrent/aux_/time.hpp	34;"	d
TORRENT_BANDWIDTH_CHANNEL_HPP_INCLUDED	libtorrent/include/libtorrent/bandwidth_limit.hpp	34;"	d
TORRENT_BANDWIDTH_MANAGER_HPP_INCLUDED	libtorrent/include/libtorrent/bandwidth_manager.hpp	34;"	d
TORRENT_BANDWIDTH_QUEUE_ENTRY_HPP_INCLUDED	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	34;"	d
TORRENT_BANDWIDTH_SOCKET_HPP_INCLUDED	libtorrent/include/libtorrent/bandwidth_socket.hpp	34;"	d
TORRENT_BDECODE_HPP	libtorrent/include/libtorrent/bdecode.hpp	34;"	d
TORRENT_BENCODE_HPP_INCLUDED	libtorrent/include/libtorrent/bencode.hpp	34;"	d
TORRENT_BEOS	libtorrent/include/libtorrent/config.hpp	290;"	d
TORRENT_BIND_TO_DEVICE_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	34;"	d
TORRENT_BITFIELD_HPP_INCLUDED	libtorrent/include/libtorrent/bitfield.hpp	34;"	d
TORRENT_BLOCK_CACHE	libtorrent/include/libtorrent/block_cache.hpp	34;"	d
TORRENT_BLOCK_CACHE_REFERENCE_HPP	libtorrent/include/libtorrent/aux_/block_cache_reference.hpp	34;"	d
TORRENT_BLOOM_FILTER_HPP_INCLUDED	libtorrent/include/libtorrent/bloom_filter.hpp	34;"	d
TORRENT_BROADCAST_SOCKET_HPP_INCLUDED	libtorrent/include/libtorrent/broadcast_socket.hpp	34;"	d
TORRENT_BROKEN_RANDOM_DEVICE	libtorrent/include/libtorrent/config.hpp	212;"	d
TORRENT_BROKEN_RANDOM_DEVICE	libtorrent/include/libtorrent/config.hpp	333;"	d
TORRENT_BSD	libtorrent/include/libtorrent/config.hpp	110;"	d
TORRENT_BSD	libtorrent/include/libtorrent/config.hpp	321;"	d
TORRENT_BT_PEER_CONNECTION_HPP_INCLUDED	libtorrent/include/libtorrent/bt_peer_connection.hpp	35;"	d
TORRENT_BUFFER_HPP_INCLUDED	libtorrent/include/libtorrent/buffer.hpp	33;"	d
TORRENT_BYTESWAP_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/byteswap.hpp	34;"	d
TORRENT_CATCH	libtorrent/include/libtorrent/config.hpp	499;"	d
TORRENT_CATCH	libtorrent/include/libtorrent/config.hpp	504;"	d
TORRENT_CATCH_ALL	libtorrent/include/libtorrent/config.hpp	500;"	d
TORRENT_CATCH_ALL	libtorrent/include/libtorrent/config.hpp	505;"	d
TORRENT_CHAINED_BUFFER_HPP_INCLUDED	libtorrent/include/libtorrent/chained_buffer.hpp	34;"	d
TORRENT_CHOKER_HPP_INCLUDED	libtorrent/include/libtorrent/choker.hpp	34;"	d
TORRENT_CLOSE_REASON_HPP	libtorrent/include/libtorrent/close_reason.hpp	34;"	d
TORRENT_COMPLETE_TYPES_REQUIRED	libtorrent/include/libtorrent/config.hpp	406;"	d
TORRENT_COMPLETE_TYPES_REQUIRED	libtorrent/include/libtorrent/config.hpp	65;"	d
TORRENT_COMPLETE_TYPES_REQUIRED	libtorrent/include/libtorrent/config.hpp	72;"	d
TORRENT_CONDITIONAL_EXPORT	libtorrent/include/libtorrent/hex.hpp	50;"	d
TORRENT_CONDITIONAL_EXPORT	libtorrent/include/libtorrent/hex.hpp	52;"	d
TORRENT_CONDITIONAL_EXPORT	libtorrent/include/libtorrent/hex.hpp	72;"	d
TORRENT_CONFIG_HPP_INCLUDED	libtorrent/include/libtorrent/config.hpp	34;"	d
TORRENT_CONTAINER_WRAPPER_HPP	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	34;"	d
TORRENT_COPY_PTR	libtorrent/include/libtorrent/copy_ptr.hpp	34;"	d
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	/^		counters& operator=(counters const&) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	/^		counters() TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	/^		counters(counters const&) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	/^		std::int64_t inc_stats_counter(int c, std::int64_t value = 1) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	/^		std::int64_t operator[](int i) const TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	/^		void blend_stats_counter(int c, std::int64_t value, int ratio) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	/^		void set_value(int c, std::int64_t value) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	474;"	d
TORRENT_COUNTER_NOEXCEPT	libtorrent/include/libtorrent/performance_counters.hpp	476;"	d
TORRENT_CPP98_DEQUE	libtorrent/include/libtorrent/chained_buffer.hpp	52;"	d
TORRENT_CPP98_DEQUE	libtorrent/include/libtorrent/chained_buffer.hpp	54;"	d
TORRENT_CPUID_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/cpuid.hpp	34;"	d
TORRENT_CRC32C_HPP_INCLUDE	libtorrent/include/libtorrent/crc32c.hpp	34;"	d
TORRENT_CREATE_TORRENT_HPP_INCLUDED	libtorrent/include/libtorrent/create_torrent.hpp	34;"	d
TORRENT_DEADLINE_TIMER_HPP_INCLUDED	libtorrent/include/libtorrent/deadline_timer.hpp	34;"	d
TORRENT_DEBUG_HPP_INCLUDED	libtorrent/include/libtorrent/debug.hpp	34;"	d
TORRENT_DEBUG_STREAMING	libtorrent/include/libtorrent/torrent.hpp	98;"	d
TORRENT_DECLARE_DUMMY	libtorrent/include/libtorrent/config.hpp	501;"	d
TORRENT_DECLARE_DUMMY	libtorrent/include/libtorrent/config.hpp	506;"	d
TORRENT_DEFERRED_HANDLER_HPP	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	34;"	d
TORRENT_DEFINE_ALERT	libtorrent/include/libtorrent/alert_types.hpp	206;"	d
TORRENT_DEFINE_ALERT_IMPL	libtorrent/include/libtorrent/alert_types.hpp	198;"	d
TORRENT_DEFINE_ALERT_PRIO	libtorrent/include/libtorrent/alert_types.hpp	209;"	d
TORRENT_DEPRECATED	libtorrent/include/libtorrent/aux_/deprecated.hpp	42;"	d
TORRENT_DEPRECATED	libtorrent/include/libtorrent/aux_/deprecated.hpp	55;"	d
TORRENT_DEPRECATED	libtorrent/include/libtorrent/aux_/deprecated.hpp	71;"	d
TORRENT_DEPRECATED	libtorrent/include/libtorrent/aux_/deprecated.hpp	77;"	d
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			accept TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			bind TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			bind_to_device TORRENT_DEPRECATED_ENUM$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			bittyrant_with_no_uplimit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::final::performance_warning_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			enum_if TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			get_socket_name TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			i2p TORRENT_DEPRECATED_ENUM,$/;"	m	struct:final	typeref:enum:final::i2p
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			i2p TORRENT_DEPRECATED_ENUM,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::i2p
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			listen TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			open TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			parse_addr TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			socks5 TORRENT_DEPRECATED_ENUM,$/;"	m	struct:final	typeref:enum:final::socks5
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			socks5 TORRENT_DEPRECATED_ENUM,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::socks5
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			tcp_ssl TORRENT_DEPRECATED_ENUM,$/;"	m	struct:final	typeref:enum:final::tcp_ssl
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			tcp_ssl TORRENT_DEPRECATED_ENUM,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::tcp_ssl
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			udp TORRENT_DEPRECATED_ENUM,$/;"	m	struct:final	typeref:enum:final::udp
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/alert_types.hpp	/^			udp TORRENT_DEPRECATED_ENUM,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::udp
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/aux_/deprecated.hpp	43;"	d
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/aux_/deprecated.hpp	59;"	d
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/aux_/deprecated.hpp	81;"	d
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/error_code.hpp	/^			natpmp_not_authorized TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/error_code.hpp	/^			network_failure TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/error_code.hpp	/^			no_resources TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/error_code.hpp	/^			unsupported_opcode TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/error_code.hpp	/^			unsupported_protocol_version TORRENT_DEPRECATED_ENUM = 120,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/session_handle.hpp	/^			listen_no_system_port TORRENT_DEPRECATED_ENUM = 0x02$/;"	e	enum:libtorrent::session_handle::listen_on_flags_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/session_handle.hpp	/^			listen_reuse_address TORRENT_DEPRECATED_ENUM = 0x01,$/;"	e	enum:libtorrent::session_handle::listen_on_flags_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_loaded_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			aio_max TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			announce_double_nat TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			bittyrant_choker TORRENT_DEPRECATED_ENUM = 3$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::bittyrant_choker
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			broadcast_lsd TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			cache_buffer_chunk_size TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			contiguous_recv_buffer TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			decrease_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			default_cache_min_age TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			default_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			dont_flush_write_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			file_checks_delay_per_block TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			force_proxy TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			guided_read_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			half_open_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			hashing_threads TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			ignore_limits_on_local_network TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			ignore_resume_timestamps TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			increase_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			lazy_bitfields TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			local_download_rate_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			local_upload_rate_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			lock_disk_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			lock_files TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			low_prio_disk TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			mmap_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::string_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			network_threads TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			rate_limit_utp TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			ssl_listen TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			strict_super_seeding TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_disk_cache_pool TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_disk_read_ahead TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_write_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_delayed_ack TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/storage_defs.hpp	/^		always_replace_files TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::deprecated_move_flags_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/storage_defs.hpp	/^		dont_replace TORRENT_DEPRECATED_ENUM$/;"	e	enum:libtorrent::deprecated_move_flags_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/storage_defs.hpp	/^		fail_if_exist TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::deprecated_move_flags_t
TORRENT_DEPRECATED_ENUM	libtorrent/include/libtorrent/torrent_status.hpp	/^			queued_for_checking TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::torrent_status::state_t
TORRENT_DEPRECATED_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	96;"	d
TORRENT_DEPRECATED_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	98;"	d
TORRENT_DEPRECATED_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/deprecated.hpp	34;"	d
TORRENT_DEPRECATED_MEMBER	libtorrent/include/libtorrent/aux_/deprecated.hpp	44;"	d
TORRENT_DEPRECATED_MEMBER	libtorrent/include/libtorrent/aux_/deprecated.hpp	60;"	d
TORRENT_DEPRECATED_MEMBER	libtorrent/include/libtorrent/aux_/deprecated.hpp	85;"	d
TORRENT_DEQUE_HPP	libtorrent/include/libtorrent/aux_/deque.hpp	34;"	d
TORRENT_DEV_RANDOM_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/dev_random.hpp	34;"	d
TORRENT_DHT_DOS_BLOCKER	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	34;"	d
TORRENT_DHT_SETTINGS_HPP_INCLUDED	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	34;"	d
TORRENT_DHT_STORAGE_HPP	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	34;"	d
TORRENT_DHT_TRACKER	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	34;"	d
TORRENT_DIRECT_REQUEST_HPP	libtorrent/include/libtorrent/kademlia/direct_request.hpp	34;"	d
TORRENT_DISK_BUFFER_HOLDER_HPP_INCLUDED	libtorrent/include/libtorrent/disk_buffer_holder.hpp	34;"	d
TORRENT_DISK_BUFFER_POOL_HPP	libtorrent/include/libtorrent/disk_buffer_pool.hpp	34;"	d
TORRENT_DISK_INTERFACE_HPP	libtorrent/include/libtorrent/disk_interface.hpp	34;"	d
TORRENT_DISK_IO_JOB_HPP	libtorrent/include/libtorrent/disk_io_job.hpp	34;"	d
TORRENT_DISK_IO_THREAD	libtorrent/include/libtorrent/disk_io_thread.hpp	34;"	d
TORRENT_DISK_IO_THREAD_POOL	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	34;"	d
TORRENT_DISK_JOB_FENCE_HPP_INCLUDE	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	34;"	d
TORRENT_DISK_JOB_POOL	libtorrent/include/libtorrent/disk_job_pool.hpp	34;"	d
TORRENT_DISK_OBSERVER_HPP	libtorrent/include/libtorrent/disk_observer.hpp	34;"	d
TORRENT_DOWNLOAD_PRIORITY_HPP_INCLUDED	libtorrent/include/libtorrent/download_priority.hpp	34;"	d
TORRENT_ENTRY_HPP_INCLUDED	libtorrent/include/libtorrent/entry.hpp	34;"	d
TORRENT_ENUM_NET_HPP_INCLUDED	libtorrent/include/libtorrent/enum_net.hpp	34;"	d
TORRENT_ERROR_CODE_HPP_INCLUDED	libtorrent/include/libtorrent/error_code.hpp	34;"	d
TORRENT_ERROR_HPP_INCLUDED	libtorrent/include/libtorrent/error.hpp	34;"	d
TORRENT_ESCAPE_STRING_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/escape_string.hpp	34;"	d
TORRENT_ETHERNET_MTU	libtorrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_ETHERNET_MTU = 1500;$/;"	m	namespace:libtorrent
TORRENT_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	71;"	d
TORRENT_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	73;"	d
TORRENT_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	87;"	d
TORRENT_EXPORT_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/export.hpp	34;"	d
TORRENT_EXTENSIONS_HPP_INCLUDED	libtorrent/include/libtorrent/extensions.hpp	34;"	d
TORRENT_EXTRA_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	80;"	d
TORRENT_EXTRA_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	82;"	d
TORRENT_EXTRA_EXPORT	libtorrent/include/libtorrent/aux_/export.hpp	91;"	d
TORRENT_FFS_HPP_INCLUDE	libtorrent/include/libtorrent/aux_/ffs.hpp	34;"	d
TORRENT_FILE_HPP_INCLUDED	libtorrent/include/libtorrent/file.hpp	34;"	d
TORRENT_FILE_POOL_HPP	libtorrent/include/libtorrent/file_pool.hpp	34;"	d
TORRENT_FILE_PROGRESS_HPP_INCLUDE	libtorrent/include/libtorrent/aux_/file_progress.hpp	34;"	d
TORRENT_FILE_STORAGE_HPP_INCLUDED	libtorrent/include/libtorrent/file_storage.hpp	34;"	d
TORRENT_FINGERPRINT_HPP_INCLUDED	libtorrent/include/libtorrent/fingerprint.hpp	34;"	d
TORRENT_FLAGS_HPP_INCLUDED	libtorrent/include/libtorrent/flags.hpp	34;"	d
TORRENT_FORMAT	libtorrent/include/libtorrent/config.hpp	327;"	d
TORRENT_FORMAT	libtorrent/include/libtorrent/config.hpp	329;"	d
TORRENT_FWD_HPP	libtorrent/include/libtorrent/fwd.hpp	34;"	d
TORRENT_GENERATE_PEER_ID_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/generate_peer_id.hpp	34;"	d
TORRENT_GZIP_HPP_INCLUDED	libtorrent/include/libtorrent/gzip.hpp	34;"	d
TORRENT_HASHER512_HPP_INCLUDED	libtorrent/include/libtorrent/hasher512.hpp	34;"	d
TORRENT_HASHER_HPP_INCLUDED	libtorrent/include/libtorrent/hasher.hpp	34;"	d
TORRENT_HAS_ARM	libtorrent/include/libtorrent/config.hpp	528;"	d
TORRENT_HAS_ARM	libtorrent/include/libtorrent/config.hpp	530;"	d
TORRENT_HAS_ARM_CRC32	libtorrent/include/libtorrent/config.hpp	564;"	d
TORRENT_HAS_ARM_CRC32	libtorrent/include/libtorrent/config.hpp	567;"	d
TORRENT_HAS_ARM_CRC32	libtorrent/include/libtorrent/config.hpp	569;"	d
TORRENT_HAS_ARM_NEON	libtorrent/include/libtorrent/config.hpp	558;"	d
TORRENT_HAS_ARM_NEON	libtorrent/include/libtorrent/config.hpp	560;"	d
TORRENT_HAS_BINDTODEVICE	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	70;"	d
TORRENT_HAS_BLOCK_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/has_block.hpp	34;"	d
TORRENT_HAS_BUILTIN_CLZ	libtorrent/include/libtorrent/config.hpp	538;"	d
TORRENT_HAS_BUILTIN_CLZ	libtorrent/include/libtorrent/config.hpp	540;"	d
TORRENT_HAS_BUILTIN_CLZ	libtorrent/include/libtorrent/config.hpp	542;"	d
TORRENT_HAS_BUILTIN_CLZ	libtorrent/include/libtorrent/config.hpp	544;"	d
TORRENT_HAS_BUILTIN_CTZ	libtorrent/include/libtorrent/config.hpp	548;"	d
TORRENT_HAS_BUILTIN_CTZ	libtorrent/include/libtorrent/config.hpp	550;"	d
TORRENT_HAS_BUILTIN_CTZ	libtorrent/include/libtorrent/config.hpp	552;"	d
TORRENT_HAS_BUILTIN_CTZ	libtorrent/include/libtorrent/config.hpp	554;"	d
TORRENT_HAS_DONT_FRAGMENT	libtorrent/include/libtorrent/socket.hpp	179;"	d
TORRENT_HAS_FALLOCATE	libtorrent/include/libtorrent/config.hpp	145;"	d
TORRENT_HAS_FALLOCATE	libtorrent/include/libtorrent/config.hpp	175;"	d
TORRENT_HAS_FALLOCATE	libtorrent/include/libtorrent/config.hpp	181;"	d
TORRENT_HAS_FALLOCATE	libtorrent/include/libtorrent/config.hpp	183;"	d
TORRENT_HAS_FALLOCATE	libtorrent/include/libtorrent/config.hpp	266;"	d
TORRENT_HAS_FALLOCATE	libtorrent/include/libtorrent/config.hpp	292;"	d
TORRENT_HAS_FALLOCATE	libtorrent/include/libtorrent/config.hpp	307;"	d
TORRENT_HAS_FALLOCATE	libtorrent/include/libtorrent/config.hpp	374;"	d
TORRENT_HAS_KEEPALIVE_IDLE	libtorrent/include/libtorrent/aux_/keepalive.hpp	46;"	d
TORRENT_HAS_KEEPALIVE_INTERVAL	libtorrent/include/libtorrent/aux_/keepalive.hpp	80;"	d
TORRENT_HAS_SALEN	libtorrent/include/libtorrent/config.hpp	169;"	d
TORRENT_HAS_SALEN	libtorrent/include/libtorrent/config.hpp	204;"	d
TORRENT_HAS_SALEN	libtorrent/include/libtorrent/config.hpp	259;"	d
TORRENT_HAS_SALEN	libtorrent/include/libtorrent/config.hpp	284;"	d
TORRENT_HAS_SALEN	libtorrent/include/libtorrent/config.hpp	342;"	d
TORRENT_HAS_SSE	libtorrent/include/libtorrent/config.hpp	520;"	d
TORRENT_HAS_SSE	libtorrent/include/libtorrent/config.hpp	522;"	d
TORRENT_HAS_SYMLINK	libtorrent/include/libtorrent/config.hpp	141;"	d
TORRENT_HAS_SYMLINK	libtorrent/include/libtorrent/config.hpp	164;"	d
TORRENT_HAS_SYMLINK	libtorrent/include/libtorrent/config.hpp	286;"	d
TORRENT_HAS_SYMLINK	libtorrent/include/libtorrent/config.hpp	302;"	d
TORRENT_HAS_SYMLINK	libtorrent/include/libtorrent/config.hpp	478;"	d
TORRENT_HAVE_MMAP	libtorrent/include/libtorrent/config.hpp	143;"	d
TORRENT_HAVE_MMAP	libtorrent/include/libtorrent/config.hpp	165;"	d
TORRENT_HAVE_MMAP	libtorrent/include/libtorrent/config.hpp	285;"	d
TORRENT_HAVE_MMAP	libtorrent/include/libtorrent/config.hpp	402;"	d
TORRENT_HETEROGENEOUS_QUEUE_HPP_INCLUDED	libtorrent/include/libtorrent/heterogeneous_queue.hpp	34;"	d
TORRENT_HEX_HPP_INCLUDED	libtorrent/include/libtorrent/hex.hpp	34;"	d
TORRENT_HTTP_CONNECTION	libtorrent/include/libtorrent/http_connection.hpp	34;"	d
TORRENT_HTTP_PARSER_HPP_INCLUDED	libtorrent/include/libtorrent/http_parser.hpp	34;"	d
TORRENT_HTTP_SEED_CONNECTION_HPP_INCLUDED	libtorrent/include/libtorrent/http_seed_connection.hpp	34;"	d
TORRENT_HTTP_STREAM_HPP_INCLUDED	libtorrent/include/libtorrent/http_stream.hpp	34;"	d
TORRENT_HTTP_TRACKER_CONNECTION_HPP_INCLUDED	libtorrent/include/libtorrent/http_tracker_connection.hpp	34;"	d
TORRENT_HURD	libtorrent/include/libtorrent/config.hpp	299;"	d
TORRENT_I2P_STREAM_HPP_INCLUDED	libtorrent/include/libtorrent/i2p_stream.hpp	34;"	d
TORRENT_IDENTIFY_CLIENT_HPP_INCLUDED	libtorrent/include/libtorrent/identify_client.hpp	34;"	d
TORRENT_INCREMENT	libtorrent/include/libtorrent/debug.hpp	223;"	d
TORRENT_INCREMENT	libtorrent/include/libtorrent/debug.hpp	225;"	d
TORRENT_INDEX_RANGE_HPP	libtorrent/include/libtorrent/index_range.hpp	34;"	d
TORRENT_INET_MIN_MTU	libtorrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_INET_MIN_MTU = 576;$/;"	m	namespace:libtorrent
TORRENT_INSTANTIATE_CONNECTION	libtorrent/include/libtorrent/aux_/instantiate_connection.hpp	34;"	d
TORRENT_INVARIANT_ACCESS_HPP_INCLUDED	libtorrent/include/libtorrent/invariant_check.hpp	6;"	d
TORRENT_IO_HPP_INCLUDED	libtorrent/include/libtorrent/io.hpp	34;"	d
TORRENT_IO_SERVICE_FWD_HPP_INCLUDED	libtorrent/include/libtorrent/io_service_fwd.hpp	34;"	d
TORRENT_IO_SERVICE_HPP_INCLUDED	libtorrent/include/libtorrent/io_service.hpp	34;"	d
TORRENT_IPV4_HEADER	libtorrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_IPV4_HEADER = 20;$/;"	m	namespace:libtorrent
TORRENT_IPV6_HEADER	libtorrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_IPV6_HEADER = 40;$/;"	m	namespace:libtorrent
TORRENT_IP_FILTER_HPP	libtorrent/include/libtorrent/ip_filter.hpp	34;"	d
TORRENT_IP_NOTIFIER_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/ip_notifier.hpp	34;"	d
TORRENT_IP_VOTER_HPP_INCLUDED	libtorrent/include/libtorrent/ip_voter.hpp	34;"	d
TORRENT_KADEMLIA_MSG_HPP	libtorrent/include/libtorrent/kademlia/msg.hpp	34;"	d
TORRENT_KEEP_ALIVE_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/keepalive.hpp	34;"	d
TORRENT_LAZY_ENTRY_HPP_INCLUDED	libtorrent/include/libtorrent/lazy_entry.hpp	34;"	d
TORRENT_LINKED_LIST_HPP	libtorrent/include/libtorrent/linked_list.hpp	34;"	d
TORRENT_LINK_HPP_INCLUDED	libtorrent/include/libtorrent/link.hpp	34;"	d
TORRENT_LINUX	libtorrent/include/libtorrent/config.hpp	154;"	d
TORRENT_LISTEN_SOCKET_HANDLE_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	34;"	d
TORRENT_LSD_HPP	libtorrent/include/libtorrent/lsd.hpp	34;"	d
TORRENT_MACOS_DEPRECATED_LIBCRYPTO	libtorrent/include/libtorrent/aux_/openssl.hpp	47;"	d
TORRENT_MAGNET_URI_HPP_INCLUDED	libtorrent/include/libtorrent/magnet_uri.hpp	34;"	d
TORRENT_MERKLE_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/merkle.hpp	34;"	d
TORRENT_MINGW	libtorrent/include/libtorrent/config.hpp	195;"	d
TORRENT_NATPMP_HPP	libtorrent/include/libtorrent/natpmp.hpp	34;"	d
TORRENT_NETLINK_HPP	libtorrent/include/libtorrent/netlink.hpp	34;"	d
TORRENT_NOEXCEPT_MOVABLE_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/noexcept_movable.hpp	33;"	d
TORRENT_NO_FPU	libtorrent/include/libtorrent/config.hpp	100;"	d
TORRENT_NO_FPU	libtorrent/include/libtorrent/config.hpp	436;"	d
TORRENT_NUMERIC_CAST_HPP	libtorrent/include/libtorrent/aux_/numeric_cast.hpp	34;"	d
TORRENT_OPENSSL_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/openssl.hpp	34;"	d
TORRENT_OPERATIONS_HPP_INCLUDED	libtorrent/include/libtorrent/operations.hpp	34;"	d
TORRENT_OPTIONAL_HPP_INCLUDED	libtorrent/include/libtorrent/optional.hpp	35;"	d
TORRENT_OS2	libtorrent/include/libtorrent/config.hpp	306;"	d
TORRENT_PACKET_BUFFER_HPP_INCLUDED	libtorrent/include/libtorrent/packet_buffer.hpp	34;"	d
TORRENT_PACKET_POOL_HPP	libtorrent/include/libtorrent/packet_pool.hpp	34;"	d
TORRENT_PARSE_URL_HPP_INCLUDED	libtorrent/include/libtorrent/parse_url.hpp	34;"	d
TORRENT_PART_FILE_HPP_INCLUDE	libtorrent/include/libtorrent/part_file.hpp	34;"	d
TORRENT_PATH_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/path.hpp	34;"	d
TORRENT_PEER_ALLOCATOR_HPP_INCLUDED	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	34;"	d
TORRENT_PEER_CLASS_HPP_INCLUDED	libtorrent/include/libtorrent/peer_class.hpp	34;"	d
TORRENT_PEER_CLASS_SET_HPP_INCLUDED	libtorrent/include/libtorrent/peer_class_set.hpp	34;"	d
TORRENT_PEER_CLASS_TYPE_FILTER_HPP_INCLUDED	libtorrent/include/libtorrent/peer_class_type_filter.hpp	34;"	d
TORRENT_PEER_CONNECTION_HANDLE_HPP_INCLUDED	libtorrent/include/libtorrent/peer_connection_handle.hpp	34;"	d
TORRENT_PEER_CONNECTION_HPP_INCLUDED	libtorrent/include/libtorrent/peer_connection.hpp	34;"	d
TORRENT_PEER_CONNECTION_INTERFACE_HPP	libtorrent/include/libtorrent/peer_connection_interface.hpp	34;"	d
TORRENT_PEER_HPP_INCLUDED	libtorrent/include/libtorrent/peer.hpp	34;"	d
TORRENT_PEER_ID_HPP_INCLUDED	libtorrent/include/libtorrent/peer_id.hpp	34;"	d
TORRENT_PEER_INFO_HPP_INCLUDED	libtorrent/include/libtorrent/peer_info.hpp	34;"	d
TORRENT_PEER_REQUEST_HPP_INCLUDED	libtorrent/include/libtorrent/peer_request.hpp	34;"	d
TORRENT_PERFORMANCE_COUNTERS_HPP_INCLUDED	libtorrent/include/libtorrent/performance_counters.hpp	34;"	d
TORRENT_PEX_FLAGS_HPP_INCLUDE	libtorrent/include/libtorrent/pex_flags.hpp	34;"	d
TORRENT_PE_CRYPTO_HPP_INCLUDED	libtorrent/include/libtorrent/pe_crypto.hpp	34;"	d
TORRENT_PIECE_BLOCK_HPP_INCLUDED	libtorrent/include/libtorrent/piece_block.hpp	34;"	d
TORRENT_PIECE_BLOCK_PROGRESS_HPP_INCLUDED	libtorrent/include/libtorrent/piece_block_progress.hpp	34;"	d
TORRENT_PIECE_PICKER_HPP_INCLUDED	libtorrent/include/libtorrent/piece_picker.hpp	33;"	d
TORRENT_PLATFORM_UTIL_HPP	libtorrent/include/libtorrent/platform_util.hpp	2;"	d
TORRENT_POLICY_HPP_INCLUDED	libtorrent/include/libtorrent/peer_list.hpp	34;"	d
TORRENT_PORTMAP_HPP_INCLUDED	libtorrent/include/libtorrent/portmap.hpp	34;"	d
TORRENT_PROXY_BASE_HPP_INCLUDED	libtorrent/include/libtorrent/proxy_base.hpp	34;"	d
TORRENT_PROXY_SETTINGS_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	34;"	d
TORRENT_PUT_DATA_HPP	libtorrent/include/libtorrent/kademlia/put_data.hpp	34;"	d
TORRENT_RANDOM_HPP_INCLUDED	libtorrent/include/libtorrent/random.hpp	34;"	d
TORRENT_RANGE_HPP	libtorrent/include/libtorrent/aux_/range.hpp	34;"	d
TORRENT_READ_HANDLER_MAX_SIZE	libtorrent/include/libtorrent/config.hpp	/^constexpr std::size_t TORRENT_READ_HANDLER_MAX_SIZE = 342;$/;"	v
TORRENT_READ_HANDLER_MAX_SIZE	libtorrent/include/libtorrent/config.hpp	/^constexpr std::size_t TORRENT_READ_HANDLER_MAX_SIZE = 432;$/;"	v
TORRENT_READ_RESUME_DATA_HPP_INCLUDE	libtorrent/include/libtorrent/read_resume_data.hpp	34;"	d
TORRENT_RECEIVE_BUFFER_HPP_INCLUDED	libtorrent/include/libtorrent/receive_buffer.hpp	34;"	d
TORRENT_REQUEST_BLOCKS_HPP_INCLUDED	libtorrent/include/libtorrent/request_blocks.hpp	34;"	d
TORRENT_RESOLVER_HPP_INCLUDE	libtorrent/include/libtorrent/resolver.hpp	34;"	d
TORRENT_RESOLVER_INTERFACE_HPP_INCLUDE	libtorrent/include/libtorrent/resolver_interface.hpp	34;"	d
TORRENT_RESOLVE_LINKS_HPP	libtorrent/include/libtorrent/resolve_links.hpp	34;"	d
TORRENT_SAMPLE_INFOHASHES_HPP	libtorrent/include/libtorrent/kademlia/sample_infohashes.hpp	34;"	d
TORRENT_SCOPE_END_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/scope_end.hpp	34;"	d
TORRENT_SEPARATOR	src/client_test.cpp	260;"	d	file:
TORRENT_SEPARATOR	src/test.cpp	35;"	d	file:
TORRENT_SEPARATOR	src/torrent.cpp	58;"	d	file:
TORRENT_SESSION_CALL_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/session_call.hpp	34;"	d
TORRENT_SESSION_HANDLE_HPP_INCLUDED	libtorrent/include/libtorrent/session_handle.hpp	34;"	d
TORRENT_SESSION_HPP_INCLUDED	libtorrent/include/libtorrent/session.hpp	34;"	d
TORRENT_SESSION_IMPL_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/session_impl.hpp	34;"	d
TORRENT_SESSION_INTERFACE_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/session_interface.hpp	34;"	d
TORRENT_SESSION_SETTINGS_HPP_INCLUDED	libtorrent/include/libtorrent/session_settings.hpp	34;"	d
TORRENT_SESSION_STATS_HPP_INCLUDED	libtorrent/include/libtorrent/session_stats.hpp	34;"	d
TORRENT_SESSION_STATUS_HPP_INCLUDED	libtorrent/include/libtorrent/session_status.hpp	34;"	d
TORRENT_SESSION_TYPES_HPP_INCLUDED	libtorrent/include/libtorrent/session_types.hpp	34;"	d
TORRENT_SESSION_UDP_SOCKETS_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	34;"	d
TORRENT_SETTINGS_PACK_HPP_INCLUDED	libtorrent/include/libtorrent/settings_pack.hpp	34;"	d
TORRENT_SET_SOCKET_BUFFER_HPP	libtorrent/include/libtorrent/aux_/set_socket_buffer.hpp	34;"	d
TORRENT_SHA1_HASH_HPP_INCLUDED	libtorrent/include/libtorrent/sha1_hash.hpp	34;"	d
TORRENT_SHA1_HPP_INCLUDED	libtorrent/include/libtorrent/sha1.hpp	14;"	d
TORRENT_SHA512_HPP_INCLUDED	libtorrent/include/libtorrent/sha512.hpp	2;"	d
TORRENT_SLIDING_AVERAGE_HPP_INCLUDED	libtorrent/include/libtorrent/sliding_average.hpp	34;"	d
TORRENT_SMART_BAN_HPP_INCLUDED	libtorrent/include/libtorrent/extensions/smart_ban.hpp	34;"	d
TORRENT_SOCKET_HPP_INCLUDED	libtorrent/include/libtorrent/socket.hpp	34;"	d
TORRENT_SOCKET_IO_HPP_INCLUDED	libtorrent/include/libtorrent/socket_io.hpp	34;"	d
TORRENT_SOCKET_TYPE	libtorrent/include/libtorrent/aux_/socket_type.hpp	34;"	d
TORRENT_SOCKS5_HEADER	libtorrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_SOCKS5_HEADER = 6; \/\/ plus the size of the destination address$/;"	m	namespace:libtorrent
TORRENT_SOCKS5_STREAM_HPP_INCLUDED	libtorrent/include/libtorrent/socks5_stream.hpp	34;"	d
TORRENT_SOCKTYPE_FORWARD	libtorrent/include/libtorrent/aux_/socket_type.hpp	102;"	d
TORRENT_SOCKTYPE_FORWARD_RET	libtorrent/include/libtorrent/aux_/socket_type.hpp	117;"	d
TORRENT_SOCKTYPE_I2P_FORWARD	libtorrent/include/libtorrent/aux_/socket_type.hpp	58;"	d
TORRENT_SOCKTYPE_I2P_FORWARD	libtorrent/include/libtorrent/aux_/socket_type.hpp	68;"	d
TORRENT_SOCKTYPE_I2P_FORWARD_RET	libtorrent/include/libtorrent/aux_/socket_type.hpp	62;"	d
TORRENT_SOCKTYPE_I2P_FORWARD_RET	libtorrent/include/libtorrent/aux_/socket_type.hpp	69;"	d
TORRENT_SOCKTYPE_SSL_FORWARD	libtorrent/include/libtorrent/aux_/socket_type.hpp	75;"	d
TORRENT_SOCKTYPE_SSL_FORWARD	libtorrent/include/libtorrent/aux_/socket_type.hpp	97;"	d
TORRENT_SOCKTYPE_SSL_FORWARD_RET	libtorrent/include/libtorrent/aux_/socket_type.hpp	85;"	d
TORRENT_SOCKTYPE_SSL_FORWARD_RET	libtorrent/include/libtorrent/aux_/socket_type.hpp	98;"	d
TORRENT_SOLARIS	libtorrent/include/libtorrent/config.hpp	282;"	d
TORRENT_SPAN_HPP_INCLUDED	libtorrent/include/libtorrent/span.hpp	34;"	d
TORRENT_SSL_STREAM_HPP_INCLUDED	libtorrent/include/libtorrent/ssl_stream.hpp	34;"	d
TORRENT_STACK_ALLOCATOR	libtorrent/include/libtorrent/stack_allocator.hpp	34;"	d
TORRENT_STAT_CACHE_HPP	libtorrent/include/libtorrent/stat_cache.hpp	34;"	d
TORRENT_STAT_HPP_INCLUDED	libtorrent/include/libtorrent/stat.hpp	34;"	d
TORRENT_STORAGE_DEFS_HPP_INCLUDE	libtorrent/include/libtorrent/storage_defs.hpp	34;"	d
TORRENT_STORAGE_HPP_INCLUDE	libtorrent/include/libtorrent/storage.hpp	34;"	d
TORRENT_STORAGE_PIECE_SET_HPP_INCLUDE	libtorrent/include/libtorrent/aux_/storage_piece_set.hpp	34;"	d
TORRENT_STORAGE_UTILS_HPP_INCLUDE	libtorrent/include/libtorrent/aux_/storage_utils.hpp	34;"	d
TORRENT_STRING_PTR_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/string_ptr.hpp	34;"	d
TORRENT_STRING_UTIL_HPP_INCLUDED	libtorrent/include/libtorrent/string_util.hpp	34;"	d
TORRENT_STRING_VIEW_HPP_INCLUDED	libtorrent/include/libtorrent/string_view.hpp	34;"	d
TORRENT_SUGGEST_PIECE_HPP_INCLUDE	libtorrent/include/libtorrent/aux_/suggest_piece.hpp	34;"	d
TORRENT_TAILQUEUE_HPP	libtorrent/include/libtorrent/tailqueue.hpp	34;"	d
TORRENT_TEREDO_MTU	libtorrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_TEREDO_MTU = 1280;$/;"	m	namespace:libtorrent
TORRENT_THROW_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/throw.hpp	34;"	d
TORRENT_TIME_HPP_INCLUDED	libtorrent/include/libtorrent/time.hpp	34;"	d
TORRENT_TORRENT_FLAGS_HPP	libtorrent/include/libtorrent/torrent_flags.hpp	34;"	d
TORRENT_TORRENT_HANDLE_HPP_INCLUDED	libtorrent/include/libtorrent/torrent_handle.hpp	34;"	d
TORRENT_TORRENT_HPP_INCLUDE	libtorrent/include/libtorrent/torrent.hpp	34;"	d
TORRENT_TORRENT_IMPL_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/torrent_impl.hpp	34;"	d
TORRENT_TORRENT_INFO_HPP_INCLUDED	libtorrent/include/libtorrent/torrent_info.hpp	34;"	d
TORRENT_TORRENT_PEER_HPP_INCLUDED	libtorrent/include/libtorrent/torrent_peer.hpp	34;"	d
TORRENT_TORRENT_STATUS_HPP_INCLUDED	libtorrent/include/libtorrent/torrent_status.hpp	34;"	d
TORRENT_TRACKER_MANAGER_HPP_INCLUDED	libtorrent/include/libtorrent/tracker_manager.hpp	34;"	d
TORRENT_TRY	libtorrent/include/libtorrent/config.hpp	498;"	d
TORRENT_TRY	libtorrent/include/libtorrent/config.hpp	503;"	d
TORRENT_UDP_HEADER	libtorrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_UDP_HEADER = 8;$/;"	m	namespace:libtorrent
TORRENT_UDP_SOCKET_HPP_INCLUDED	libtorrent/include/libtorrent/udp_socket.hpp	34;"	d
TORRENT_UDP_TRACKER_CONNECTION_HPP_INCLUDED	libtorrent/include/libtorrent/udp_tracker_connection.hpp	34;"	d
TORRENT_UNION_ENDPOINT_HPP_INCLUDED	libtorrent/include/libtorrent/union_endpoint.hpp	34;"	d
TORRENT_UNIQUE_PTR_HPP	libtorrent/include/libtorrent/aux_/unique_ptr.hpp	34;"	d
TORRENT_UNITS_HPP	libtorrent/include/libtorrent/units.hpp	34;"	d
TORRENT_UNUSED	libtorrent/include/libtorrent/config.hpp	324;"	d
TORRENT_UPNP_HPP	libtorrent/include/libtorrent/upnp.hpp	34;"	d
TORRENT_USE_ASSERTS	libtorrent/include/libtorrent/config.hpp	485;"	d
TORRENT_USE_COMMONCRYPTO	libtorrent/include/libtorrent/config.hpp	125;"	d
TORRENT_USE_COMMONCRYPTO	libtorrent/include/libtorrent/config.hpp	378;"	d
TORRENT_USE_CRYPTOAPI	libtorrent/include/libtorrent/config.hpp	217;"	d
TORRENT_USE_CRYPTOAPI	libtorrent/include/libtorrent/config.hpp	244;"	d
TORRENT_USE_CRYPTOAPI	libtorrent/include/libtorrent/config.hpp	390;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	libtorrent/include/libtorrent/config.hpp	221;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	libtorrent/include/libtorrent/config.hpp	225;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	libtorrent/include/libtorrent/config.hpp	248;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	libtorrent/include/libtorrent/config.hpp	252;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	libtorrent/include/libtorrent/config.hpp	394;"	d
TORRENT_USE_DEV_RANDOM	libtorrent/include/libtorrent/config.hpp	142;"	d
TORRENT_USE_DEV_RANDOM	libtorrent/include/libtorrent/config.hpp	398;"	d
TORRENT_USE_EXECINFO	libtorrent/include/libtorrent/config.hpp	131;"	d
TORRENT_USE_EXECINFO	libtorrent/include/libtorrent/config.hpp	190;"	d
TORRENT_USE_EXECINFO	libtorrent/include/libtorrent/config.hpp	354;"	d
TORRENT_USE_FDATASYNC	libtorrent/include/libtorrent/config.hpp	170;"	d
TORRENT_USE_FDATASYNC	libtorrent/include/libtorrent/config.hpp	410;"	d
TORRENT_USE_GETADAPTERSADDRESSES	libtorrent/include/libtorrent/config.hpp	203;"	d
TORRENT_USE_GETADAPTERSADDRESSES	libtorrent/include/libtorrent/config.hpp	258;"	d
TORRENT_USE_GETADAPTERSADDRESSES	libtorrent/include/libtorrent/config.hpp	346;"	d
TORRENT_USE_GETIPFORWARDTABLE	libtorrent/include/libtorrent/config.hpp	205;"	d
TORRENT_USE_GETIPFORWARDTABLE	libtorrent/include/libtorrent/config.hpp	234;"	d
TORRENT_USE_GETIPFORWARDTABLE	libtorrent/include/libtorrent/config.hpp	362;"	d
TORRENT_USE_I2P	libtorrent/include/libtorrent/config.hpp	101;"	d
TORRENT_USE_I2P	libtorrent/include/libtorrent/config.hpp	448;"	d
TORRENT_USE_ICONV	libtorrent/include/libtorrent/config.hpp	103;"	d
TORRENT_USE_ICONV	libtorrent/include/libtorrent/config.hpp	116;"	d
TORRENT_USE_ICONV	libtorrent/include/libtorrent/config.hpp	176;"	d
TORRENT_USE_ICONV	libtorrent/include/libtorrent/config.hpp	198;"	d
TORRENT_USE_ICONV	libtorrent/include/libtorrent/config.hpp	262;"	d
TORRENT_USE_ICONV	libtorrent/include/libtorrent/config.hpp	294;"	d
TORRENT_USE_ICONV	libtorrent/include/libtorrent/config.hpp	338;"	d
TORRENT_USE_IFADDRS	libtorrent/include/libtorrent/config.hpp	147;"	d
TORRENT_USE_IFADDRS	libtorrent/include/libtorrent/config.hpp	167;"	d
TORRENT_USE_IFADDRS	libtorrent/include/libtorrent/config.hpp	300;"	d
TORRENT_USE_IFADDRS	libtorrent/include/libtorrent/config.hpp	422;"	d
TORRENT_USE_IFCONF	libtorrent/include/libtorrent/config.hpp	149;"	d
TORRENT_USE_IFCONF	libtorrent/include/libtorrent/config.hpp	168;"	d
TORRENT_USE_IFCONF	libtorrent/include/libtorrent/config.hpp	283;"	d
TORRENT_USE_IFCONF	libtorrent/include/libtorrent/config.hpp	301;"	d
TORRENT_USE_IFCONF	libtorrent/include/libtorrent/config.hpp	308;"	d
TORRENT_USE_INVARIANT_CHECKS	libtorrent/include/libtorrent/config.hpp	489;"	d
TORRENT_USE_IOSTREAM	libtorrent/include/libtorrent/config.hpp	441;"	d
TORRENT_USE_IOSTREAM	libtorrent/include/libtorrent/config.hpp	443;"	d
TORRENT_USE_IOSTREAM	libtorrent/include/libtorrent/config.hpp	97;"	d
TORRENT_USE_LOCALE	libtorrent/include/libtorrent/config.hpp	117;"	d
TORRENT_USE_LOCALE	libtorrent/include/libtorrent/config.hpp	199;"	d
TORRENT_USE_LOCALE	libtorrent/include/libtorrent/config.hpp	263;"	d
TORRENT_USE_LOCALE	libtorrent/include/libtorrent/config.hpp	366;"	d
TORRENT_USE_NETLINK	libtorrent/include/libtorrent/config.hpp	166;"	d
TORRENT_USE_NETLINK	libtorrent/include/libtorrent/config.hpp	202;"	d
TORRENT_USE_NETLINK	libtorrent/include/libtorrent/config.hpp	350;"	d
TORRENT_USE_PREAD	libtorrent/include/libtorrent/config.hpp	158;"	d
TORRENT_USE_PREAD	libtorrent/include/libtorrent/config.hpp	161;"	d
TORRENT_USE_PREAD	libtorrent/include/libtorrent/config.hpp	432;"	d
TORRENT_USE_PREADV	libtorrent/include/libtorrent/config.hpp	157;"	d
TORRENT_USE_PREADV	libtorrent/include/libtorrent/config.hpp	160;"	d
TORRENT_USE_PREADV	libtorrent/include/libtorrent/config.hpp	208;"	d
TORRENT_USE_PREADV	libtorrent/include/libtorrent/config.hpp	269;"	d
TORRENT_USE_PREADV	libtorrent/include/libtorrent/config.hpp	427;"	d
TORRENT_USE_PWRITEV	libtorrent/include/libtorrent/config.hpp	209;"	d
TORRENT_USE_PWRITEV	libtorrent/include/libtorrent/config.hpp	270;"	d
TORRENT_USE_READV	libtorrent/include/libtorrent/config.hpp	311;"	d
TORRENT_USE_RLIMIT	libtorrent/include/libtorrent/config.hpp	201;"	d
TORRENT_USE_RLIMIT	libtorrent/include/libtorrent/config.hpp	265;"	d
TORRENT_USE_RLIMIT	libtorrent/include/libtorrent/config.hpp	418;"	d
TORRENT_USE_SC_NETWORK_REACHABILITY	libtorrent/include/libtorrent/config.hpp	137;"	d
TORRENT_USE_SC_NETWORK_REACHABILITY	libtorrent/include/libtorrent/config.hpp	386;"	d
TORRENT_USE_SYSCTL	libtorrent/include/libtorrent/config.hpp	148;"	d
TORRENT_USE_SYSCTL	libtorrent/include/libtorrent/config.hpp	309;"	d
TORRENT_USE_SYSCTL	libtorrent/include/libtorrent/config.hpp	358;"	d
TORRENT_USE_SYSTEMCONFIGURATION	libtorrent/include/libtorrent/config.hpp	134;"	d
TORRENT_USE_SYSTEMCONFIGURATION	libtorrent/include/libtorrent/config.hpp	382;"	d
TORRENT_USE_UNC_PATHS	libtorrent/include/libtorrent/config.hpp	206;"	d
TORRENT_USE_UNC_PATHS	libtorrent/include/libtorrent/config.hpp	267;"	d
TORRENT_USE_UNC_PATHS	libtorrent/include/libtorrent/config.hpp	414;"	d
TORRENT_USE_WRITEV	libtorrent/include/libtorrent/config.hpp	310;"	d
TORRENT_UTF8_HPP_INCLUDED	libtorrent/include/libtorrent/utf8.hpp	34;"	d
TORRENT_UTP_HEADER	libtorrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_UTP_HEADER = 20;$/;"	m	namespace:libtorrent
TORRENT_UTP_LOG	libtorrent/include/libtorrent/utp_stream.hpp	55;"	d
TORRENT_UTP_SOCKET_MANAGER_HPP_INCLUDED	libtorrent/include/libtorrent/utp_socket_manager.hpp	34;"	d
TORRENT_UTP_STREAM_HPP_INCLUDED	libtorrent/include/libtorrent/utp_stream.hpp	34;"	d
TORRENT_UT_METADATA_HPP_INCLUDED	libtorrent/include/libtorrent/extensions/ut_metadata.hpp	34;"	d
TORRENT_UT_PEX_EXTENSION_HPP_INCLUDED	libtorrent/include/libtorrent/extensions/ut_pex.hpp	34;"	d
TORRENT_VECTOR_HPP	libtorrent/include/libtorrent/aux_/vector.hpp	34;"	d
TORRENT_VECTOR_UTILS_HPP_INCLUDE	libtorrent/include/libtorrent/vector_utils.hpp	34;"	d
TORRENT_VERBOSE_UTP_LOG	libtorrent/include/libtorrent/utp_stream.hpp	56;"	d
TORRENT_VERSION_HPP_INCLUDED	libtorrent/include/libtorrent/version.hpp	34;"	d
TORRENT_VERSION_NAMESPACE_2	libtorrent/include/libtorrent/aux_/export.hpp	49;"	d
TORRENT_VERSION_NAMESPACE_2	libtorrent/include/libtorrent/aux_/export.hpp	52;"	d
TORRENT_VERSION_NAMESPACE_2_END	libtorrent/include/libtorrent/aux_/export.hpp	50;"	d
TORRENT_VERSION_NAMESPACE_2_END	libtorrent/include/libtorrent/aux_/export.hpp	53;"	d
TORRENT_VIEW_HPP_	include/torrent_view.hpp	34;"	d
TORRENT_WEB_PEER_CONNECTION_HPP_INCLUDED	libtorrent/include/libtorrent/web_peer_connection.hpp	34;"	d
TORRENT_WHILE_0	libtorrent/include/libtorrent/assert.hpp	54;"	d
TORRENT_WINDOWS	libtorrent/include/libtorrent/config.hpp	196;"	d
TORRENT_WINDOWS	libtorrent/include/libtorrent/config.hpp	232;"	d
TORRENT_WINDOWS_HPP_INCLUDED	libtorrent/include/libtorrent/aux_/windows.hpp	34;"	d
TORRENT_WINRT	libtorrent/include/libtorrent/config.hpp	276;"	d
TORRENT_WIN_CRYPTO_PROVIDER_HPP	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	34;"	d
TORRENT_WIN_UTIL_HPP	libtorrent/include/libtorrent/aux_/win_util.hpp	34;"	d
TORRENT_WRITE_HANDLER_MAX_SIZE	libtorrent/include/libtorrent/config.hpp	/^constexpr std::size_t TORRENT_WRITE_HANDLER_MAX_SIZE = 342;$/;"	v
TORRENT_WRITE_HANDLER_MAX_SIZE	libtorrent/include/libtorrent/config.hpp	/^constexpr std::size_t TORRENT_WRITE_HANDLER_MAX_SIZE = 432;$/;"	v
TORRENT_WRITE_RESUME_DATA_HPP_INCLUDE	libtorrent/include/libtorrent/write_resume_data.hpp	34;"	d
TORRENT_XML_PARSE_HPP	libtorrent/include/libtorrent/xml_parse.hpp	34;"	d
TRAVERSAL_ALGORITHM_050324_HPP	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	34;"	d
Te0	src/ot_rijndael.c	/^static const uint32_t Te0[256] = {$/;"	v	file:
Te1	src/ot_rijndael.c	/^static const uint32_t Te1[256] = {$/;"	v	file:
Te2	src/ot_rijndael.c	/^static const uint32_t Te2[256] = {$/;"	v	file:
Te3	src/ot_rijndael.c	/^static const uint32_t Te3[256] = {$/;"	v	file:
Te4	src/ot_rijndael.c	/^static const uint32_t Te4[256] = {$/;"	v	file:
UINT16_H	libowfat/libowfat/uint16.h	3;"	d
UINT16_H	libowfat/uint16.h	3;"	d
UINT32_H	libowfat/libowfat/uint32.h	3;"	d
UINT32_H	libowfat/uint32.h	3;"	d
UINT64_H	libowfat/libowfat/uint64.h	3;"	d
UINT64_H	libowfat/uint64.h	3;"	d
UINT_OBJS	libowfat/GNUmakefile	/^UINT_OBJS=$(patsubst uint\/%.c,%.o,$(wildcard uint\/*.c))$/;"	m
UINT_OBJS	libowfat/Makefile	/^UINT_OBJS=uint16_pack.o uint16_pack_big.o uint16_read.o uint16_read_big.o uint16_unpack.o uint16_unpack_big.o uint32_pack.o uint32_pack_big.o uint32_read.o uint32_read_big.o uint32_unpack.o uint32_unpack_big.o uint64_pack.o uint64_pack_big.o uint64_read.o uint64_read_big.o uint64_unpack.o uint64_unpack_big.o $/;"	m
UNALIGNED_ACCESS_OK	libowfat/byte.h	47;"	d
UNALIGNED_ACCESS_OK	libowfat/libowfat/byte.h	47;"	d
UNDECIDED	libowfat/io_internal.h	/^  UNDECIDED,$/;"	e	enum:__io_waitmode
UNDECIDED	libowfat/test/proxy.c	/^  enum { UNDECIDED, FORA, FORB } dir;$/;"	e	enum:state::__anon43	file:
UNITTEST	libowfat/fmt/fmt_escapecharjson.c	4;"	d	file:
UNITTEST	libowfat/fmt/fmt_escapecharjson.c	6;"	d	file:
UNITTEST	libowfat/fmt/fmt_escapecharquotedprintable.c	4;"	d	file:
UNITTEST	libowfat/fmt/fmt_escapecharquotedprintable.c	6;"	d	file:
UNITTEST	libowfat/scan/scan_8long.c	4;"	d	file:
UNITTEST	libowfat/scan/scan_8long.c	6;"	d	file:
UNITTEST	libowfat/scan/scan_long.c	4;"	d	file:
UNITTEST	libowfat/scan/scan_long.c	6;"	d	file:
UNITTEST	libowfat/scan/scan_longlong.c	6;"	d	file:
UNITTEST	libowfat/scan/scan_longlong.c	8;"	d	file:
UNITTEST	libowfat/scan/scan_xint.c	4;"	d	file:
UNITTEST	libowfat/scan/scan_xint.c	6;"	d	file:
UNITTEST	libowfat/scan/scan_xlongn.c	4;"	d	file:
UNITTEST	libowfat/scan/scan_xlongn.c	6;"	d	file:
UNITTEST	libowfat/scan/scan_xshort.c	4;"	d	file:
UNITTEST	libowfat/scan/scan_xshort.c	6;"	d	file:
UNITTEST	libowfat/textcode/scan_cescape.c	80;"	d	file:
UNITTEST	libowfat/textcode/scan_hexdump.c	26;"	d	file:
UNITTEST	libowfat/textcode/scan_html.c	93;"	d	file:
UNITTEST	libowfat/textcode/scan_jsonescape.c	76;"	d	file:
UNITTEST	libowfat/textcode/scan_ldapescape.c	29;"	d	file:
UNITTEST	libowfat/textcode/scan_urlencoded.c	41;"	d	file:
UNIX_OBJS	libowfat/GNUmakefile	/^UNIX_OBJS=$(patsubst unix\/%.c,%.o,$(wildcard unix\/*.c))$/;"	m
UNIX_OBJS	libowfat/Makefile	/^UNIX_OBJS=iopause.o ndelay_off.o ndelay_on.o winsock2errno.o $/;"	m
UNI_MAX_BMP	libtorrent/include/libtorrent/ConvertUTF.h	96;"	d
UNI_MAX_LEGAL_UTF32	libtorrent/include/libtorrent/ConvertUTF.h	99;"	d
UNI_MAX_UTF16	libtorrent/include/libtorrent/ConvertUTF.h	97;"	d
UNI_MAX_UTF32	libtorrent/include/libtorrent/ConvertUTF.h	98;"	d
UNI_REPLACEMENT_CHAR	libtorrent/include/libtorrent/ConvertUTF.h	95;"	d
USE_BUILTINS	libowfat/CAS.h	13;"	d
USE_BUILTINS	libowfat/CAS.h	155;"	d
V4mappedprefix	libowfat/socket/socket_v4mappedprefix.c	/^const unsigned char V4mappedprefix[12]={0,0,0,0,0,0,0,0,0,0,0xff,0xff};$/;"	v
V6any	libowfat/socket/socket_v6any.c	/^const unsigned char V6any[16]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};$/;"	v
V6loopback	libowfat/socket/socket_v6loopback.c	/^const unsigned char V6loopback[16]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};$/;"	v
VC_EXTRALEAN	libtorrent/include/libtorrent/aux_/windows.hpp	40;"	d
VERSION	Makefile	/^VERSION = 1.1$/;"	m
VERSION	libowfat/GNUmakefile	/^VERSION=libowfat-$(shell head -n 1 CHANGES|sed 's\/:\/\/')$/;"	m
VERSION	libowfat/Makefile	/^VERSION=libowfat-0.32$/;"	m
VPATH	Makefile	/^VPATH = .:.\/include:.\/lib:.\/src:$/;"	m
VPATH	libowfat/GNUmakefile	/^VPATH=str:byte:fmt:scan:uint:open:stralloc:unix:socket:buffer:mmap:textcode:taia:tai:dns:case:array:mult:io:cdb:critbit$/;"	m
WANT_ACCESSLIST	include/ot_accesslist.h	14;"	d
WANT_COMPRESSION_GZIP_PARAM	src/ot_fullscrape.c	40;"	d	file:
WANT_COMPRESSION_GZIP_PARAM	src/ot_fullscrape.c	43;"	d	file:
WANT_SYNC	include/trackerlogic.h	141;"	d
WANT_SYNC_LIVE	src/proxy.c	36;"	d	file:
WANT_SYNC_PARAM	include/trackerlogic.h	145;"	d
WANT_SYNC_PARAM	include/trackerlogic.h	147;"	d
WARN	libowfat/GNUmakefile	/^WARN=-W -Wall -Wextra $(WERROR)$/;"	m
WARN	libowfat/Makefile	/^WARN=-W -Wall -Wextra $(WERROR)$/;"	m
WEB_CONNECTION_BASE_HPP_INCLUDED	libtorrent/include/libtorrent/web_connection_base.hpp	34;"	d
WERROR	libowfat/GNUmakefile	/^WERROR=$/;"	m
WERROR	libowfat/Makefile	/^WERROR=$/;"	m
WIN32_LEAN_AND_MEAN	libtorrent/include/libtorrent/aux_/windows.hpp	37;"	d
_ATFILE_SOURCE	libowfat/mmap/mmap_readat.c	2;"	d	file:
_FILE_OFFSET_BITS	libowfat/cdb/cdb.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/cdb/cdb_make.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/io/io_appendfile.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/io/io_createfile.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/io/io_readfile.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/io/io_readwritefile.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/io/io_sendfile.c	2;"	d	file:
_FILE_OFFSET_BITS	libowfat/open/open_append.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/open/open_excl.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/open/open_read.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/open/open_rw.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/open/open_trunc.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/open/open_write.c	1;"	d	file:
_FILE_OFFSET_BITS	libowfat/trysendfile.c	39;"	d	file:
_FILE_OFFSET_BITS	libowfat/trysendfile.c	62;"	d	file:
_FILE_OFFSET_BITS	libtorrent/include/libtorrent/aux_/path.hpp	56;"	d
_FILE_OFFSET_BITS	libtorrent/include/libtorrent/aux_/path.hpp	72;"	d
_FILE_OFFSET_BITS	libtorrent/include/libtorrent/config.hpp	40;"	d
_FILE_OFFSET_BITS	libtorrent/include/libtorrent/file.hpp	57;"	d
_FILE_OFFSET_BITS	libtorrent/include/libtorrent/file.hpp	73;"	d
_GNU_SOURCE	libowfat/io/io_fd.c	1;"	d	file:
_GNU_SOURCE	libowfat/io/io_waituntil2.c	6;"	d	file:
_GNU_SOURCE	libowfat/io_internal.h	17;"	d
_GNU_SOURCE	libowfat/scan/scan_httpdate.c	1;"	d	file:
_GNU_SOURCE	libowfat/scan/scan_iso8601.c	1;"	d	file:
_GNU_SOURCE	libowfat/trysigio.c	1;"	d	file:
_GNU_SOURCE	libtorrent/include/libtorrent/aux_/path.hpp	59;"	d
_GNU_SOURCE	libtorrent/include/libtorrent/file.hpp	60;"	d
_LARGEFILE64_SOURCE	libowfat/io/io_sendfile.c	32;"	d	file:
_LARGEFILE64_SOURCE	libowfat/io/io_sendfile.c	52;"	d	file:
_NETBSD_SOURCE	libowfat/io/io_passfd.c	11;"	d	file:
_NETBSD_SOURCE	libowfat/io/io_receivefd.c	11;"	d	file:
_NET_ROUTE_H_	libtorrent/include/libtorrent/aux_/route.h	65;"	d
_POSIX_C_SOURCE	libowfat/mmap/mmap_readat.c	1;"	d	file:
_SIGIO	libowfat/io_internal.h	/^  ,_SIGIO$/;"	e	enum:__io_waitmode
_VA_NARG_H	libowfat/libowfat/va_narg.h	3;"	d
_VA_NARG_H	libowfat/va_narg.h	3;"	d
_XOPEN_SOURCE	libowfat/io/io_passfd.c	14;"	d	file:
_XOPEN_SOURCE	libowfat/io/io_receivefd.c	14;"	d	file:
_XOPEN_SOURCE	libowfat/io/io_waituntil2.c	3;"	d	file:
_XOPEN_SOURCE	libtorrent/include/libtorrent/aux_/path.hpp	63;"	d
_XOPEN_SOURCE	libtorrent/include/libtorrent/file.hpp	64;"	d
_XOPEN_SOURCE_EXTENDED	libowfat/io/io_passfd.c	15;"	d	file:
_XOPEN_SOURCE_EXTENDED	libowfat/io/io_receivefd.c	15;"	d	file:
__BASE_H__	include/base.h	2;"	d
__BT_SERVER_H__	include/bt.h	2;"	d
__BT_SERVER_H__	include/client_test.h	2;"	d
__BYTE	src/ot_stats.c	69;"	d	file:
__CAS	libowfat/array/iarray_allocate.c	12;"	d	file:
__CAS	libowfat/io/io_fd.c	31;"	d	file:
__CLIENT_H__	include/client.h	2;"	d
__DEBUG__	include/base.h	38;"	d
__HALF_MAX_SIGNED	libowfat/libowfat/rangecheck.h	140;"	d
__HALF_MAX_SIGNED	libowfat/rangecheck.h	140;"	d
__LDR	src/ot_stats.c	73;"	d	file:
__LIBOWFAT_INTERNAL	libowfat/buffer/buffer_puts.c	1;"	d	file:
__LIBOWFAT_INTERNAL	libowfat/buffer/buffer_putsflush.c	1;"	d	file:
__MAX	libowfat/libowfat/rangecheck.h	146;"	d
__MAX	libowfat/rangecheck.h	146;"	d
__MAX_SIGNED	libowfat/libowfat/rangecheck.h	141;"	d
__MAX_SIGNED	libowfat/rangecheck.h	141;"	d
__MIN	libowfat/libowfat/rangecheck.h	145;"	d
__MIN	libowfat/rangecheck.h	145;"	d
__MIN_SIGNED	libowfat/libowfat/rangecheck.h	142;"	d
__MIN_SIGNED	libowfat/rangecheck.h	142;"	d
__MSK	src/ot_stats.c	70;"	d	file:
__PACKET_H__	include/packet.h	2;"	d
__SHFT	src/ot_stats.c	71;"	d	file:
__STR	src/ot_stats.c	74;"	d	file:
__TORRENT_H__	include/torrent.h	2;"	d
__X	libowfat/compiletimeassert.h	2;"	d
__X	libowfat/libowfat/compiletimeassert.h	2;"	d
__Y	libowfat/compiletimeassert.h	3;"	d
__Y	libowfat/libowfat/compiletimeassert.h	3;"	d
__builtin_expect	libowfat/libowfat/rangecheck.h	45;"	d
__builtin_expect	libowfat/rangecheck.h	45;"	d
__deprecated__	libowfat/scan/scan_httpdate.c	2;"	d	file:
__deprecated__	libowfat/scan/scan_iso8601.c	2;"	d	file:
__dietlibc__	libowfat/str/str_len.c	1;"	d	file:
__expect	libowfat/libowfat/rangecheck.h	46;"	d
__expect	libowfat/libowfat/rangecheck.h	48;"	d
__expect	libowfat/likely.h	6;"	d
__expect	libowfat/likely.h	8;"	d
__expect	libowfat/rangecheck.h	46;"	d
__expect	libowfat/rangecheck.h	48;"	d
__gnuinline	libowfat/libowfat/rangecheck.h	33;"	d
__gnuinline	libowfat/libowfat/rangecheck.h	35;"	d
__gnuinline	libowfat/rangecheck.h	33;"	d
__gnuinline	libowfat/rangecheck.h	35;"	d
__has_builtin	libtorrent/include/libtorrent/config.hpp	534;"	d
__io_waitmode	libowfat/io_internal.h	/^my_extern enum __io_waitmode {$/;"	g
__likely	libowfat/libowfat/rangecheck.h	52;"	d
__likely	libowfat/likely.h	10;"	d
__likely	libowfat/rangecheck.h	52;"	d
__pure__	libowfat/byte.h	13;"	d
__pure__	libowfat/critbit.h	12;"	d
__pure__	libowfat/fmt.h	19;"	d
__pure__	libowfat/libowfat/byte.h	13;"	d
__pure__	libowfat/libowfat/critbit.h	12;"	d
__pure__	libowfat/libowfat/fmt.h	19;"	d
__pure__	libowfat/libowfat/scan.h	19;"	d
__pure__	libowfat/libowfat/str.h	12;"	d
__pure__	libowfat/libowfat/stralloc.h	12;"	d
__pure__	libowfat/scan.h	19;"	d
__pure__	libowfat/str.h	12;"	d
__pure__	libowfat/stralloc.h	12;"	d
__static	libowfat/libowfat/rangecheck.h	166;"	d
__static	libowfat/libowfat/rangecheck.h	39;"	d
__static	libowfat/libowfat/rangecheck.h	41;"	d
__static	libowfat/rangecheck.h	166;"	d
__static	libowfat/rangecheck.h	39;"	d
__static	libowfat/rangecheck.h	41;"	d
__unlikely	libowfat/buffer/buffer_put.c	12;"	d	file:
__unlikely	libowfat/buffer/buffer_put.c	14;"	d	file:
__unlikely	libowfat/buffer/buffer_putflush.c	11;"	d	file:
__unlikely	libowfat/buffer/buffer_putflush.c	13;"	d	file:
__unlikely	libowfat/libowfat/rangecheck.h	53;"	d
__unlikely	libowfat/likely.h	11;"	d
__unlikely	libowfat/rangecheck.h	53;"	d
__winsock_init	libowfat/socket/init.c	/^void __winsock_init(void) {$/;"	f
__winsock_init	libowfat/windoze.h	18;"	d
__write1	libowfat/test/client.c	/^static inline __write1(const char* s) { write(1,s,str_len(s)); }$/;"	f	file:
__write1	libowfat/test/server.c	/^static inline __write1(const char* s) { write(1,s,str_len(s)); }$/;"	f	file:
__write2	libowfat/test/client.c	/^static inline __write2(const char* s) { write(2,s,str_len(s)); }$/;"	f	file:
__write2	libowfat/test/server.c	/^static inline __write2(const char* s) { write(2,s,str_len(s)); }$/;"	f	file:
_begin	libtorrent/include/libtorrent/aux_/range.hpp	/^		Iter _begin;$/;"	m	struct:libtorrent::aux::iterator_range
_begin	libtorrent/include/libtorrent/index_range.hpp	/^	Index _begin;$/;"	m	struct:libtorrent::index_range
_bit	libtorrent/include/libtorrent/flags.hpp	/^constexpr bit_t operator "" _bit(unsigned long long int b) { return bit_t{static_cast<int>(b)}; }$/;"	f	namespace:libtorrent
_end	libtorrent/include/libtorrent/aux_/range.hpp	/^		Iter _end;$/;"	m	struct:libtorrent::aux::iterator_range
_end	libtorrent/include/libtorrent/index_range.hpp	/^	Index _end;$/;"	m	struct:libtorrent::index_range
_iarray_page	libowfat/iarray.h	/^typedef struct _iarray_page {$/;"	s
_iarray_page	libowfat/libowfat/iarray.h	/^typedef struct _iarray_page {$/;"	s
_sv	libtorrent/include/libtorrent/string_view.hpp	/^	constexpr string_view operator "" _sv(char const* str, std::size_t len)$/;"	f	namespace:libtorrent::literals
a	libowfat/buffer.h	/^  size_t a;		\/* allocated buffer size *\/$/;"	m	struct:buffer
a	libowfat/libowfat/buffer.h	/^  size_t a;		\/* allocated buffer size *\/$/;"	m	struct:buffer
a	libowfat/libowfat/stralloc.h	/^  size_t a;$/;"	m	struct:stralloc
a	libowfat/stralloc.h	/^  size_t a;$/;"	m	struct:stralloc
a	libowfat/test/proxy.c	/^  int64 a,b;$/;"	m	struct:state	file:
a	libowfat/test/textcode.c	/^array a;$/;"	v
abort_on_shutdown	libtorrent/include/libtorrent/resolver_interface.hpp	/^	static constexpr resolver_flags abort_on_shutdown = 1_bit;$/;"	m	struct:libtorrent::resolver_interface
aborted	libtorrent/include/libtorrent/disk_io_job.hpp	/^		static constexpr disk_job_flags_t aborted = 6_bit;$/;"	m	struct:libtorrent::disk_io_job
aborted_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			aborted_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
accept	libtorrent/include/libtorrent/alert_types.hpp	/^			accept TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
accept_handshake	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void accept_handshake(error_code& ec)$/;"	f	class:libtorrent::ssl_stream
accept_incoming	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		static constexpr listen_socket_flags_t accept_incoming = 0_bit;$/;"	m	struct:libtorrent::aux::listen_socket_t
accepted	libtorrent/include/libtorrent/error_code.hpp	/^			accepted = 202,$/;"	e	enum:libtorrent::errors::http_errors
acceptqueued	libowfat/io_internal.h	/^  unsigned int acceptqueued:2;$/;"	m	struct:__anon40
access	libtorrent/include/libtorrent/ip_filter.hpp	/^			std::uint32_t access;$/;"	m	struct:libtorrent::detail::filter_impl::range
access	libtorrent/include/libtorrent/ip_filter.hpp	/^		std::uint32_t access(Addr const& addr) const$/;"	f	class:libtorrent::detail::filter_impl
access_flags	libtorrent/include/libtorrent/ip_filter.hpp	/^	enum access_flags$/;"	g	class:libtorrent::port_filter
access_flags	libtorrent/include/libtorrent/ip_filter.hpp	/^	enum access_flags$/;"	g	struct:libtorrent::ip_filter
accesslist_blessip	src/ot_accesslist.c	/^int accesslist_blessip( ot_ip6 ip, ot_permissions permissions ) {$/;"	f
accesslist_deinit	include/ot_accesslist.h	23;"	d
accesslist_deinit	src/ot_accesslist.c	/^void accesslist_deinit( void ) {$/;"	f
accesslist_hashisvalid	include/ot_accesslist.h	24;"	d
accesslist_hashisvalid	src/ot_accesslist.c	/^int accesslist_hashisvalid( ot_hash hash ) {$/;"	f
accesslist_init	include/ot_accesslist.h	22;"	d
accesslist_init	src/ot_accesslist.c	/^void accesslist_init( ) {$/;"	f
accesslist_isblessed	src/ot_accesslist.c	/^int accesslist_isblessed( ot_ip6 ip, ot_permissions permissions ) {$/;"	f
accesslist_readfile	src/ot_accesslist.c	/^static void accesslist_readfile( void ) {$/;"	f	file:
accesslist_worker	src/ot_accesslist.c	/^static void * accesslist_worker( void * args ) {$/;"	f	file:
ack_nr	libtorrent/include/libtorrent/utp_stream.hpp	/^	be_uint16 ack_nr;$/;"	m	struct:libtorrent::utp_header
acquire	libtorrent/include/libtorrent/packet_pool.hpp	/^		packet_ptr acquire(int const allocate)$/;"	f	struct:libtorrent::packet_pool
acquire_packet	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		packet_ptr acquire_packet(int const allocate) { return m_packet_pool.acquire(allocate); }$/;"	f	struct:libtorrent::utp_socket_manager
act	libtorrent/include/libtorrent/aux_/portmap.hpp	/^		portmap_action act = portmap_action::none;$/;"	m	struct:libtorrent::aux::base_mapping
action	libtorrent/include/libtorrent/disk_io_job.hpp	/^		job_action_t action = job_action_t::read;$/;"	m	struct:libtorrent::disk_io_job
action_failed	libtorrent/include/libtorrent/upnp.hpp	/^			action_failed = 501,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
action_t	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		enum class action_t : std::uint8_t$/;"	c	class:libtorrent::udp_tracker_connection
active_checking	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_checking,$/;"	e	enum:libtorrent::settings_pack::int_types
active_dht_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_dht_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
active_downloads	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_downloads,$/;"	e	enum:libtorrent::settings_pack::int_types
active_duration	libtorrent/include/libtorrent/torrent_status.hpp	/^		seconds active_duration;$/;"	m	struct:libtorrent::torrent_status
active_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
active_loaded_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_loaded_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
active_lsd_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_lsd_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
active_requests	libtorrent/include/libtorrent/session_status.hpp	/^		std::vector<dht_lookup> active_requests;$/;"	m	struct:libtorrent::session_status
active_seeds	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_seeds,$/;"	e	enum:libtorrent::settings_pack::int_types
active_time	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int active_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
active_time	libtorrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER active_time = 0;$/;"	m	struct:libtorrent::torrent_status
active_tracker_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			active_tracker_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
add	libtorrent/include/libtorrent/aux_/portmap.hpp	/^		none, add, del$/;"	m	class:libtorrent::aux::portmap_action
add	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		void add(socket_type_t const st, peer_class_t const peer_class)$/;"	f	namespace:libtorrent
add	libtorrent/include/libtorrent/stat.hpp	/^		void add(int count)$/;"	f	class:libtorrent::stat_channel
add_changeset_to_tracker	src/ot_sync.c	/^int add_changeset_to_tracker( uint8_t *data, size_t len ) {$/;"	f
add_default_plugins	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr session_flags_t add_default_plugins = 0_bit;$/;"	m	struct:libtorrent::session_handle
add_handshake	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void add_handshake(entry&) {}$/;"	f	struct:libtorrent::peer_plugin
add_magnet	src/client_test.cpp	/^void add_magnet(lt::session& ses, lt::string_view uri)$/;"	f
add_node	libtorrent/include/libtorrent/torrent_info.hpp	/^		void add_node(std::pair<std::string, int> const& node)$/;"	f	class:libtorrent::torrent_info
add_node_status_t	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	enum add_node_status_t {$/;"	g	class:libtorrent::dht::routing_table
add_of	libowfat/libowfat/rangecheck.h	153;"	d
add_of	libowfat/libowfat/rangecheck.h	160;"	d
add_of	libowfat/rangecheck.h	153;"	d
add_of	libowfat/rangecheck.h	160;"	d
add_outstanding_async	libtorrent/include/libtorrent/debug.hpp	/^	inline void add_outstanding_async(char const* name)$/;"	f	namespace:libtorrent
add_peer_to_torrent_and_return_peers	src/trackerlogic.c	/^size_t add_peer_to_torrent_and_return_peers( PROTO_FLAG proto, struct ot_workstruct *ws, size_t amount ) {$/;"	f
add_peer_to_torrent_proxy	src/proxy.c	/^size_t add_peer_to_torrent_proxy( ot_hash hash, ot_peer *peer ) {$/;"	f
add_piece	libtorrent/include/libtorrent/aux_/suggest_piece.hpp	/^	void add_piece(piece_index_t const index, int const availability$/;"	f	struct:libtorrent::aux::suggest_piece
add_rule	libtorrent/include/libtorrent/ip_filter.hpp	/^		void add_rule(Addr first, Addr last, std::uint32_t const flags)$/;"	f	class:libtorrent::detail::filter_impl
add_sample	libtorrent/include/libtorrent/sliding_average.hpp	/^	void add_sample(Int s)$/;"	f	struct:libtorrent::sliding_average
add_stat	libtorrent/include/libtorrent/stat.hpp	/^		void add_stat(std::int64_t downloaded, std::int64_t uploaded)$/;"	f	class:libtorrent::stat
add_suffix	include/print.hpp	/^template<class T> std::string add_suffix(T val, char const* suffix = nullptr) {$/;"	f
add_suffix_float	src/print.cpp	/^std::string add_suffix_float(double val, char const* suffix)$/;"	f
add_torrent	src/client_test.cpp	/^bool add_torrent(lt::session& ses, std::string torrent)$/;"	f
add_torrent_from_saved_state	src/trackerlogic.c	/^void add_torrent_from_saved_state( ot_hash hash, ot_time base, size_t down_count ) {$/;"	f
add_torrent_params	libtorrent/include/libtorrent/add_torrent_params.hpp	/^	struct TORRENT_EXPORT add_torrent_params$/;"	s	namespace:libtorrent
add_traversal_algorithm	libtorrent/include/libtorrent/kademlia/node.hpp	/^	void add_traversal_algorithm(traversal_algorithm* a)$/;"	f	class:libtorrent::dht::node
added	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void added(session_handle const&) {}$/;"	f	struct:libtorrent::plugin
added	libtorrent/include/libtorrent/torrent.hpp	/^		void added()$/;"	f	class:libtorrent::torrent
added_time	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t added_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
added_time	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::time_t added_time = 0;$/;"	m	struct:libtorrent::torrent_status
addr	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			address addr;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
addr	libtorrent/include/libtorrent/ip_voter.hpp	/^			address addr;$/;"	m	struct:libtorrent::ip_voter::external_ip_t
addr	libtorrent/include/libtorrent/kademlia/msg.hpp	/^	udp::endpoint addr;$/;"	m	struct:libtorrent::dht::msg
addr	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	address addr() const { return endpoint.address(); }$/;"	f	struct:libtorrent::dht::node_entry
addr	libtorrent/include/libtorrent/torrent_handle.hpp	/^		addr_t addr;$/;"	m	struct:libtorrent::block_info
addr	libtorrent/include/libtorrent/torrent_peer.hpp	/^		address_v4 addr;$/;"	m	struct:libtorrent::ipv4_peer
addr	libtorrent/include/libtorrent/torrent_peer.hpp	/^		const address_v6::bytes_type addr;$/;"	m	struct:libtorrent::ipv6_peer
addr	libtorrent/include/libtorrent/union_endpoint.hpp	/^		addr_t addr;$/;"	m	struct:libtorrent::union_address
addr	libtorrent/include/libtorrent/union_endpoint.hpp	/^		union_address addr;$/;"	m	struct:libtorrent::union_endpoint
addr_t	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	union addr_t$/;"	u	struct:libtorrent::dht::observer
addr_t	libtorrent/include/libtorrent/torrent_handle.hpp	/^		union addr_t$/;"	u	struct:libtorrent::block_info
addr_t	libtorrent/include/libtorrent/union_endpoint.hpp	/^		union addr_t$/;"	u	struct:libtorrent::union_address
address	include/trackerlogic.h	/^typedef struct { ot_ip6 address; int bits; }$/;"	m	struct:__anon20
address	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<lt::address> address;$/;"	m	namespace:libtorrent
address	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<lt::address> address;$/;"	v
address	libtorrent/include/libtorrent/union_endpoint.hpp	/^		libtorrent::address address() const { return addr; }$/;"	f	struct:libtorrent::union_endpoint
address_in_net	src/ot_accesslist.c	/^int address_in_net( const ot_ip6 address, const ot_net *net ) {$/;"	f
address_size	libtorrent/include/libtorrent/socket_io.hpp	/^		std::size_t address_size(Proto p)$/;"	f	namespace:libtorrent::detail
addresses	libtorrent/include/libtorrent/resolver.hpp	/^		std::vector<address> addresses;$/;"	m	struct:libtorrent::final::dns_cache_entry
addrinuse_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			addrinuse_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
addword	libowfat/ent.c	/^void addword(struct letters** s,const char* t, void* pointer) {$/;"	f
advapi32	libtorrent/include/libtorrent/aux_/win_util.hpp	/^	struct advapi32 {$/;"	s	namespace:libtorrent::aux
aggressive_lookups	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool aggressive_lookups = true;$/;"	m	struct:libtorrent::dht::dht_settings
aio_limit_reached	libtorrent/include/libtorrent/alert_types.hpp	/^			aio_limit_reached,$/;"	e	enum:libtorrent::final::performance_warning_t
aio_max	libtorrent/include/libtorrent/settings_pack.hpp	/^			aio_max TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
aio_threads	libtorrent/include/libtorrent/settings_pack.hpp	/^			aio_threads,$/;"	e	enum:libtorrent::settings_pack::int_types
alert	libtorrent/include/libtorrent/alert.hpp	/^	class TORRENT_EXPORT alert$/;"	c	namespace:libtorrent
alert_cast	libtorrent/include/libtorrent/alert.hpp	/^template <class T> T const* alert_cast(alert const* a)$/;"	f	namespace:libtorrent
alert_cast	libtorrent/include/libtorrent/alert.hpp	/^template <class T> T* alert_cast(alert* a)$/;"	f	namespace:libtorrent
alert_category	libtorrent/include/libtorrent/alert.hpp	/^namespace alert_category {$/;"	n	namespace:libtorrent
alert_feature	libtorrent/include/libtorrent/extensions.hpp	/^		static constexpr feature_flags_t alert_feature = 4_bit;$/;"	m	struct:libtorrent::plugin
alert_manager	libtorrent/include/libtorrent/alert_manager.hpp	/^	class TORRENT_EXTRA_EXPORT alert_manager$/;"	c	namespace:libtorrent
alert_mask	libtorrent/include/libtorrent/settings_pack.hpp	/^			alert_mask,$/;"	e	enum:libtorrent::settings_pack::int_types
alert_priority	libtorrent/include/libtorrent/alert_types.hpp	/^	enum alert_priority$/;"	g	namespace:libtorrent
alert_priority_critical	libtorrent/include/libtorrent/alert_types.hpp	/^		alert_priority_critical$/;"	e	enum:libtorrent::alert_priority
alert_priority_high	libtorrent/include/libtorrent/alert_types.hpp	/^		alert_priority_high,$/;"	e	enum:libtorrent::alert_priority
alert_priority_normal	libtorrent/include/libtorrent/alert_types.hpp	/^		alert_priority_normal = 0,$/;"	e	enum:libtorrent::alert_priority
alert_queue_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			alert_queue_size,$/;"	e	enum:libtorrent::settings_pack::int_types
alert_type	libtorrent/include/libtorrent/alert_types.hpp	/^		static const int TORRENT_DEPRECATED_MEMBER alert_type = 0;$/;"	m	struct:libtorrent::torrent_alert
alert_type	libtorrent/include/libtorrent/alert_types.hpp	/^		static const int TORRENT_DEPRECATED_MEMBER alert_type = 1;$/;"	m	struct:libtorrent::peer_alert
alert_type	libtorrent/include/libtorrent/alert_types.hpp	/^		static const int TORRENT_DEPRECATED_MEMBER alert_type = 2;$/;"	m	struct:libtorrent::tracker_alert
alert_when_available	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr deadline_flags_t alert_when_available = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
algorithm	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	traversal_algorithm* algorithm() const { return m_algorithm.get(); }$/;"	f	struct:libtorrent::dht::observer
align_expanded_pieces	libtorrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t align_expanded_pieces = 6_bit;$/;"	m	class:libtorrent::piece_picker
aligned_storage	libtorrent/include/libtorrent/aux_/aligned_storage.hpp	/^struct aligned_storage$/;"	s	namespace:libtorrent::aux
aligned_union	libtorrent/include/libtorrent/aux_/aligned_union.hpp	/^struct aligned_union$/;"	s	namespace:libtorrent::aux
all	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t all = alert_category_t::all();$/;"	m	namespace:libtorrent::alert_category
all	libtorrent/include/libtorrent/flags.hpp	/^	static constexpr bitfield_flag all()$/;"	f	namespace:libtorrent::flags
all	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t all = torrent_flags_t::all();$/;"	m	namespace:libtorrent::torrent_flags
all_categories	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t all_categories = alert_category_t::all();$/;"	m	class:libtorrent::alert
all_time_download	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t all_time_download = 0;$/;"	m	struct:libtorrent::torrent_status
all_time_upload	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t all_time_upload = 0;$/;"	m	struct:libtorrent::torrent_status
all_torrents	src/ot_mutex.c	/^static ot_vector all_torrents[OT_BUCKET_COUNT];$/;"	v	file:
all_verified	libtorrent/include/libtorrent/torrent.hpp	/^		bool all_verified() const$/;"	f	class:libtorrent::torrent
alloc	libtorrent/include/libtorrent/packet_pool.hpp	/^		packet_ptr alloc()$/;"	f	struct:libtorrent::packet_slab
alloc	libtorrent/include/libtorrent/packet_pool.hpp	/^		packet_ptr alloc(int const allocate)$/;"	f	struct:libtorrent::packet_pool
alloc_cache_piece	libtorrent/include/libtorrent/operations.hpp	/^		alloc_cache_piece,$/;"	m	class:libtorrent::operation_t
alloc_recvbuf	libtorrent/include/libtorrent/operations.hpp	/^		alloc_recvbuf,$/;"	m	class:libtorrent::operation_t
alloc_sndbuf	libtorrent/include/libtorrent/operations.hpp	/^		alloc_sndbuf,$/;"	m	class:libtorrent::operation_t
alloca_destructor	libtorrent/include/libtorrent/aux_/alloca.hpp	/^struct alloca_destructor$/;"	s	namespace:libtorrent::aux
allocate_observer	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	std::shared_ptr<T> allocate_observer(Args&&... args)$/;"	f	class:libtorrent::dht::rpc_manager
allocate_size	libtorrent/include/libtorrent/packet_pool.hpp	/^		int const allocate_size;$/;"	m	struct:libtorrent::packet_slab
allocated	libowfat/array.h	/^  int64 allocated;	\/* in bytes *\/$/;"	m	struct:__anon33
allocated	libowfat/libowfat/array.h	/^  int64 allocated;	\/* in bytes *\/$/;"	m	struct:__anon39
allocated	libtorrent/include/libtorrent/packet_pool.hpp	/^		std::uint16_t allocated;$/;"	m	struct:libtorrent::packet
allocating	libtorrent/include/libtorrent/torrent_status.hpp	/^			allocating,$/;"	e	enum:libtorrent::torrent_status::state_t
allocating_handler	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		allocating_handler($/;"	f	struct:libtorrent::aux::allocating_handler
allocating_handler	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^	struct allocating_handler$/;"	s	namespace:libtorrent::aux
allocation_mode	src/client_test.cpp	/^lt::storage_mode_t allocation_mode = lt::storage_mode_sparse;$/;"	v
allocation_slot	libtorrent/include/libtorrent/stack_allocator.hpp	/^	struct allocation_slot$/;"	s	namespace:libtorrent::aux
allow	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		void allow(socket_type_t const st, peer_class_t const peer_class)$/;"	f	namespace:libtorrent
allow_ghost	libtorrent/include/libtorrent/block_cache.hpp	/^			allow_ghost,$/;"	e	enum:libtorrent::block_cache::eviction_mode
allow_i2p_mixed	libtorrent/include/libtorrent/settings_pack.hpp	/^			allow_i2p_mixed,$/;"	e	enum:libtorrent::settings_pack::bool_types
allow_multiple_connections_per_ip	libtorrent/include/libtorrent/peer_list.hpp	/^		bool allow_multiple_connections_per_ip = false;$/;"	m	struct:libtorrent::torrent_state
allow_multiple_connections_per_ip	libtorrent/include/libtorrent/settings_pack.hpp	/^			allow_multiple_connections_per_ip = bool_type_base,$/;"	e	enum:libtorrent::settings_pack::bool_types
allow_partial_disk_writes	libtorrent/include/libtorrent/settings_pack.hpp	/^			allow_partial_disk_writes,$/;"	e	enum:libtorrent::settings_pack::bool_types
allowed_enc_level	libtorrent/include/libtorrent/session_settings.hpp	/^		std::uint8_t allowed_enc_level;$/;"	m	struct:libtorrent::pe_settings
allowed_enc_level	libtorrent/include/libtorrent/settings_pack.hpp	/^			allowed_enc_level,$/;"	e	enum:libtorrent::settings_pack::int_types
allowed_fast_set_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			allowed_fast_set_size,$/;"	e	enum:libtorrent::settings_pack::int_types
allowed_upload_slots	libtorrent/include/libtorrent/session_status.hpp	/^		int allowed_upload_slots;$/;"	m	struct:libtorrent::session_status
allprefixed_traverse	libowfat/critbit/critbit.c	/^static int allprefixed_traverse(uint8_t* top,int(*handle)(const char*,void*),void* arg) {$/;"	f	file:
alt_curread	libowfat/io/io_fd.c	/^long alt_curread, alt_curwrite;$/;"	v
alt_curread	libowfat/io_internal.h	/^my_extern long alt_curread, alt_curwrite;$/;"	v
alt_curwrite	libowfat/io/io_fd.c	/^long alt_curread, alt_curwrite;$/;"	v
alt_curwrite	libowfat/io_internal.h	/^my_extern long alt_curread, alt_curwrite;$/;"	v
alt_firstread	libowfat/io/io_fd.c	/^long alt_firstread, alt_firstwrite;$/;"	v
alt_firstread	libowfat/io_internal.h	/^my_extern long alt_firstread, alt_firstwrite;$/;"	v
alt_firstwrite	libowfat/io/io_fd.c	/^long alt_firstread, alt_firstwrite;$/;"	v
alt_firstwrite	libowfat/io_internal.h	/^my_extern long alt_firstread, alt_firstwrite;$/;"	v
always_replace_files	libtorrent/include/libtorrent/storage_defs.hpp	/^		always_replace_files TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::deprecated_move_flags_t
always_replace_files	libtorrent/include/libtorrent/storage_defs.hpp	/^		always_replace_files,$/;"	m	class:libtorrent::move_flags_t
always_send_user_agent	libtorrent/include/libtorrent/settings_pack.hpp	/^			always_send_user_agent,$/;"	e	enum:libtorrent::settings_pack::bool_types
announce	libtorrent/include/libtorrent/kademlia/announce_flags.hpp	/^namespace announce {$/;"	n	namespace:libtorrent::dht
announce	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^			announce,$/;"	m	class:libtorrent::udp_tracker_connection::action_t
announce_crypto_support	libtorrent/include/libtorrent/settings_pack.hpp	/^			announce_crypto_support,$/;"	e	enum:libtorrent::settings_pack::bool_types
announce_double_nat	libtorrent/include/libtorrent/settings_pack.hpp	/^			announce_double_nat TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
announce_endpoint	libtorrent/include/libtorrent/announce_entry.hpp	/^	struct TORRENT_EXPORT announce_endpoint$/;"	s	namespace:libtorrent
announce_entry	libtorrent/include/libtorrent/announce_entry.hpp	/^	struct TORRENT_EXPORT announce_entry$/;"	s	namespace:libtorrent
announce_interval	libtorrent/include/libtorrent/torrent_status.hpp	/^		time_duration TORRENT_DEPRECATED_MEMBER announce_interval;$/;"	m	struct:libtorrent::torrent_status
announce_ip	libtorrent/include/libtorrent/settings_pack.hpp	/^			announce_ip,$/;"	e	enum:libtorrent::settings_pack::string_types
announce_observer	libtorrent/include/libtorrent/kademlia/node.hpp	/^	announce_observer(std::shared_ptr<traversal_algorithm> algo$/;"	f	class:libtorrent::dht::announce_observer
announce_observer	libtorrent/include/libtorrent/kademlia/node.hpp	/^class announce_observer : public observer$/;"	c	namespace:libtorrent::dht
announce_request	libtorrent/include/libtorrent/tracker_manager.hpp	/^			announce_request = 0,$/;"	e	enum:libtorrent::tracker_request::kind_t
announce_to_all_tiers	libtorrent/include/libtorrent/settings_pack.hpp	/^			announce_to_all_tiers,$/;"	e	enum:libtorrent::settings_pack::bool_types
announce_to_all_trackers	libtorrent/include/libtorrent/settings_pack.hpp	/^			announce_to_all_trackers,$/;"	e	enum:libtorrent::settings_pack::bool_types
announcing_to_dht	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool announcing_to_dht = false;$/;"	m	struct:libtorrent::torrent_status
announcing_to_lsd	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool announcing_to_lsd = false;$/;"	m	struct:libtorrent::torrent_status
announcing_to_trackers	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool announcing_to_trackers = false;$/;"	m	struct:libtorrent::torrent_status
anonymous_mode	libtorrent/include/libtorrent/settings_pack.hpp	/^			anonymous_mode,$/;"	e	enum:libtorrent::settings_pack::bool_types
any_count	libtorrent/include/libtorrent/aux_/route.h	/^	int	any_count;$/;"	m	struct:route_cb
append	libtorrent/include/libtorrent/tailqueue.hpp	/^		void append(tailqueue<T>& rhs)$/;"	f	struct:libtorrent::tailqueue
append_buffer	libtorrent/include/libtorrent/chained_buffer.hpp	/^		void append_buffer(Holder buffer, int used_size)$/;"	f	namespace:libtorrent
append_const_send_buffer	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void append_const_send_buffer(Holder holder, int size)$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
append_send_buffer	libtorrent/include/libtorrent/peer_connection.hpp	/^		void append_send_buffer(Holder buffer, int size)$/;"	f	class:libtorrent::peer_connection
apply	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		std::uint32_t apply(socket_type_t const st, std::uint32_t peer_class_mask)$/;"	f	namespace:libtorrent
apply_ansi_code	src/print.cpp	/^void apply_ansi_code(WORD* attributes, bool* reverse, bool* support_chaining, int code)$/;"	f
apply_ip_filter	libtorrent/include/libtorrent/torrent.hpp	/^		bool apply_ip_filter() const { return m_apply_ip_filter; }$/;"	f	class:libtorrent::torrent
apply_ip_filter	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t apply_ip_filter = 3_bit;$/;"	m	namespace:libtorrent::torrent_flags
apply_ip_filter_to_trackers	libtorrent/include/libtorrent/settings_pack.hpp	/^			apply_ip_filter_to_trackers,$/;"	e	enum:libtorrent::settings_pack::bool_types
arc_mfu_ghost_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_mfu_ghost_size;$/;"	m	struct:libtorrent::cache_status
arc_mfu_ghost_size	libtorrent/include/libtorrent/performance_counters.hpp	/^			arc_mfu_ghost_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_mfu_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_mfu_size;$/;"	m	struct:libtorrent::cache_status
arc_mfu_size	libtorrent/include/libtorrent/performance_counters.hpp	/^			arc_mfu_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_mru_ghost_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_mru_ghost_size;$/;"	m	struct:libtorrent::cache_status
arc_mru_ghost_size	libtorrent/include/libtorrent/performance_counters.hpp	/^			arc_mru_ghost_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_mru_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_mru_size;$/;"	m	struct:libtorrent::cache_status
arc_mru_size	libtorrent/include/libtorrent/performance_counters.hpp	/^			arc_mru_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_volatile_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_volatile_size;$/;"	m	struct:libtorrent::cache_status
arc_volatile_size	libtorrent/include/libtorrent/performance_counters.hpp	/^			arc_volatile_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_write_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_write_size;$/;"	m	struct:libtorrent::cache_status
arc_write_size	libtorrent/include/libtorrent/performance_counters.hpp	/^			arc_write_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
are_files_checked	libtorrent/include/libtorrent/torrent.hpp	/^		bool are_files_checked() const$/;"	f	class:libtorrent::torrent
argument	libtorrent/include/libtorrent/disk_io_job.hpp	/^			> argument;$/;"	m	struct:libtorrent::disk_io_job
argv0	libowfat/buffer/errmsg_iam.c	/^const char* argv0;$/;"	v
array	libowfat/array.h	/^} array;$/;"	t	typeref:struct:__anon33
array	libowfat/libowfat/array.h	/^} array;$/;"	t	typeref:struct:__anon39
array_allocate	libowfat/array/array_allocate.c	/^void* array_allocate(array* x,uint64 membersize,int64 pos) {$/;"	f
array_bytes	libowfat/array/array_bytes.c	/^int64 array_bytes(const array* const x) {$/;"	f
array_cat	libowfat/array/array_cat.c	/^void array_cat(array* to,const array* const from) {$/;"	f
array_cat0	libowfat/array/array_cat0.c	/^void array_cat0(array* to) {$/;"	f
array_catb	libowfat/array/array_catb.c	/^void array_catb(array* to,const char* from,uint64 len) {$/;"	f
array_cate	libowfat/array/array_cate.c	/^void array_cate(array* to,const array* const from,int64 pos,int64 stop) {$/;"	f
array_cats	libowfat/array/array_cats.c	/^void array_cats(array* to,const char* from) {$/;"	f
array_cats0	libowfat/array/array_cats0.c	/^void array_cats0(array* to,const char* from) {$/;"	f
array_equal	libowfat/array/array_equal.c	/^int array_equal(const array* const x,const array* const y) {$/;"	f
array_fail	libowfat/array/array_fail.c	/^void array_fail(array* x) {$/;"	f
array_failed	libowfat/array.h	44;"	d
array_failed	libowfat/libowfat/array.h	44;"	d
array_get	libowfat/array/array_get.c	/^void* array_get(const array* const x,uint64 membersize,int64 pos) {$/;"	f
array_length	libowfat/array/array_length.c	/^int64 array_length(const array* const x,uint64 membersize) {$/;"	f
array_reset	libowfat/array/array_reset.c	/^void array_reset(array* x) {$/;"	f
array_start	libowfat/array/array_start.c	/^void* array_start(const array* const x) {$/;"	f
array_trunc	libowfat/array/array_trunc.c	/^void array_trunc(array* x) {$/;"	f
array_truncate	libowfat/array/array_truncate.c	/^void array_truncate(array* x,uint64 membersize,int64 len) {$/;"	f
array_unallocated	libowfat/array.h	45;"	d
array_unallocated	libowfat/libowfat/array.h	45;"	d
arrow_down	src/torrent_view.cpp	/^void torrent_view::arrow_down()$/;"	f	class:torrent_view
arrow_up	src/torrent_view.cpp	/^void torrent_view::arrow_up()$/;"	f	class:torrent_view
artificial_jobs	libtorrent/include/libtorrent/block_cache.hpp	/^		enum artificial_jobs$/;"	g	struct:libtorrent::piece_log_t
asio	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	libtorrent/include/libtorrent/http_connection.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	libtorrent/include/libtorrent/io_service_fwd.hpp	/^namespace sim { namespace asio {$/;"	n	namespace:sim
asio	libtorrent/include/libtorrent/torrent.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	libtorrent/include/libtorrent/tracker_manager.hpp	/^namespace asio {$/;"	n	namespace:boost
asio_handler_allocate	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		friend void* asio_handler_allocate($/;"	f	struct:libtorrent::aux::allocating_handler
asio_handler_allocate	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^	friend void* asio_handler_allocate($/;"	f	struct:libtorrent::aux::handler_wrapper
asio_handler_deallocate	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		friend void asio_handler_deallocate($/;"	f	struct:libtorrent::aux::allocating_handler
asio_handler_deallocate	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^	friend void asio_handler_deallocate($/;"	f	struct:libtorrent::aux::handler_wrapper
assert	libowfat/io/io_dontwantread.c	24;"	d	file:
assert	libowfat/io/io_dontwantwrite.c	24;"	d	file:
assert	libowfat/io/io_wantread.c	30;"	d	file:
assert	libowfat/io/io_wantwrite.c	27;"	d	file:
assign	libowfat/libowfat/rangecheck.h	148;"	d
assign	libowfat/rangecheck.h	148;"	d
assign	libtorrent/include/libtorrent/bitfield.hpp	/^		void assign(char const* b, int const bits)$/;"	f	struct:libtorrent::bitfield
assign_bits	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         void assign_bits(Backend& val, Unsigned bits, unsigned bit_location, unsigned chunk_bits, const mpl::false_& tag)$/;"	f	namespace:boost::multiprecision::detail
assign_bits	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         void assign_bits(Backend& val, Unsigned bits, unsigned bit_location, unsigned chunk_bits, const mpl::true_&)$/;"	f	namespace:boost::multiprecision::detail
assign_setting	src/client_test.cpp	/^void assign_setting(lt::settings_pack& settings, std::string const& key, char const* value)$/;"	f
assigned	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	int assigned;$/;"	m	struct:libtorrent::bw_request
associated_torrent	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::weak_ptr<torrent> associated_torrent() const$/;"	f	class:libtorrent::peer_connection
async_accept_handshake	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void async_accept_handshake(Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_connect	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	struct:libtorrent::aux::socket_type
async_connect	libtorrent/include/libtorrent/http_stream.hpp	/^	void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	class:libtorrent::http_stream
async_connect	libtorrent/include/libtorrent/i2p_stream.hpp	/^	void async_connect(endpoint_type const&, Handler const& handler)$/;"	f	class:libtorrent::i2p_stream
async_connect	libtorrent/include/libtorrent/socks5_stream.hpp	/^	void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	class:libtorrent::socks5_stream
async_connect	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_connect	libtorrent/include/libtorrent/utp_stream.hpp	/^	void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	struct:libtorrent::utp_stream
async_dec_threads	libtorrent/include/libtorrent/debug.hpp	/^	inline void async_dec_threads()$/;"	f	namespace:libtorrent
async_inc_threads	libtorrent/include/libtorrent/debug.hpp	/^	inline void async_inc_threads()$/;"	f	namespace:libtorrent
async_read	libtorrent/include/libtorrent/udp_socket.hpp	/^		void async_read(Handler&& h)$/;"	f	class:libtorrent::udp_socket
async_read_some	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void async_read_some(Mutable_Buffers const& buffers, Handler const& handler)$/;"	f	struct:libtorrent::aux::socket_type
async_read_some	libtorrent/include/libtorrent/proxy_base.hpp	/^	void async_read_some(Mutable_Buffers const& buffers, Handler const& handler)$/;"	f	class:libtorrent::proxy_base
async_read_some	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void async_read_some(Mutable_Buffers const& buffers, Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_read_some	libtorrent/include/libtorrent/utp_stream.hpp	/^	void async_read_some(Mutable_Buffers const& buffers, Handler const& handler)$/;"	f	struct:libtorrent::utp_stream
async_read_some	libtorrent/include/libtorrent/utp_stream.hpp	/^	void async_read_some(null_buffers const&, Handler const& handler)$/;"	f	struct:libtorrent::utp_stream
async_shutdown	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void async_shutdown(Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_t	libtorrent/include/libtorrent/debug.hpp	/^		async_t() : refs(0) {}$/;"	f	struct:libtorrent::async_t
async_t	libtorrent/include/libtorrent/debug.hpp	/^	struct async_t$/;"	s	namespace:libtorrent
async_write	libtorrent/include/libtorrent/udp_socket.hpp	/^		void async_write(Handler&& h)$/;"	f	class:libtorrent::udp_socket
async_write_some	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void async_write_some(Const_Buffers const& buffers, Handler const& handler)$/;"	f	struct:libtorrent::aux::socket_type
async_write_some	libtorrent/include/libtorrent/proxy_base.hpp	/^	void async_write_some(Const_Buffers const& buffers, Handler const& handler)$/;"	f	class:libtorrent::proxy_base
async_write_some	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void async_write_some(Const_Buffers const& buffers, Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_write_some	libtorrent/include/libtorrent/utp_stream.hpp	/^	void async_write_some(Const_Buffers const& buffers, Handler const& handler)$/;"	f	struct:libtorrent::utp_stream
atime	libtorrent/include/libtorrent/aux_/path.hpp	/^		std::uint64_t atime = 0;$/;"	m	struct:libtorrent::file_status
atomic_add	libowfat/CAS.h	/^static inline void atomic_add(size_t* x,size_t val) {$/;"	f
atomic_add_return	libowfat/CAS.h	/^static inline size_t atomic_add_return(size_t* x,size_t val) {$/;"	f
atomic_and	libowfat/CAS.h	/^static inline void atomic_and(volatile size_t* x,size_t val) {$/;"	f
atomic_dec	libowfat/CAS.h	/^static inline void atomic_dec(size_t* x) {$/;"	f
atomic_dec_return	libowfat/CAS.h	/^static inline size_t atomic_dec_return(size_t* x) {$/;"	f
atomic_inc	libowfat/CAS.h	/^static inline void atomic_inc(size_t* x) {$/;"	f
atomic_inc_return	libowfat/CAS.h	/^static inline size_t atomic_inc_return(size_t* x) {$/;"	f
atomic_or	libowfat/CAS.h	/^static inline void atomic_or(volatile size_t* x,size_t val) {$/;"	f
atto	libowfat/libowfat/taia.h	/^  uint32 atto; \/* 0...999999999 *\/$/;"	m	struct:taia
atto	libowfat/taia.h	/^  uint32 atto; \/* 0...999999999 *\/$/;"	m	struct:taia
attribute_executable	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t attribute_executable = 8_bit;$/;"	m	namespace:libtorrent::open_mode
attribute_executable	libtorrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t TORRENT_DEPRECATED_MEMBER attribute_executable = 2_bit;$/;"	m	class:libtorrent::file_storage
attribute_hidden	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t attribute_hidden = 7_bit;$/;"	m	namespace:libtorrent::open_mode
attribute_hidden	libtorrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t TORRENT_DEPRECATED_MEMBER attribute_hidden = 1_bit;$/;"	m	class:libtorrent::file_storage
attribute_mask	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t attribute_mask = attribute_hidden | attribute_executable;$/;"	m	namespace:libtorrent::open_mode
attribute_symlink	libtorrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t TORRENT_DEPRECATED_MEMBER attribute_symlink = 3_bit;$/;"	m	class:libtorrent::file_storage
auth	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::string auth;$/;"	m	struct:libtorrent::web_seed_entry
auth	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::string auth;$/;"	m	struct:libtorrent::tracker_request
authentication_error	libtorrent/include/libtorrent/socks5_stream.hpp	/^		authentication_error,$/;"	e	enum:libtorrent::socks_error::socks_error_code
auto_manage_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			auto_manage_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
auto_manage_prefer_seeds	libtorrent/include/libtorrent/settings_pack.hpp	/^			auto_manage_prefer_seeds,$/;"	e	enum:libtorrent::settings_pack::bool_types
auto_manage_startup	libtorrent/include/libtorrent/settings_pack.hpp	/^			auto_manage_startup,$/;"	e	enum:libtorrent::settings_pack::int_types
auto_managed	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t auto_managed = 5_bit;$/;"	m	namespace:libtorrent::torrent_flags
auto_managed	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER auto_managed = false;$/;"	m	struct:libtorrent::torrent_status
auto_scrape_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			auto_scrape_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
auto_scrape_min_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			auto_scrape_min_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
auto_sequential	libtorrent/include/libtorrent/settings_pack.hpp	/^			auto_sequential,$/;"	e	enum:libtorrent::settings_pack::bool_types
aux	libtorrent/include/libtorrent/aux_/aligned_storage.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/aligned_union.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/alloca.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/array.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/block_cache_reference.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/byteswap.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/cpuid.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/deque.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/dev_random.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/ffs.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/file_progress.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/generate_peer_id.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/has_block.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/instantiate_connection.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/io.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/ip_notifier.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/lsd.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/noexcept_movable.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/numeric_cast.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/openssl.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/portmap.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/range.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/session_call.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/set_socket_buffer.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/storage_piece_set.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/storage_utils.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/suggest_piece.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/throw.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/time.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/unique_ptr.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/vector.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/aux_/win_util.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/block_cache.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/choker.hpp	/^	namespace aux { struct session_settings; }$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/create_torrent.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^namespace aux { struct session_settings; }$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/disk_io_thread.hpp	/^namespace aux { struct block_cache_reference; }$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/entry.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/file_storage.hpp	/^	namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/hex.hpp	/^	namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/identify_client.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^namespace aux { struct listen_socket_handle; }$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/peer_connection.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/random.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/session.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/settings_pack.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/sha1_hash.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/span.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/stack_allocator.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/storage.hpp	/^	namespace aux { struct session_settings; }$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/torrent_handle.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/tracker_manager.hpp	/^	namespace aux { struct session_logger; struct session_settings; }$/;"	n	namespace:libtorrent
aux	libtorrent/include/libtorrent/units.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
available	libtorrent/include/libtorrent/operations.hpp	/^		available,$/;"	m	class:libtorrent::operation_t
available	libtorrent/include/libtorrent/proxy_base.hpp	/^	std::size_t available() const$/;"	f	class:libtorrent::proxy_base
available	libtorrent/include/libtorrent/proxy_base.hpp	/^	std::size_t available(error_code& ec) const$/;"	f	class:libtorrent::proxy_base
available	libtorrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t available() const$/;"	f	class:libtorrent::ssl_stream
available	libtorrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t available(error_code& ec) const$/;"	f	class:libtorrent::ssl_stream
available	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::size_t available(error_code& \/*ec*\/) const { return available(); }$/;"	f	struct:libtorrent::utp_stream
average_hash_time	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int average_hash_time;$/;"	m	struct:libtorrent::cache_status
average_job_time	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int average_job_time;$/;"	m	struct:libtorrent::cache_status
average_read_time	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int average_read_time;$/;"	m	struct:libtorrent::cache_status
average_write_time	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int average_write_time;$/;"	m	struct:libtorrent::cache_status
avg_deviation	libtorrent/include/libtorrent/sliding_average.hpp	/^	Int avg_deviation() const { return m_num_samples > 1 ? (m_average_deviation + 32) \/ 64 : 0; }$/;"	f	struct:libtorrent::sliding_average
b	libowfat/cdb_make.h	/^  buffer b;$/;"	m	struct:cdb_make
b	libowfat/iob.h	/^  array b;$/;"	m	struct:io_batch
b	libowfat/libowfat/cdb_make.h	/^  buffer b;$/;"	m	struct:cdb_make
b	libowfat/libowfat/iob.h	/^  array b;$/;"	m	struct:io_batch
b	libowfat/test/proxy.c	/^  int64 a,b;$/;"	m	struct:state	file:
b	libtorrent/include/libtorrent/buffer.hpp	/^	buffer& operator=(buffer const& b) = delete;$/;"	m	class:libtorrent::buffer
b	libtorrent/include/libtorrent/buffer.hpp	/^	buffer(buffer const& b) = delete;$/;"	m	class:libtorrent::buffer
b0read	libowfat/buffer/buffer_0.c	/^static ssize_t b0read(int fd,char* buf, size_t len) {$/;"	f	file:
b0read	libowfat/buffer/buffer_0small.c	/^static ssize_t b0read(int fd,char* buf, size_t len) {$/;"	f	file:
b64encode	libowfat/test/b64decode.c	/^void b64encode(const char* c) {$/;"	f
b64encode	libowfat/test/b64encode.c	/^void b64encode(const char* c,long len) {$/;"	f
back	libtorrent/include/libtorrent/linked_list.hpp	/^		T const* back() const { return m_last; }$/;"	f	struct:libtorrent::linked_list
back	libtorrent/include/libtorrent/linked_list.hpp	/^		T* back() { return m_last; }$/;"	f	struct:libtorrent::linked_list
bad_gateway	libtorrent/include/libtorrent/error_code.hpp	/^			bad_gateway = 502,$/;"	e	enum:libtorrent::errors::http_errors
bad_request	libtorrent/include/libtorrent/error_code.hpp	/^			bad_request = 400,$/;"	e	enum:libtorrent::errors::http_errors
ban_web_seeds	libtorrent/include/libtorrent/settings_pack.hpp	/^			ban_web_seeds,$/;"	e	enum:libtorrent::settings_pack::bool_types
bandwidth_channel	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^struct TORRENT_EXTRA_EXPORT bandwidth_channel$/;"	s	namespace:libtorrent
bandwidth_manager	libtorrent/include/libtorrent/bandwidth_manager.hpp	/^struct TORRENT_EXTRA_EXPORT bandwidth_manager$/;"	s	namespace:libtorrent
bandwidth_socket	libtorrent/include/libtorrent/bandwidth_socket.hpp	/^	struct TORRENT_EXTRA_EXPORT bandwidth_socket$/;"	s	namespace:libtorrent
banned	libtorrent/include/libtorrent/peer_info.hpp	/^			banned = 1$/;"	e	enum:libtorrent::peer_list_entry::flags_t
banned	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool banned:1;$/;"	m	struct:libtorrent::torrent_peer
banned_by_ip_filter	libtorrent/include/libtorrent/error_code.hpp	/^			banned_by_ip_filter,$/;"	e	enum:libtorrent::errors::error_code_enum
banned_by_port_filter	libtorrent/include/libtorrent/error_code.hpp	/^			banned_by_port_filter,$/;"	e	enum:libtorrent::errors::error_code_enum
banned_for_hash_failure	libtorrent/include/libtorrent/performance_counters.hpp	/^			banned_for_hash_failure,$/;"	e	enum:libtorrent::counters::stats_counter_t
banned_peers	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<tcp::endpoint>> banned_peers;$/;"	m	struct:libtorrent::add_torrent_params
barrier	libowfat/CAS.h	122;"	d
barrier	libtorrent/include/libtorrent/pe_crypto.hpp	/^			barrier(std::shared_ptr<crypto_plugin> plugin, int n)$/;"	f	struct:libtorrent::encryption_handler::barrier
barrier	libtorrent/include/libtorrent/pe_crypto.hpp	/^		struct barrier$/;"	s	struct:libtorrent::encryption_handler
base	include/trackerlogic.h	/^  ot_time        base;$/;"	m	struct:ot_peerlist
base	libtorrent/include/libtorrent/timestamp_history.hpp	/^	std::uint32_t base() const { TORRENT_ASSERT(initialized()); return m_base; }$/;"	f	struct:libtorrent::timestamp_history
base64	libowfat/textcode/base64.c	/^const char base64[]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/=";$/;"	v
base64url	libowfat/textcode/base64url.c	/^const char base64url[]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=";$/;"	v
base_mapping	libtorrent/include/libtorrent/aux_/portmap.hpp	/^	struct base_mapping$/;"	s	namespace:libtorrent::aux
basic_nl_endpoint	libtorrent/include/libtorrent/netlink.hpp	/^		basic_nl_endpoint(protocol_type netlink_family, std::uint32_t group, std::uint32_t pid = 0)$/;"	f	class:libtorrent::basic_nl_endpoint
basic_nl_endpoint	libtorrent/include/libtorrent/netlink.hpp	/^	class basic_nl_endpoint$/;"	c	namespace:libtorrent
batch	include/ot_http.h	/^  io_batch         batch;$/;"	m	struct:http_data
bdecode	libtorrent/include/libtorrent/bencode.hpp	/^	entry bdecode(InIt start, InIt end$/;"	f	namespace:libtorrent
bdecode	libtorrent/include/libtorrent/bencode.hpp	/^	entry bdecode(InIt start, InIt end)$/;"	f	namespace:libtorrent
bdecode_errors	libtorrent/include/libtorrent/bdecode.hpp	/^namespace bdecode_errors$/;"	n	namespace:libtorrent
bdecode_node	libtorrent/include/libtorrent/bdecode.hpp	/^struct TORRENT_EXPORT bdecode_node$/;"	s
bdecode_recursive	libtorrent/include/libtorrent/bencode.hpp	/^		void bdecode_recursive(InIt& in, InIt end, entry& ret, bool& err, int depth)$/;"	f	namespace:libtorrent::detail
bdecode_token	libtorrent/include/libtorrent/bdecode.hpp	/^	bdecode_token(std::ptrdiff_t off, bdecode_token::type_t t)$/;"	f	namespace:libtorrent::detail
bdecode_token	libtorrent/include/libtorrent/bdecode.hpp	/^	bdecode_token(std::ptrdiff_t off, std::uint32_t next$/;"	f	namespace:libtorrent::detail
bdecode_token	libtorrent/include/libtorrent/bdecode.hpp	/^struct bdecode_token$/;"	s	namespace:libtorrent::detail
begin	libtorrent/include/libtorrent/aux_/range.hpp	/^		Iter begin() { return _begin; }$/;"	f	struct:libtorrent::aux::iterator_range
begin	libtorrent/include/libtorrent/buffer.hpp	/^	char const* begin() const { return m_begin; }$/;"	f	class:libtorrent::buffer
begin	libtorrent/include/libtorrent/buffer.hpp	/^	char* begin() { return m_begin; }$/;"	f	class:libtorrent::buffer
begin	libtorrent/include/libtorrent/file_storage.hpp	/^		iterator begin() const { return m_files.begin(); }$/;"	f	class:libtorrent::file_storage
begin	libtorrent/include/libtorrent/index_range.hpp	/^	index_iter<Index> begin() { return index_iter<Index>{_begin}; }$/;"	f	struct:libtorrent::index_range
begin	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	router_iterator begin() const { return m_router_nodes.begin(); }$/;"	f	class:libtorrent::dht::routing_table
begin	libtorrent/include/libtorrent/peer_list.hpp	/^		const_iterator begin() const { return m_peers.begin(); }$/;"	f	struct:libtorrent::peer_list
begin	libtorrent/include/libtorrent/peer_list.hpp	/^		iterator begin() { return m_peers.begin(); }$/;"	f	struct:libtorrent::peer_list
begin	libtorrent/include/libtorrent/sha1_hash.hpp	/^		const_iterator begin() const$/;"	f	class:libtorrent::digest32
begin	libtorrent/include/libtorrent/sha1_hash.hpp	/^		iterator begin()$/;"	f	class:libtorrent::digest32
begin	libtorrent/include/libtorrent/torrent.hpp	/^		const_peer_iterator begin() const { return m_connections.begin(); }$/;"	f	class:libtorrent::torrent
begin	libtorrent/include/libtorrent/torrent.hpp	/^		peer_iterator begin() { return m_connections.begin(); }$/;"	f	class:libtorrent::torrent
begin_deprecated	libtorrent/include/libtorrent/file_storage.hpp	/^		iterator begin_deprecated() const { return m_files.begin(); }$/;"	f	class:libtorrent::file_storage
begin_files	libtorrent/include/libtorrent/torrent_info.hpp	/^		file_iterator begin_files() const { return m_files.begin_deprecated(); }$/;"	f	class:libtorrent::torrent_info
bencode	libtorrent/include/libtorrent/bencode.hpp	/^	template<class OutIt> int bencode(OutIt out, const entry& e)$/;"	f	namespace:libtorrent
bencode_recursive	libtorrent/include/libtorrent/bencode.hpp	/^		int bencode_recursive(OutIt& out, const entry& e)$/;"	f	namespace:libtorrent::detail
big_endian_int	libtorrent/include/libtorrent/utp_stream.hpp	/^	template <class T> struct big_endian_int$/;"	s	namespace:libtorrent
binary_search	src/ot_vector.c	/^void *binary_search( const void * const key, const void * base, const size_t member_count, const size_t member_size,$/;"	f
bind	libtorrent/include/libtorrent/alert_types.hpp	/^			bind TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
bind	libtorrent/include/libtorrent/proxy_base.hpp	/^	void bind(endpoint_type const& \/* endpoint *\/)$/;"	f	class:libtorrent::proxy_base
bind	libtorrent/include/libtorrent/proxy_base.hpp	/^	void bind(endpoint_type const& \/* endpoint *\/, error_code& \/* ec *\/)$/;"	f	class:libtorrent::proxy_base
bind	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void bind(endpoint_type const& endpoint)$/;"	f	class:libtorrent::ssl_stream
bind	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void bind(endpoint_type const& endpoint, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
bind	libtorrent/include/libtorrent/utp_stream.hpp	/^	void bind(endpoint_type const& \/*endpoint*\/) {}$/;"	f	struct:libtorrent::utp_stream
bind_device	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^	void bind_device(T& sock, char const* device, error_code& ec)$/;"	f	namespace:libtorrent::aux
bind_socket	libtorrent/include/libtorrent/tracker_manager.hpp	/^		aux::listen_socket_handle const& bind_socket() const { return m_req.outgoing_socket; }$/;"	f	class:libtorrent::tracker_connection::aux
bind_socket	src/socket.c	/^int bind_socket(int fd, int port)$/;"	f
bind_socket_to_device	libtorrent/include/libtorrent/enum_net.hpp	/^	address bind_socket_to_device(io_service& ios, Socket& sock$/;"	f	namespace:libtorrent
bind_to_device	libtorrent/include/libtorrent/alert_types.hpp	/^			bind_to_device TORRENT_DEPRECATED_ENUM$/;"	e	enum:libtorrent::op_t
bind_to_device	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^		explicit bind_to_device(char const* device): m_value(device) {}$/;"	f	struct:libtorrent::aux::bind_to_device
bind_to_device	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^	struct bind_to_device$/;"	s	namespace:libtorrent::aux
bit	libtorrent/include/libtorrent/bitfield.hpp	/^			std::uint32_t bit = 0x80000000;$/;"	m	struct:libtorrent::bitfield::const_iterator
bit_t	libtorrent/include/libtorrent/flags.hpp	/^	explicit constexpr bit_t(int b) : m_bit_idx(b) {}$/;"	f	struct:libtorrent::bit_t
bit_t	libtorrent/include/libtorrent/flags.hpp	/^struct bit_t$/;"	s	namespace:libtorrent
bitfield	libtorrent/include/libtorrent/bitfield.hpp	/^		bitfield(bitfield const& rhs) { assign(rhs.data(), rhs.size()); }$/;"	f	struct:libtorrent::bitfield
bitfield	libtorrent/include/libtorrent/bitfield.hpp	/^		bitfield(char const* b, int bits) { assign(b, bits); }$/;"	f	struct:libtorrent::bitfield
bitfield	libtorrent/include/libtorrent/bitfield.hpp	/^		bitfield(int bits, bool val) { resize(bits, val); }$/;"	f	struct:libtorrent::bitfield
bitfield	libtorrent/include/libtorrent/bitfield.hpp	/^		explicit bitfield(int bits) { resize(bits); }$/;"	f	struct:libtorrent::bitfield
bitfield	libtorrent/include/libtorrent/bitfield.hpp	/^	struct TORRENT_EXPORT bitfield$/;"	s	namespace:libtorrent
bitfield_flag	libtorrent/include/libtorrent/flags.hpp	/^struct bitfield_flag$/;"	s	namespace:libtorrent::flags
bits	include/trackerlogic.h	/^typedef struct { ot_ip6 address; int bits; }$/;"	m	struct:__anon20
bits	libtorrent/include/libtorrent/bloom_filter.hpp	/^		std::uint8_t bits[N];$/;"	m	struct:libtorrent::bloom_filter
bits_in_byte	libtorrent/include/libtorrent/sha1_hash.hpp	/^		static constexpr int bits_in_byte = 8;$/;"	m	class:libtorrent::digest32
bittorrent	libtorrent/include/libtorrent/operations.hpp	/^		bittorrent,$/;"	m	class:libtorrent::operation_t
bittorrent	libtorrent/include/libtorrent/peer_connection.hpp	/^		bittorrent,$/;"	m	class:libtorrent::connection_type
bittyrant_with_no_uplimit	libtorrent/include/libtorrent/alert_types.hpp	/^			bittyrant_with_no_uplimit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::final::performance_warning_t
block	libtorrent/include/libtorrent/aux_/has_block.hpp	/^		piece_block const& block;$/;"	m	struct:libtorrent::aux::has_block
block	libtorrent/include/libtorrent/block_cache.hpp	/^		int block;$/;"	m	struct:libtorrent::piece_log_t
block	libtorrent/include/libtorrent/peer_connection.hpp	/^		piece_block block;$/;"	m	struct:libtorrent::pending_block
block_cache	libtorrent/include/libtorrent/block_cache.hpp	/^	struct TORRENT_EXTRA_EXPORT block_cache : disk_buffer_pool$/;"	s	namespace:libtorrent
block_cache_reference	libtorrent/include/libtorrent/aux_/block_cache_reference.hpp	/^		block_cache_reference(storage_index_t const idx, std::int32_t const c)$/;"	f	struct:libtorrent::aux::block_cache_reference
block_cache_reference	libtorrent/include/libtorrent/aux_/block_cache_reference.hpp	/^	struct block_cache_reference$/;"	s	namespace:libtorrent::aux
block_index	libtorrent/include/libtorrent/alert_types.hpp	/^		int const block_index;$/;"	m	struct:libtorrent::final
block_index	libtorrent/include/libtorrent/piece_block.hpp	/^		int block_index = 0;$/;"	m	struct:libtorrent::piece_block
block_index	libtorrent/include/libtorrent/piece_block_progress.hpp	/^		int block_index;$/;"	m	struct:libtorrent::piece_block_progress
block_info	libtorrent/include/libtorrent/piece_picker.hpp	/^			block_info(): num_peers(0), state(state_none) {}$/;"	f	struct:libtorrent::piece_picker::block_info
block_info	libtorrent/include/libtorrent/piece_picker.hpp	/^		struct block_info$/;"	s	class:libtorrent::piece_picker
block_info	libtorrent/include/libtorrent/torrent_handle.hpp	/^	struct TORRENT_EXPORT block_info$/;"	s	namespace:libtorrent
block_progress	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t block_progress = 24_bit;$/;"	m	namespace:libtorrent::alert_category
block_progress_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t block_progress_notification = 24_bit;$/;"	m	class:libtorrent::alert
block_ratelimit	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int block_ratelimit = 5;$/;"	m	struct:libtorrent::dht::dht_settings
block_size	libtorrent/include/libtorrent/torrent.hpp	/^		int block_size() const$/;"	f	class:libtorrent::torrent
block_size	libtorrent/include/libtorrent/torrent_handle.hpp	/^		unsigned block_size:15;$/;"	m	struct:libtorrent::block_info
block_size	libtorrent/include/libtorrent/torrent_status.hpp	/^		int block_size = 0;$/;"	m	struct:libtorrent::torrent_status
block_state_t	libtorrent/include/libtorrent/torrent_handle.hpp	/^		enum block_state_t$/;"	g	struct:libtorrent::block_info
block_timeout	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int block_timeout = 5 * 60;$/;"	m	struct:libtorrent::dht::dht_settings
blocked	libtorrent/include/libtorrent/close_reason.hpp	/^		blocked,$/;"	m	class:libtorrent::close_reason_t
blocked	libtorrent/include/libtorrent/disk_io_job.hpp	/^		mutable bool blocked = false;$/;"	m	struct:libtorrent::disk_io_job
blocked	libtorrent/include/libtorrent/ip_filter.hpp	/^		blocked = 1$/;"	e	enum:libtorrent::ip_filter::access_flags
blocked	libtorrent/include/libtorrent/ip_filter.hpp	/^		blocked = 1$/;"	e	enum:libtorrent::port_filter::access_flags
blocked_disk_jobs	libtorrent/include/libtorrent/performance_counters.hpp	/^			blocked_disk_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
blocked_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int blocked_jobs;$/;"	m	struct:libtorrent::cache_status
blockingcopy	libowfat/test/client.c	/^void blockingcopy(int src,int dest) {$/;"	f
blockingcopy	libowfat/test/server.c	/^void blockingcopy(int src,int dest) {$/;"	f
blocks	libtorrent/include/libtorrent/block_cache.hpp	/^		aux::unique_ptr<cached_block_entry[]> blocks;$/;"	m	struct:libtorrent::cached_piece_entry
blocks	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<bool> blocks;$/;"	m	struct:libtorrent::cached_piece_info
blocks	libtorrent/include/libtorrent/torrent_handle.hpp	/^		block_info* blocks;$/;"	m	struct:libtorrent::partial_piece_info
blocks_in_last_piece	libtorrent/include/libtorrent/piece_picker.hpp	/^		int blocks_in_last_piece() const$/;"	f	class:libtorrent::piece_picker
blocks_in_piece	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint64_t blocks_in_piece:14;$/;"	m	struct:libtorrent::cached_piece_entry
blocks_in_piece	libtorrent/include/libtorrent/torrent_handle.hpp	/^		int blocks_in_piece;$/;"	m	struct:libtorrent::partial_piece_info
blocks_inc_refcount	libtorrent/include/libtorrent/block_cache.hpp	/^		enum { blocks_inc_refcount = 1 };$/;"	e	enum:libtorrent::block_cache::__anon45
blocks_left	libtorrent/include/libtorrent/torrent.hpp	/^			int blocks_left;$/;"	m	struct:libtorrent::torrent::read_piece_struct
blocks_read	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int blocks_read;$/;"	m	struct:libtorrent::cache_status
blocks_read_hit	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int blocks_read_hit;$/;"	m	struct:libtorrent::cache_status
blocks_written	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int blocks_written;$/;"	m	struct:libtorrent::cache_status
bloom_filter	libtorrent/include/libtorrent/bloom_filter.hpp	/^		bloom_filter() { clear(); }$/;"	f	struct:libtorrent::bloom_filter
bloom_filter	libtorrent/include/libtorrent/bloom_filter.hpp	/^	struct bloom_filter$/;"	s	namespace:libtorrent
body_start	libtorrent/include/libtorrent/http_parser.hpp	/^		int body_start() const { return m_body_start_pos; }$/;"	f	class:libtorrent::http_parser
bool_type_base	libtorrent/include/libtorrent/settings_pack.hpp	/^			bool_type_base =   0x8000,$/;"	e	enum:libtorrent::settings_pack::type_bases
bool_types	libtorrent/include/libtorrent/settings_pack.hpp	/^		enum bool_types$/;"	g	struct:libtorrent::settings_pack
boost	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^namespace boost {$/;"	n
boost	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^namespace boost {$/;"	n
boost	libtorrent/include/libtorrent/bdecode.hpp	/^namespace boost { namespace system {$/;"	n
boost	libtorrent/include/libtorrent/error_code.hpp	/^namespace boost { namespace system {$/;"	n
boost	libtorrent/include/libtorrent/gzip.hpp	/^namespace boost { namespace system {$/;"	n
boost	libtorrent/include/libtorrent/http_connection.hpp	/^namespace boost {$/;"	n
boost	libtorrent/include/libtorrent/i2p_stream.hpp	/^namespace boost { namespace system {$/;"	n
boost	libtorrent/include/libtorrent/natpmp.hpp	/^namespace boost { namespace system {$/;"	n
boost	libtorrent/include/libtorrent/socks5_stream.hpp	/^namespace boost { namespace system {$/;"	n
boost	libtorrent/include/libtorrent/torrent.hpp	/^namespace boost {$/;"	n
boost	libtorrent/include/libtorrent/tracker_manager.hpp	/^namespace boost {$/;"	n
boost	libtorrent/include/libtorrent/upnp.hpp	/^namespace boost { namespace system {$/;"	n
boost_connection_attempts	libtorrent/include/libtorrent/performance_counters.hpp	/^			boost_connection_attempts,$/;"	e	enum:libtorrent::counters::stats_counter_t
bootstrap	libtorrent/include/libtorrent/kademlia/refresh.hpp	/^class bootstrap : public get_peers$/;"	c	namespace:libtorrent::dht
both	libtorrent/include/libtorrent/session_settings.hpp	/^			both = 3$/;"	e	enum:libtorrent::pe_settings::enc_level
branch_factor	libtorrent/include/libtorrent/kademlia/node.hpp	/^	int branch_factor() const { return m_settings.search_branching; }$/;"	f	class:libtorrent::dht::node
branch_factor	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int branch_factor() const { TORRENT_ASSERT(m_branch_factor >= 0); return m_branch_factor; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
branch_path	src/bt.cpp	/^std::string branch_path(std::string const &f)$/;"	f
broadcast	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			bool broadcast;$/;"	m	struct:libtorrent::broadcast_socket::socket_entry
broadcast_address	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			address_v4 broadcast_address() const$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
broadcast_lsd	libtorrent/include/libtorrent/settings_pack.hpp	/^			broadcast_lsd TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
broadcast_socket	libtorrent/include/libtorrent/broadcast_socket.hpp	/^	class TORRENT_EXTRA_EXPORT broadcast_socket$/;"	c	namespace:libtorrent
broken_pipe_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			broken_pipe_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
bspace	libowfat/cdb_make.h	/^  char bspace[8192];$/;"	m	struct:cdb_make
bspace	libowfat/libowfat/cdb_make.h	/^  char bspace[8192];$/;"	m	struct:cdb_make
bt_peer_connection	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^	class TORRENT_EXTRA_EXPORT bt_peer_connection$/;"	c	namespace:libtorrent
bt_peer_connection_handle	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^	explicit bt_peer_connection_handle(peer_connection_handle pc)$/;"	f	struct:libtorrent::bt_peer_connection_handle
bt_peer_connection_handle	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^struct TORRENT_EXPORT bt_peer_connection_handle : peer_connection_handle$/;"	s	namespace:libtorrent
bucket_being_unlocked	src/ot_mutex.c	/^static pthread_cond_t bucket_being_unlocked;$/;"	v	file:
bucket_check	src/ot_mutex.c	/^static int bucket_check( int bucket ) {$/;"	f	file:
bucket_locklist	src/ot_mutex.c	/^static int bucket_locklist[ OT_MAX_THREADS ];$/;"	v	file:
bucket_locklist_count	src/ot_mutex.c	/^static int bucket_locklist_count = 0;$/;"	v	file:
bucket_mutex	src/ot_mutex.c	/^static pthread_mutex_t bucket_mutex;$/;"	v	file:
bucket_push	src/ot_mutex.c	/^static void bucket_push( int bucket ) {$/;"	f	file:
bucket_remove	src/ot_mutex.c	/^static void bucket_remove( int bucket ) {$/;"	f	file:
bucket_size	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	int bucket_size() const { return m_bucket_size; }$/;"	f	class:libtorrent::dht::routing_table
bucket_size	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	int bucket_size(int bucket) const$/;"	f	class:libtorrent::dht::routing_table
buckets	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	table_t const& buckets() const$/;"	f	class:libtorrent::dht::routing_table
buf	libowfat/fmt/fmt_asn1dertag.c	/^char buf[100];$/;"	v
buf	libowfat/io/io_passfd.c	/^  char buf[1000];$/;"	m	union:fdmsg	file:
buf	libowfat/io/io_receivefd.c	/^  char buf[1000];$/;"	m	union:fdmsg	file:
buf	libowfat/iob_internal.h	/^  const char* buf;$/;"	m	struct:iob_entry
buf	libowfat/test/byte_copy.c	/^char buf[4096];$/;"	v
buf	libowfat/test/io.c	/^char buf[65536];$/;"	v
buf	libowfat/test/io2.c	/^char buf[65536];$/;"	v
buf	libowfat/test/marshal.c	/^char buf[100];$/;"	v
buf	libowfat/test/proxy.c	/^  char buf[1024];$/;"	m	struct:state	file:
buf	libtorrent/include/libtorrent/bitfield.hpp	/^			std::uint32_t const* buf = nullptr;$/;"	m	class:libtorrent::bitfield::const_iterator::std
buf	libtorrent/include/libtorrent/block_cache.hpp	/^		char* buf = nullptr;$/;"	m	struct:libtorrent::cached_block_entry
buf	libtorrent/include/libtorrent/chained_buffer.hpp	/^			char* buf = nullptr; \/\/ the first byte of the buffer$/;"	m	struct:libtorrent::chained_buffer
buf	libtorrent/include/libtorrent/packet_pool.hpp	/^		std::uint8_t buf[1];$/;"	m	struct:libtorrent::packet
buf	libtorrent/include/libtorrent/pe_crypto.hpp	/^		aux::array<std::uint8_t, 256> buf;$/;"	m	struct:libtorrent::rc4
buf	libtorrent/include/libtorrent/sha512.hpp	/^		std::uint8_t buf[128];$/;"	m	struct:libtorrent::sha512_ctx
buffer	libowfat/buffer.h	/^typedef struct buffer {$/;"	s
buffer	libowfat/buffer.h	/^} buffer;$/;"	t	typeref:struct:buffer
buffer	libowfat/libowfat/buffer.h	/^typedef struct buffer {$/;"	s
buffer	libowfat/libowfat/buffer.h	/^} buffer;$/;"	t	typeref:struct:buffer
buffer	libtorrent/include/libtorrent/alert_types.hpp	/^		boost::shared_array<char> const buffer;$/;"	m	class:libtorrent::final::boost
buffer	libtorrent/include/libtorrent/aux_/aligned_storage.hpp	/^		alignas(Align) char buffer[Len];$/;"	m	struct:libtorrent::aux::aligned_storage::type
buffer	libtorrent/include/libtorrent/aux_/aligned_union.hpp	/^			char buffer[max(Len, max(sizeof(Types)...))];$/;"	m	struct:libtorrent::aux::aligned_union::type
buffer	libtorrent/include/libtorrent/buffer.hpp	/^	buffer(buffer&& b)$/;"	f	class:libtorrent::buffer
buffer	libtorrent/include/libtorrent/buffer.hpp	/^	buffer(difference_type const size, span<char const> initialize)$/;"	f	class:libtorrent::buffer
buffer	libtorrent/include/libtorrent/buffer.hpp	/^	explicit buffer(difference_type size = 0)$/;"	f	class:libtorrent::buffer
buffer	libtorrent/include/libtorrent/buffer.hpp	/^class buffer$/;"	c	namespace:libtorrent
buffer	libtorrent/include/libtorrent/sha1.hpp	/^		std::uint8_t buffer[64];$/;"	m	struct:libtorrent::sha1_ctx
buffer_0	libowfat/buffer/buffer_0.c	/^buffer *buffer_0 = &it;$/;"	v
buffer_0_space	libowfat/buffer/buffer_0.c	/^char buffer_0_space[BUFFER_INSIZE];$/;"	v
buffer_0_space	libowfat/buffer/buffer_0small.c	/^char buffer_0_space[128];$/;"	v
buffer_0small	libowfat/buffer/buffer_0small.c	/^buffer *buffer_0small = &it;$/;"	v
buffer_1	libowfat/buffer/buffer_1.c	/^buffer *buffer_1 = &it;$/;"	v
buffer_1_space	libowfat/buffer/buffer_1.c	/^char buffer_1_space[BUFFER_INSIZE];$/;"	v
buffer_1_space	libowfat/buffer/buffer_1small.c	/^char buffer_1_space[128];$/;"	v
buffer_1small	libowfat/buffer/buffer_1small.c	/^buffer *buffer_1small = &it;$/;"	v
buffer_2	libowfat/buffer/buffer_2.c	/^buffer *buffer_2 = &it;$/;"	v
buffer_2_space	libowfat/buffer/buffer_2.c	/^char buffer_2_space[BUFFER_INSIZE];$/;"	v
buffer_GETC	libowfat/buffer.h	95;"	d
buffer_GETC	libowfat/libowfat/buffer.h	95;"	d
buffer_PEEK	libowfat/buffer.h	92;"	d
buffer_PEEK	libowfat/libowfat/buffer.h	92;"	d
buffer_PUTC	libowfat/buffer.h	64;"	d
buffer_PUTC	libowfat/libowfat/buffer.h	64;"	d
buffer_SEEK	libowfat/buffer.h	93;"	d
buffer_SEEK	libowfat/libowfat/buffer.h	93;"	d
buffer_allocator_interface	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^	struct TORRENT_EXTRA_EXPORT buffer_allocator_interface$/;"	s	namespace:libtorrent
buffer_close	libowfat/buffer/buffer_close.c	/^void buffer_close(buffer* b) {$/;"	f
buffer_feed	libowfat/buffer/buffer_feed.c	/^ssize_t buffer_feed(buffer* b) {$/;"	f
buffer_flush	libowfat/buffer/buffer_flush.c	/^extern int buffer_flush(buffer* b) {$/;"	f
buffer_free	libowfat/buffer/buffer_free.c	/^void buffer_free(void* buf) {$/;"	f
buffer_fromarray	libowfat/buffer/buffer_fromarray.c	/^void buffer_fromarray(buffer* b,array* a) {$/;"	f
buffer_frombuf	libowfat/buffer/buffer_frombuf.c	/^void buffer_frombuf(buffer* b,const char* x,size_t l) {$/;"	f
buffer_fromsa	libowfat/buffer/buffer_fromsa.c	/^void buffer_fromsa(buffer* b,const stralloc* sa) {$/;"	f
buffer_get	libowfat/buffer/buffer_get.c	/^ssize_t buffer_get(buffer* b,char* x,size_t len) {$/;"	f
buffer_get_new_token_sa	libowfat/buffer/buffer_get_new_token_sa.c	/^int buffer_get_new_token_sa(buffer* b,stralloc* sa,const char* charset,size_t setlen) {$/;"	f
buffer_get_new_token_sa_pred	libowfat/buffer/buffer_get_new_token_sa_pred.c	/^int buffer_get_new_token_sa_pred(buffer* b,stralloc* sa,sa_predicate p) {$/;"	f
buffer_get_token	libowfat/buffer/buffer_get_token.c	/^ssize_t buffer_get_token(buffer* b,char* x,size_t len,const char* charset,size_t setlen) {$/;"	f
buffer_get_token_pred	libowfat/buffer/buffer_get_token_pred.c	/^ssize_t buffer_get_token_pred(buffer* b,char* x,size_t len,$/;"	f
buffer_get_token_sa	libowfat/buffer/buffer_get_token_sa.c	/^int buffer_get_token_sa(buffer* b,stralloc* sa,$/;"	f
buffer_get_token_sa_pred	libowfat/buffer/buffer_get_token_sa_pred.c	/^int buffer_get_token_sa_pred(buffer* b,stralloc* sa,sa_predicate p) {$/;"	f
buffer_getc	libowfat/buffer/buffer_getc.c	/^ssize_t buffer_getc(buffer* b,char* x) {$/;"	f
buffer_getline	libowfat/buffer/buffer_getline.c	/^ssize_t buffer_getline(buffer* b,char* x,size_t len) {$/;"	f
buffer_getline_sa	libowfat/buffer/buffer_getline_sa.c	/^int buffer_getline_sa(buffer* b,stralloc* sa) {$/;"	f
buffer_getn	libowfat/buffer/buffer_getn.c	/^ssize_t buffer_getn(buffer* b,char* x,size_t len) {$/;"	f
buffer_getnewline_sa	libowfat/buffer/buffer_getnewline_sa.c	/^int buffer_getnewline_sa(buffer* b,stralloc* sa) {$/;"	f
buffer_init	libowfat/buffer/buffer_init.c	/^void buffer_init(buffer* b,ssize_t (*op)(),int fd,$/;"	f
buffer_init_free	libowfat/buffer/buffer_init_free.c	/^void buffer_init_free(buffer* b,ssize_t (*op)(),int fd,$/;"	f
buffer_mmapread	libowfat/buffer/buffer_mmapread.c	/^int buffer_mmapread(buffer* b,const char* filename) {$/;"	f
buffer_munmap	libowfat/buffer/buffer_munmap.c	/^void buffer_munmap(void* buf) {$/;"	f
buffer_peek	libowfat/buffer/buffer_peek.c	/^char *buffer_peek(buffer* b) {$/;"	f
buffer_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			buffer_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
buffer_put	libowfat/buffer/buffer_put.c	/^int buffer_put(buffer* b,const char* buf,size_t len) {$/;"	f
buffer_put8long	libowfat/buffer/buffer_put8long.c	/^int buffer_put8long(buffer *b,unsigned long l) {$/;"	f
buffer_putalign	libowfat/buffer/buffer_putalign.c	/^int buffer_putalign(buffer* b,const char* buf,size_t len) {$/;"	f
buffer_puterror	libowfat/buffer/buffer_puterror.c	/^int buffer_puterror(buffer* b) {$/;"	f
buffer_puterror2	libowfat/buffer/buffer_puterror2.c	/^int buffer_puterror2(buffer* b,int errnum) {$/;"	f
buffer_putflush	libowfat/buffer/buffer_putflush.c	/^int buffer_putflush(buffer* b,const char* x,size_t len) {$/;"	f
buffer_putlong	libowfat/buffer/buffer_putlong.c	/^int buffer_putlong(buffer *b,signed long l) {$/;"	f
buffer_putlonglong	libowfat/buffer/buffer_putlonglong.c	/^int buffer_putlonglong(buffer *b,signed long long l) {$/;"	f
buffer_putm	libowfat/buffer.h	58;"	d
buffer_putm	libowfat/libowfat/buffer.h	58;"	d
buffer_putm_internal	libowfat/buffer/buffer_putm_internal.c	/^int buffer_putm_internal(buffer* b, ...) {$/;"	f
buffer_putm_internal_flush	libowfat/buffer/buffer_putm_internal_flush.c	/^int buffer_putm_internal_flush(buffer* b, ...) {$/;"	f
buffer_putmflush	libowfat/buffer.h	59;"	d
buffer_putmflush	libowfat/libowfat/buffer.h	59;"	d
buffer_putnlflush	libowfat/buffer/buffer_putnlflush.c	/^int buffer_putnlflush(buffer* b) {$/;"	f
buffer_puts	libowfat/buffer.h	52;"	d
buffer_puts	libowfat/buffer/buffer_puts.c	/^int buffer_puts(buffer* b,const char* x) {$/;"	f
buffer_puts	libowfat/libowfat/buffer.h	52;"	d
buffer_putsa	libowfat/buffer/buffer_putsa.c	/^int buffer_putsa(buffer* b,const stralloc* sa) {$/;"	f
buffer_putsaflush	libowfat/buffer/buffer_putsaflush.c	/^int buffer_putsaflush(buffer* b,const stralloc* sa) {$/;"	f
buffer_putsalign	libowfat/buffer/buffer_putsalign.c	/^int buffer_putsalign(buffer* b,const char* x) {$/;"	f
buffer_putsflush	libowfat/buffer.h	53;"	d
buffer_putsflush	libowfat/buffer/buffer_putsflush.c	/^int buffer_putsflush(buffer* b,const char* x) {$/;"	f
buffer_putsflush	libowfat/libowfat/buffer.h	53;"	d
buffer_putspace	libowfat/buffer/buffer_putspace.c	/^int buffer_putspace(buffer* b) {$/;"	f
buffer_putulong	libowfat/buffer/buffer_putulong.c	/^int buffer_putulong(buffer *b,unsigned long l) {$/;"	f
buffer_putulonglong	libowfat/buffer/buffer_putulonglong.c	/^int buffer_putulonglong(buffer *b,unsigned long long l) {$/;"	f
buffer_putxlong	libowfat/buffer/buffer_putxlong.c	/^int buffer_putxlong(buffer *b,unsigned long l) {$/;"	f
buffer_seek	libowfat/buffer/buffer_seek.c	/^void buffer_seek(buffer* b,size_t len) {$/;"	f
buffer_size	libtorrent/include/libtorrent/disk_io_job.hpp	/^			std::uint16_t buffer_size;$/;"	m	struct:libtorrent::disk_io_job::un::io_args
buffer_stubborn	libowfat/buffer/buffer_stubborn.c	/^int buffer_stubborn(ssize_t (*op)(),int fd,const char* buf, size_t len,void* cookie) {$/;"	f
buffer_stubborn_read	libowfat/buffer/buffer_stubborn2.c	/^ssize_t buffer_stubborn_read(ssize_t (*op)(),int fd,const char* buf, size_t len,void* cookie) {$/;"	f
buffer_t	libtorrent/include/libtorrent/chained_buffer.hpp	/^			buffer_t() {}$/;"	f	struct:libtorrent::chained_buffer::buffer_t
buffer_t	libtorrent/include/libtorrent/chained_buffer.hpp	/^		struct buffer_t$/;"	s	struct:libtorrent::chained_buffer
buffer_tosa	libowfat/buffer/buffer_tosa.c	/^int buffer_tosa(buffer* b,stralloc* sa) {$/;"	f
bufs	libowfat/iob.h	/^  long next,bufs,files;$/;"	m	struct:io_batch
bufs	libowfat/libowfat/iob.h	/^  long next,bufs,files;$/;"	m	struct:io_batch
busy	libtorrent/include/libtorrent/peer_connection.hpp	/^		static constexpr request_flags_t busy = 1_bit;$/;"	m	class:libtorrent::peer_connection
busy	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::uint32_t busy:1;$/;"	m	struct:libtorrent::pending_block
busy_requests	libtorrent/include/libtorrent/peer_info.hpp	/^		int busy_requests;$/;"	m	struct:libtorrent::peer_info
bw_disk	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr bandwidth_state_flags_t bw_disk = 4_bit;$/;"	m	struct:libtorrent::peer_info
bw_global	libtorrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER static constexpr bandwidth_state_flags_t bw_global = bw_limit;$/;"	m	struct:libtorrent::peer_info
bw_idle	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr bandwidth_state_flags_t bw_idle = 0_bit;$/;"	m	struct:libtorrent::peer_info
bw_limit	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr bandwidth_state_flags_t bw_limit = 1_bit;$/;"	m	struct:libtorrent::peer_info
bw_network	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr bandwidth_state_flags_t bw_network = 2_bit;$/;"	m	struct:libtorrent::peer_info
bw_request	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	/^struct TORRENT_EXTRA_EXPORT bw_request$/;"	s	namespace:libtorrent
bw_torrent	libtorrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER static constexpr bandwidth_state_flags_t bw_torrent = bw_limit;$/;"	m	struct:libtorrent::peer_info
byte	libowfat/critbit/critbit.c	/^  uint32_t byte;$/;"	m	struct:__anon27	file:
byte_chr	libowfat/byte/byte_chr.c	/^size_t byte_chr(const void* haystack, size_t len, char needle) {$/;"	f
byte_copy	libowfat/byte/byte_copy.c	/^void byte_copy(void* out, size_t len, const void* in) {$/;"	f
byte_copyr	libowfat/byte/byte_copyr.c	/^void byte_copyr(void* out, size_t len, const void* in) {$/;"	f
byte_diff	libowfat/byte/byte_diff.c	/^int byte_diff(const void* a, size_t len, const void* b) {$/;"	f
byte_equal	libowfat/byte.h	42;"	d
byte_equal	libowfat/libowfat/byte.h	42;"	d
byte_equal_notimingattack	libowfat/byte/byte_equal_notimingattack.c	/^int byte_equal_notimingattack(const void* a, size_t len,const void* b) {$/;"	f
byte_rchr	libowfat/byte/byte_rchr.c	/^size_t byte_rchr(const void* haystack,size_t len,char needle) {$/;"	f
byte_zero	libowfat/byte/byte_zero.c	/^void byte_zero(void* out, size_t len) {$/;"	f
bytes	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		typename aux::aligned_storage<Size>::type bytes;$/;"	m	struct:libtorrent::aux::handler_storage
bytes	libtorrent/include/libtorrent/bitfield.hpp	/^		char const* bytes() const { return data(); }$/;"	f	struct:libtorrent::bitfield
bytes	libtorrent/include/libtorrent/kademlia/types.hpp	/^		std::array<char, len> bytes;$/;"	m	struct:libtorrent::dht::public_key
bytes	libtorrent/include/libtorrent/kademlia/types.hpp	/^		std::array<char, len> bytes;$/;"	m	struct:libtorrent::dht::secret_key
bytes	libtorrent/include/libtorrent/kademlia/types.hpp	/^		std::array<char, len> bytes;$/;"	m	struct:libtorrent::dht::signature
bytes_downloaded	libtorrent/include/libtorrent/piece_block_progress.hpp	/^		int bytes_downloaded;$/;"	m	struct:libtorrent::piece_block_progress
bytes_progress	libtorrent/include/libtorrent/torrent_handle.hpp	/^		unsigned bytes_progress:15;$/;"	m	struct:libtorrent::block_info
bytes_read	libowfat/io_internal.h	/^  int bytes_read,bytes_written;$/;"	m	struct:__anon40
bytes_written	libowfat/io_internal.h	/^  int bytes_read,bytes_written;$/;"	m	struct:__anon40
bytesleft	libowfat/iob.h	/^  uint64 bytesleft;$/;"	m	struct:io_batch
bytesleft	libowfat/libowfat/iob.h	/^  uint64 bytesleft;$/;"	m	struct:io_batch
bytesperpage	libowfat/iarray.h	/^  size_t elemsize,elemperpage,bytesperpage,len;$/;"	m	struct:__anon31
bytesperpage	libowfat/libowfat/iarray.h	/^  size_t elemsize,elemperpage,bytesperpage,len;$/;"	m	struct:__anon37
c	libowfat/ent.c	/^  char c;$/;"	m	struct:letter	file:
c	libowfat/test/iom.c	/^iomux_t c;$/;"	v
cJSON	include/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	include/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddBoolToObject	include/cJSON.h	132;"	d
cJSON_AddFalseToObject	include/cJSON.h	131;"	d
cJSON_AddItemReferenceToArray	src/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToObject	src/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f
cJSON_AddItemToArray	src/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f
cJSON_AddItemToObject	src/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddNullToObject	include/cJSON.h	129;"	d
cJSON_AddNumberToObject	include/cJSON.h	133;"	d
cJSON_AddStringToObject	include/cJSON.h	134;"	d
cJSON_AddTrueToObject	include/cJSON.h	130;"	d
cJSON_Array	include/cJSON.h	37;"	d
cJSON_CreateArray	src/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f
cJSON_CreateBool	src/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f
cJSON_CreateDoubleArray	src/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateFalse	src/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f
cJSON_CreateFloatArray	src/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateIntArray	src/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateNull	src/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f
cJSON_CreateNumber	src/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f
cJSON_CreateObject	src/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f
cJSON_CreateString	src/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f
cJSON_CreateStringArray	src/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateTrue	src/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f
cJSON_Delete	src/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f
cJSON_DeleteItemFromArray	src/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f
cJSON_DeleteItemFromObject	src/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f
cJSON_DetachItemFromArray	src/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f
cJSON_DetachItemFromObject	src/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f
cJSON_Duplicate	src/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f
cJSON_False	include/cJSON.h	32;"	d
cJSON_GetArrayItem	src/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f
cJSON_GetArraySize	src/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f
cJSON_GetErrorPtr	src/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f
cJSON_GetObjectItem	src/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f
cJSON_Hooks	include/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	include/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	src/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_IsReference	include/cJSON.h	40;"	d
cJSON_Minify	src/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f
cJSON_NULL	include/cJSON.h	34;"	d
cJSON_New_Item	src/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:
cJSON_Number	include/cJSON.h	35;"	d
cJSON_Object	include/cJSON.h	38;"	d
cJSON_Parse	src/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f
cJSON_ParseWithOpts	src/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f
cJSON_Print	src/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}$/;"	f
cJSON_PrintUnformatted	src/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}$/;"	f
cJSON_ReplaceItemInArray	src/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f
cJSON_ReplaceItemInObject	src/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f
cJSON_SetIntValue	include/cJSON.h	137;"	d
cJSON_String	include/cJSON.h	36;"	d
cJSON_True	include/cJSON.h	33;"	d
cJSON__h	include/cJSON.h	24;"	d
cJSON_free	src/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	src/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	src/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:
cJSON_strdup	src/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:
cache	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		block_cache* cache() { return &m_disk_cache; }$/;"	f	struct:libtorrent::final
cache_buffer_chunk_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			cache_buffer_chunk_size TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
cache_check_active	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			cache_check_active,$/;"	e	enum:libtorrent::final::__anon52
cache_check_idle	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			cache_check_idle,$/;"	e	enum:libtorrent::final::__anon52
cache_check_reinvoke	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			cache_check_reinvoke$/;"	e	enum:libtorrent::final::__anon52
cache_expiry	libtorrent/include/libtorrent/settings_pack.hpp	/^			cache_expiry,$/;"	e	enum:libtorrent::settings_pack::int_types
cache_hit	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t cache_hit:1;$/;"	m	struct:libtorrent::cached_block_entry
cache_hit	libtorrent/include/libtorrent/disk_interface.hpp	/^		static constexpr disk_job_flags_t cache_hit = 5_bit;$/;"	m	struct:libtorrent::disk_interface
cache_miss	libtorrent/include/libtorrent/block_cache.hpp	/^			cache_miss,$/;"	e	enum:libtorrent::block_cache::cache_op_t
cache_only	libtorrent/include/libtorrent/resolver_interface.hpp	/^	static constexpr resolver_flags cache_only = 0_bit;$/;"	m	struct:libtorrent::resolver_interface
cache_op_t	libtorrent/include/libtorrent/block_cache.hpp	/^		enum cache_op_t$/;"	g	struct:libtorrent::block_cache
cache_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int cache_size;$/;"	m	struct:libtorrent::cache_status
cache_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			cache_size,$/;"	e	enum:libtorrent::settings_pack::int_types
cache_size	src/client_test.cpp	/^int cache_size = -1;$/;"	v
cache_size_volatile	libtorrent/include/libtorrent/settings_pack.hpp	/^			cache_size_volatile,$/;"	e	enum:libtorrent::settings_pack::int_types
cache_state	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t cache_state:3;$/;"	m	struct:libtorrent::cached_piece_entry
cache_state_t	libtorrent/include/libtorrent/block_cache.hpp	/^		enum cache_state_t$/;"	g	struct:libtorrent::cached_piece_entry
cache_status	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		cache_status()$/;"	f	struct:libtorrent::cache_status
cache_status	libtorrent/include/libtorrent/disk_io_thread.hpp	/^	struct TORRENT_EXPORT cache_status$/;"	s	namespace:libtorrent
cached_block_entry	libtorrent/include/libtorrent/block_cache.hpp	/^		cached_block_entry()$/;"	f	struct:libtorrent::cached_block_entry
cached_block_entry	libtorrent/include/libtorrent/block_cache.hpp	/^	struct cached_block_entry$/;"	s	namespace:libtorrent
cached_piece_entry	libtorrent/include/libtorrent/block_cache.hpp	/^	struct TORRENT_EXTRA_EXPORT cached_piece_entry$/;"	s	namespace:libtorrent
cached_piece_info	libtorrent/include/libtorrent/disk_io_thread.hpp	/^	struct cached_piece_info$/;"	s	namespace:libtorrent
cached_pieces	libtorrent/include/libtorrent/aux_/storage_piece_set.hpp	/^		list_t const& cached_pieces() const$/;"	f	struct:libtorrent::aux::storage_piece_set
calculate_pad_bytes	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^	inline std::size_t calculate_pad_bytes(char const* inptr, std::size_t alignment)$/;"	f	namespace:libtorrent::aux
call_abort	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void call_abort()$/;"	f	struct:libtorrent::aux::final
callback_called	libtorrent/include/libtorrent/disk_io_job.hpp	/^		mutable bool callback_called = false;$/;"	m	struct:libtorrent::disk_io_job
can_broadcast	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			bool can_broadcast() const$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
can_disconnect	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool can_disconnect(error_code const& \/*ec*\/) { return true; }$/;"	f	struct:libtorrent::peer_plugin
cancel	libtorrent/include/libtorrent/proxy_base.hpp	/^	error_code cancel(error_code& ec)$/;"	f	class:libtorrent::proxy_base
cancel	libtorrent/include/libtorrent/utp_stream.hpp	/^	error_code cancel(error_code&)$/;"	f	struct:libtorrent::utp_stream
cancelled	libtorrent/include/libtorrent/tracker_manager.hpp	/^		bool cancelled() const { return m_abort; }$/;"	f	struct:libtorrent::timeout_handler
cancelled_piece_requests	libtorrent/include/libtorrent/performance_counters.hpp	/^			cancelled_piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
canread	libowfat/io_internal.h	/^  unsigned int canread:1;	\/* do we know we can read\/write? *\/$/;"	m	struct:__anon40
cant_reach_peer	libtorrent/include/libtorrent/i2p_stream.hpp	/^			cant_reach_peer,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
canwrite	libowfat/io_internal.h	/^  unsigned int canwrite:1;$/;"	m	struct:__anon40
capacity	libtorrent/include/libtorrent/chained_buffer.hpp	/^		int capacity() const { return m_capacity; }$/;"	f	namespace:libtorrent
capacity	libtorrent/include/libtorrent/netlink.hpp	/^		std::size_t capacity() const$/;"	f	class:libtorrent::basic_nl_endpoint
capacity	libtorrent/include/libtorrent/packet_buffer.hpp	/^		std::uint32_t capacity() const$/;"	f	class:libtorrent::packet_buffer
capacity	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int capacity() const { return aux::numeric_cast<int>(m_recv_buffer.size()); }$/;"	f	struct:libtorrent::receive_buffer
carp	libowfat/errmsg.h	27;"	d
carp	libowfat/libowfat/errmsg.h	27;"	d
carp	libowfat/test/httpd.c	/^static void carp(const char* routine) {$/;"	f	file:
carpsys	libowfat/errmsg.h	28;"	d
carpsys	libowfat/libowfat/errmsg.h	28;"	d
case_diffb	libowfat/case/case_diffb.c	/^int case_diffb(register const void* S,register size_t len,register const void* T)$/;"	f
case_diffs	libowfat/case/case_diffs.c	/^int case_diffs(register const char *s,register const char *t)$/;"	f
case_equalb	libowfat/case.h	25;"	d
case_equalb	libowfat/libowfat/case.h	25;"	d
case_equals	libowfat/case.h	24;"	d
case_equals	libowfat/libowfat/case.h	24;"	d
case_lowerb	libowfat/case/case_lowerb.c	/^void case_lowerb(void *S,size_t len) {$/;"	f
case_lowers	libowfat/case/case_lowers.c	/^void case_lowers(char *s) {$/;"	f
case_starts	libowfat/case/case_starts.c	/^int case_starts(const char* a, const char* b) {$/;"	f
categories	libtorrent/include/libtorrent/piece_picker.hpp	/^		index_range<download_queue_t> categories() const$/;"	f	class:libtorrent::piece_picker
cdb	libowfat/cdb.h	/^struct cdb {$/;"	s
cdb	libowfat/libowfat/cdb.h	/^struct cdb {$/;"	s
cdb_datalen	libowfat/cdb.h	44;"	d
cdb_datalen	libowfat/libowfat/cdb.h	44;"	d
cdb_datapos	libowfat/cdb.h	43;"	d
cdb_datapos	libowfat/libowfat/cdb.h	43;"	d
cdb_find	libowfat/cdb/cdb.c	/^int cdb_find(struct cdb *c,const unsigned char *key,unsigned long int len) {$/;"	f
cdb_findnext	libowfat/cdb/cdb.c	/^int cdb_findnext(struct cdb *c,const unsigned char *key,unsigned long int len) {$/;"	f
cdb_findstart	libowfat/cdb/cdb.c	/^void cdb_findstart(struct cdb *c) {$/;"	f
cdb_firstkey	libowfat/cdb/cdb_traverse.c	/^int cdb_firstkey(struct cdb *c,uint32 *kpos) {$/;"	f
cdb_free	libowfat/cdb/cdb.c	/^void cdb_free(struct cdb *c) {$/;"	f
cdb_hash	libowfat/cdb/cdb_hash.c	/^uint32 cdb_hash(const unsigned char *buf,unsigned long int len) {$/;"	f
cdb_hashadd	libowfat/cdb/cdb_hash.c	/^uint32 cdb_hashadd(uint32 h,unsigned char c) {$/;"	f
cdb_hp	libowfat/cdb_make.h	/^struct cdb_hp { uint32 h; uint32 p; } ;$/;"	s
cdb_hp	libowfat/libowfat/cdb_make.h	/^struct cdb_hp { uint32 h; uint32 p; } ;$/;"	s
cdb_hplist	libowfat/cdb_make.h	/^struct cdb_hplist {$/;"	s
cdb_hplist	libowfat/libowfat/cdb_make.h	/^struct cdb_hplist {$/;"	s
cdb_init	libowfat/cdb/cdb.c	/^void cdb_init(struct cdb *c,int64 fd) {$/;"	f
cdb_keylen	libowfat/cdb.h	46;"	d
cdb_keylen	libowfat/libowfat/cdb.h	46;"	d
cdb_keypos	libowfat/cdb.h	45;"	d
cdb_keypos	libowfat/libowfat/cdb.h	45;"	d
cdb_make	libowfat/cdb_make.h	/^struct cdb_make {$/;"	s
cdb_make	libowfat/libowfat/cdb_make.h	/^struct cdb_make {$/;"	s
cdb_make_add	libowfat/cdb/cdb_make.c	/^int cdb_make_add(struct cdb_make *c,const unsigned char *key,unsigned long int keylen,const unsigned char *data,unsigned long int datalen)$/;"	f
cdb_make_addbegin	libowfat/cdb/cdb_make.c	/^int cdb_make_addbegin(struct cdb_make *c,unsigned long int keylen,unsigned long int datalen) {$/;"	f
cdb_make_addend	libowfat/cdb/cdb_make.c	/^int cdb_make_addend(struct cdb_make *c,unsigned long int keylen,unsigned long int datalen,uint32 h) {$/;"	f
cdb_make_finish	libowfat/cdb/cdb_make.c	/^int cdb_make_finish(struct cdb_make *c)$/;"	f
cdb_make_start	libowfat/cdb/cdb_make.c	/^int cdb_make_start(struct cdb_make *c,int64 fd) {$/;"	f
cdb_nextkey	libowfat/cdb/cdb_traverse.c	/^int cdb_nextkey(struct cdb *c,uint32 *kpos) {$/;"	f
cdb_read	libowfat/cdb/cdb.c	/^int cdb_read(struct cdb *c,unsigned char *buf,unsigned long len,uint32 pos) {$/;"	f
cdb_successor	libowfat/cdb/cdb_traverse.c	/^int cdb_successor(struct cdb *c,const unsigned char *key,unsigned long int klen) {$/;"	f
cescape	libowfat/test/cescape.c	/^void cescape(const char* c) {$/;"	f
chained_buffer	libtorrent/include/libtorrent/chained_buffer.hpp	/^		chained_buffer(): m_bytes(0), m_capacity(0)$/;"	f	struct:libtorrent::chained_buffer
chained_buffer	libtorrent/include/libtorrent/chained_buffer.hpp	/^	struct TORRENT_EXTRA_EXPORT chained_buffer : private single_threaded$/;"	s	namespace:libtorrent
channel	libtorrent/include/libtorrent/peer_class.hpp	/^		bandwidth_channel channel[2];$/;"	m	struct:libtorrent::peer_class
channels	libtorrent/include/libtorrent/peer_connection.hpp	/^		enum channels$/;"	g	class:libtorrent::peer_connection
character_special	libtorrent/include/libtorrent/aux_/path.hpp	/^			character_special = 0x2000,  \/\/ character special$/;"	e	enum:libtorrent::file_status::__anon61
check_assign	libowfat/test/range.c	/^void check_assign() {$/;"	f
check_fastresume	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, check_fastresume$/;"	m	class:libtorrent::job_action_t
check_files	libtorrent/include/libtorrent/torrent.hpp	/^		enum class seed_mode_t { check_files, skip_checking };$/;"	m	class:libtorrent::torrent::seed_mode_t
check_intof	libowfat/test/range.c	/^void check_intof() {$/;"	f
check_invariant	libtorrent/include/libtorrent/invariant_check.hpp	/^		static void check_invariant(T const& self)$/;"	f	class:libtorrent::invariant_access
check_invariant	libtorrent/include/libtorrent/invariant_check.hpp	/^	void check_invariant(T const& x)$/;"	f	namespace:libtorrent
check_invariant	libtorrent/include/libtorrent/receive_buffer.hpp	/^	void check_invariant() const$/;"	f	struct:libtorrent::receive_buffer
check_minmax	libowfat/test/range.c	/^void check_minmax() {$/;"	f
check_rangeptrbuf	libowfat/test/range.c	/^void check_rangeptrbuf() {$/;"	f
check_resume	libtorrent/include/libtorrent/operations.hpp	/^		check_resume,$/;"	m	class:libtorrent::operation_t
checking_files	libtorrent/include/libtorrent/torrent_status.hpp	/^			checking_files,$/;"	e	enum:libtorrent::torrent_status::state_t
checking_mem_usage	libtorrent/include/libtorrent/settings_pack.hpp	/^			checking_mem_usage,$/;"	e	enum:libtorrent::settings_pack::int_types
checking_resume_data	libtorrent/include/libtorrent/torrent_status.hpp	/^			checking_resume_data$/;"	e	enum:libtorrent::torrent_status::state_t
child	include/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
child	libowfat/critbit/critbit.c	/^  void* child[2];$/;"	m	struct:__anon27	file:
child	libowfat/test/fdpassing.c	/^void child(int64 fd) {$/;"	f
children	src/ot_stats.c	/^  stats_network_node *children[STATS_NETWORK_NODE_COUNT];$/;"	m	union:stats_network_node	file:
choked	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t choked = 1_bit;$/;"	m	struct:libtorrent::peer_info
choked_piece_requests	libtorrent/include/libtorrent/performance_counters.hpp	/^			choked_piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
choking_algorithm	libtorrent/include/libtorrent/settings_pack.hpp	/^			choking_algorithm,$/;"	e	enum:libtorrent::settings_pack::int_types
chunked_encoding	libtorrent/include/libtorrent/http_parser.hpp	/^		bool chunked_encoding() const { return m_chunked_encoding; }$/;"	f	class:libtorrent::http_parser
chunks	libtorrent/include/libtorrent/http_parser.hpp	/^		std::vector<std::pair<std::int64_t, std::int64_t>> const& chunks() const { return m_chunked_ranges; }$/;"	f	class:libtorrent::http_parser::std
clamp	libtorrent/include/libtorrent/aux_/numeric_cast.hpp	/^	T clamp(T v, T lo, T hi)$/;"	f	namespace:libtorrent::aux
class_at	libtorrent/include/libtorrent/peer_class_set.hpp	/^		peer_class_t class_at(int i) const$/;"	f	struct:libtorrent::peer_class_set
clean_deinit	src/ot_clean.c	/^void clean_deinit( void ) {$/;"	f
clean_init	src/ot_clean.c	/^void clean_init( void ) {$/;"	f
clean_single_bucket	src/ot_clean.c	/^static ssize_t clean_single_bucket( ot_peer *peers, size_t peer_count, time_t timedout, int *removed_seeders ) {$/;"	f	file:
clean_single_torrent	src/ot_clean.c	/^int clean_single_torrent( ot_torrent *torrent ) {$/;"	f
clean_worker	src/ot_clean.c	/^static void * clean_worker( void * args ) {$/;"	f	file:
cleanup	libowfat/io/iob_addbuf_free.c	/^static void cleanup(struct iob_entry* x) {$/;"	f	file:
cleanup	libowfat/io/iob_addbuf_munmap.c	/^static void cleanup(struct iob_entry* x) {$/;"	f	file:
cleanup	libowfat/io/iob_addfile_close.c	/^static void cleanup(struct iob_entry* x) {$/;"	f	file:
cleanup	libowfat/iob_internal.h	/^  void (*cleanup)(struct iob_entry* x);$/;"	m	struct:iob_entry
cleanup	libowfat/test/httpd.c	/^void cleanup(int64 socket) {$/;"	f
clear	libtorrent/include/libtorrent/bloom_filter.hpp	/^		void clear() { std::memset(bits, 0, N); }$/;"	f	struct:libtorrent::bloom_filter
clear	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		void clear()$/;"	f	struct:libtorrent::heterogeneous_queue
clear	libtorrent/include/libtorrent/kademlia/item.hpp	/^	void clear() { m_value = entry(); }$/;"	f	class:libtorrent::dht::item
clear	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	void clear()$/;"	f	struct:libtorrent::dht::ip_set
clear	libtorrent/include/libtorrent/link.hpp	/^		void clear() { index = -1; }$/;"	f	struct:libtorrent::link
clear	libtorrent/include/libtorrent/peer_class.hpp	/^		void clear()$/;"	f	struct:libtorrent::peer_class
clear	libtorrent/include/libtorrent/stat.hpp	/^		void clear()$/;"	f	class:libtorrent::stat
clear	libtorrent/include/libtorrent/stat.hpp	/^		void clear()$/;"	f	class:libtorrent::stat_channel
clear_bit	libtorrent/include/libtorrent/bitfield.hpp	/^		void clear_bit(IndexType const index)$/;"	f	namespace:libtorrent
clear_disk_cache	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr pause_flags_t clear_disk_cache = 1_bit;$/;"	m	struct:libtorrent::torrent_handle
clear_in_state_update	libtorrent/include/libtorrent/torrent.hpp	/^		void clear_in_state_update()$/;"	f	class:libtorrent::torrent
clear_outstanding_jobs	libtorrent/include/libtorrent/block_cache.hpp	/^			clear_outstanding_jobs,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
clear_piece	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, clear_piece$/;"	m	class:libtorrent::job_action_t
clear_rows	src/print.cpp	/^void clear_rows(int y1, int y2)$/;"	f
clear_screen	src/print.cpp	/^void clear_screen()$/;"	f
client	include/client.h	/^struct client$/;"	s
client	libtorrent/include/libtorrent/peer_info.hpp	/^		std::string client;$/;"	m	struct:libtorrent::peer_info
clientType	include/packet.h	/^    u8_t   clientType;          \/\/终端类型       例如 0x01: uefi 0x02:linux  0x03: windows 0x04: server$/;"	m	struct:yzy_packet
clients	src/main.c	/^struct client **clients = NULL;$/;"	v	typeref:struct:client
close	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			void close()$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
close	libtorrent/include/libtorrent/http_stream.hpp	/^	void close()$/;"	f	class:libtorrent::http_stream
close	libtorrent/include/libtorrent/http_stream.hpp	/^	void close(error_code& ec)$/;"	f	class:libtorrent::http_stream
close	libtorrent/include/libtorrent/proxy_base.hpp	/^	void close()$/;"	f	class:libtorrent::proxy_base
close	libtorrent/include/libtorrent/proxy_base.hpp	/^	void close(error_code& ec)$/;"	f	class:libtorrent::proxy_base
close	libtorrent/include/libtorrent/socks5_stream.hpp	/^	void close()$/;"	f	class:libtorrent::socks5_stream
close	libtorrent/include/libtorrent/socks5_stream.hpp	/^	void close(error_code& ec)$/;"	f	class:libtorrent::socks5_stream
close	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void close()$/;"	f	class:libtorrent::ssl_stream
close	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void close(error_code& ec)$/;"	f	class:libtorrent::ssl_stream
close	libtorrent/include/libtorrent/utp_stream.hpp	/^	void close(error_code const&) { close(); }$/;"	f	struct:libtorrent::utp_stream
close_client	src/main.c	/^void close_client(struct client *cli)$/;"	f
close_fd	src/socket.c	/^void close_fd(int fd)$/;"	f
close_file_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			close_file_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
close_logs	src/log.c	/^void close_logs()$/;"	f
close_reason_t	libtorrent/include/libtorrent/close_reason.hpp	/^	enum class close_reason_t : std::uint16_t$/;"	c	namespace:libtorrent
close_redundant_connections	libtorrent/include/libtorrent/settings_pack.hpp	/^			close_redundant_connections,$/;"	e	enum:libtorrent::settings_pack::bool_types
closed	libowfat/io_internal.h	/^  unsigned int closed:1;	\/* io_close called, but close deferred because of outstanding events *\/$/;"	m	struct:__anon40
cmd_accept	libtorrent/include/libtorrent/i2p_stream.hpp	/^		cmd_accept,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_connect	libtorrent/include/libtorrent/i2p_stream.hpp	/^		cmd_connect,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_create_session	libtorrent/include/libtorrent/i2p_stream.hpp	/^		cmd_create_session,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_incoming	libtorrent/include/libtorrent/i2p_stream.hpp	/^		cmd_incoming$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_name_lookup	libtorrent/include/libtorrent/i2p_stream.hpp	/^		cmd_name_lookup,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_none	libtorrent/include/libtorrent/i2p_stream.hpp	/^		cmd_none,$/;"	e	enum:libtorrent::i2p_stream::command_t
coalesce_buffers	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t coalesce_buffers = 6_bit;$/;"	m	namespace:libtorrent::open_mode
coalesce_reads	libtorrent/include/libtorrent/settings_pack.hpp	/^			coalesce_reads,$/;"	e	enum:libtorrent::settings_pack::bool_types
coalesce_writes	libtorrent/include/libtorrent/settings_pack.hpp	/^			coalesce_writes,$/;"	e	enum:libtorrent::settings_pack::bool_types
code_lengths_codes_incomplete	libtorrent/include/libtorrent/gzip.hpp	/^			code_lengths_codes_incomplete,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
col_black	include/print.hpp	/^	col_black = 0,$/;"	e	enum:color_code
col_blue	include/print.hpp	/^	col_blue = 4,$/;"	e	enum:color_code
col_cyan	include/print.hpp	/^	col_cyan = 6,$/;"	e	enum:color_code
col_green	include/print.hpp	/^	col_green = 2,$/;"	e	enum:color_code
col_magenta	include/print.hpp	/^	col_magenta = 5,$/;"	e	enum:color_code
col_none	include/print.hpp	/^	col_none = -1,$/;"	e	enum:color_code
col_red	include/print.hpp	/^	col_red = 1,$/;"	e	enum:color_code
col_white	include/print.hpp	/^	col_white = 7$/;"	e	enum:color_code
col_yellow	include/print.hpp	/^	col_yellow = 3,$/;"	e	enum:color_code
color	src/print.cpp	/^std::string color(std::string const& s, color_code c)$/;"	f
color_code	include/print.hpp	/^enum color_code$/;"	g
command_not_supported	libtorrent/include/libtorrent/socks5_stream.hpp	/^		command_not_supported,$/;"	e	enum:libtorrent::socks_error::socks_error_code
command_t	libtorrent/include/libtorrent/i2p_stream.hpp	/^	enum command_t$/;"	g	class:libtorrent::i2p_stream
comment	libtorrent/include/libtorrent/torrent_info.hpp	/^		const std::string& comment() const$/;"	f	class:libtorrent::torrent_info
compare_and_swap	libowfat/CAS.h	/^static inline int compare_and_swap(volatile size_t* x,size_t oldval,size_t newval) {$/;"	f
compare_torrent	src/torrent_view.cpp	/^bool compare_torrent(lt::torrent_status const* lhs, lt::torrent_status const* rhs)$/;"	f
compatible_type	libtorrent/include/libtorrent/span.hpp	/^	struct compatible_type$/;"	s	namespace:libtorrent::aux
compiletimeassert	libowfat/compiletimeassert.h	4;"	d
compiletimeassert	libowfat/libowfat/compiletimeassert.h	4;"	d
complete	libtorrent/include/libtorrent/alert_types.hpp	/^		int const complete;$/;"	m	struct:libtorrent::final
complete	libtorrent/include/libtorrent/tracker_manager.hpp	/^		int complete;$/;"	m	struct:libtorrent::tracker_response
complete_async	libtorrent/include/libtorrent/debug.hpp	/^	inline void complete_async(char const* name)$/;"	f	namespace:libtorrent
complete_sent	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER complete_sent:1;$/;"	m	struct:libtorrent::announce_entry
complete_sent	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool complete_sent : 1;$/;"	m	struct:libtorrent::announce_endpoint
completed	libtorrent/include/libtorrent/tracker_manager.hpp	/^			completed,$/;"	e	enum:libtorrent::tracker_request::event_t
completed_time	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t completed_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
completed_time	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::time_t completed_time = 0;$/;"	m	struct:libtorrent::torrent_status
cond	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable std::condition_variable cond;$/;"	m	struct:libtorrent::aux::final
confirmed	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	bool confirmed() const { return timeout_count == 0; }$/;"	f	struct:libtorrent::dht::node_entry
confirmed_supports_utp	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool confirmed_supports_utp:1;$/;"	m	struct:libtorrent::torrent_peer
connaborted_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			connaborted_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
connect	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t connect = 5_bit;$/;"	m	namespace:libtorrent::alert_category
connect	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			connect = 1,$/;"	m	class:libtorrent::bt_peer_connection::hp_message
connect	libtorrent/include/libtorrent/operations.hpp	/^		connect,$/;"	m	class:libtorrent::operation_t
connect	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^			connect,$/;"	m	class:libtorrent::udp_tracker_connection::action_t
connect_candidates	libtorrent/include/libtorrent/torrent_status.hpp	/^		int connect_candidates = 0;$/;"	m	struct:libtorrent::torrent_status
connect_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t connect_notification = 5_bit;$/;"	m	class:libtorrent::alert
connect_seed_every_n_download	libtorrent/include/libtorrent/settings_pack.hpp	/^			connect_seed_every_n_download,$/;"	e	enum:libtorrent::settings_pack::int_types
connect_server	src/socket.c	/^int connect_server(int fd, const char *ip, int port, int count)$/;"	f
connect_timeout	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int connect_timeout() const { return m_sett.get_int(settings_pack::utp_connect_timeout); }$/;"	f	struct:libtorrent::utp_socket_manager
connect_timeouts	libtorrent/include/libtorrent/performance_counters.hpp	/^			connect_timeouts,$/;"	e	enum:libtorrent::counters::stats_counter_t
connect_tracker	sync_daemon.pl	/^sub connect_tracker {$/;"	s
connectable	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool connectable:1;$/;"	m	struct:libtorrent::torrent_peer
connected	libowfat/test/proxy.c	/^  int connected;$/;"	m	struct:state	file:
connected	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void connected(error_code const& e, std::shared_ptr<handler_type> h)$/;"	f	class:libtorrent::ssl_stream
connected_time	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point connected_time() const { return m_connect; }$/;"	f	class:libtorrent::peer_connection
connecting	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t connecting = 7_bit;$/;"	m	struct:libtorrent::peer_info
connection	libtorrent/include/libtorrent/torrent_peer.hpp	/^		peer_connection_interface* connection;$/;"	m	struct:libtorrent::torrent_peer
connection_attempt_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			connection_attempt_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
connection_attempts	libtorrent/include/libtorrent/performance_counters.hpp	/^			connection_attempts,$/;"	e	enum:libtorrent::counters::stats_counter_t
connection_cache_entry	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		struct connection_cache_entry$/;"	s	class:libtorrent::udp_tracker_connection
connection_close	libtorrent/include/libtorrent/http_parser.hpp	/^		bool connection_close() const { return m_connection_close; }$/;"	f	class:libtorrent::http_parser
connection_id	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^			std::int64_t connection_id;$/;"	m	struct:libtorrent::udp_tracker_connection::connection_cache_entry
connection_id	libtorrent/include/libtorrent/utp_stream.hpp	/^	be_uint16 connection_id;$/;"	m	struct:libtorrent::utp_header
connection_limit_factor	libtorrent/include/libtorrent/peer_class.hpp	/^		int connection_limit_factor;$/;"	m	struct:libtorrent::peer_class
connection_limit_factor	libtorrent/include/libtorrent/peer_class.hpp	/^		int connection_limit_factor;$/;"	m	struct:libtorrent::peer_class_info
connection_speed	libtorrent/include/libtorrent/settings_pack.hpp	/^			connection_speed,$/;"	e	enum:libtorrent::settings_pack::int_types
connection_timer	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^			deadline_timer connection_timer;$/;"	m	struct:libtorrent::dht::final::tracker_node
connection_type	libtorrent/include/libtorrent/peer_connection.hpp	/^	enum class connection_type : std::uint8_t$/;"	c	namespace:libtorrent
connection_type	libtorrent/include/libtorrent/peer_info.hpp	/^		int connection_type;$/;"	m	struct:libtorrent::peer_info
connection_type_t	libtorrent/include/libtorrent/peer_info.hpp	/^		enum connection_type_t$/;"	g	struct:libtorrent::peer_info
connections_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			connections_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
connections_limit	libtorrent/include/libtorrent/torrent_status.hpp	/^		int connections_limit = 0;$/;"	m	struct:libtorrent::torrent_status
connections_slack	libtorrent/include/libtorrent/settings_pack.hpp	/^			connections_slack,$/;"	e	enum:libtorrent::settings_pack::int_types
connectqueued	libowfat/io_internal.h	/^  unsigned int connectqueued:2;$/;"	m	struct:__anon40
connrefused_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			connrefused_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
connreset_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			connreset_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
const_iterator	libtorrent/include/libtorrent/bitfield.hpp	/^			const_iterator(std::uint32_t const* ptr, int offset)$/;"	f	struct:libtorrent::bitfield::const_iterator
const_iterator	libtorrent/include/libtorrent/bitfield.hpp	/^		struct const_iterator$/;"	s	struct:libtorrent::bitfield
construct_dict	libtorrent/include/libtorrent/lazy_entry.hpp	/^		void construct_dict(char const* begin)$/;"	f	struct:libtorrent::lazy_entry
construct_int	libtorrent/include/libtorrent/lazy_entry.hpp	/^		void construct_int(char const* start, int const length)$/;"	f	struct:libtorrent::lazy_entry
construct_list	libtorrent/include/libtorrent/lazy_entry.hpp	/^		void construct_list(char const* begin)$/;"	f	struct:libtorrent::lazy_entry
cont	libtorrent/include/libtorrent/error_code.hpp	/^			cont = 100,$/;"	e	enum:libtorrent::errors::http_errors
container_wrapper	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^		explicit container_wrapper(Base&& b) : Base(std::move(b)) {}$/;"	f	struct:libtorrent::aux::container_wrapper
container_wrapper	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^	struct container_wrapper : Base$/;"	s	namespace:libtorrent::aux
content_length	libtorrent/include/libtorrent/http_parser.hpp	/^		std::int64_t content_length() const { return m_content_length; }$/;"	f	class:libtorrent::http_parser
content_range	libtorrent/include/libtorrent/http_parser.hpp	/^		std::pair<std::int64_t, std::int64_t> content_range() const$/;"	f	class:libtorrent::http_parser
context_switches	libtorrent/include/libtorrent/debug.hpp	/^		std::uint64_t context_switches;$/;"	m	struct:libtorrent::wakeup_t
contiguous_recv_buffer	libtorrent/include/libtorrent/settings_pack.hpp	/^			contiguous_recv_buffer TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
control_url	libtorrent/include/libtorrent/upnp.hpp	/^		std::string control_url;$/;"	m	struct:libtorrent::final::rootdevice
control_url	libtorrent/include/libtorrent/upnp.hpp	/^	std::string control_url;$/;"	m	struct:libtorrent::parse_state
conversionOK	libtorrent/include/libtorrent/ConvertUTF.h	/^	conversionOK,     \/* conversion successful *\/$/;"	e	enum:ConversionResult
conversion_ok	libtorrent/include/libtorrent/utf8.hpp	/^			conversion_ok,$/;"	e	enum:libtorrent::utf8_errors::error_code_enum
convert_from_native	libtorrent/include/libtorrent/aux_/escape_string.hpp	/^	inline std::string const& convert_from_native(std::string const& s) { return s; }$/;"	f	class:libtorrent::std
convert_to_native	libtorrent/include/libtorrent/aux_/escape_string.hpp	/^	inline std::string const& convert_to_native(std::string const& s) { return s; }$/;"	f	class:libtorrent::std
cookie	libowfat/buffer.h	/^  void* cookie;			\/* used internally by the to-stralloc buffers, and for buffer chaining *\/$/;"	m	struct:buffer
cookie	libowfat/io_internal.h	/^  void* cookie;$/;"	m	struct:__anon40
cookie	libowfat/io_internal.h	/^  void* cookie;$/;"	m	struct:iom_entry
cookie	libowfat/libowfat/buffer.h	/^  void* cookie;			\/* used internally by the to-stralloc buffers, and for buffer chaining *\/$/;"	m	struct:buffer
cookie	libtorrent/include/libtorrent/aux_/block_cache_reference.hpp	/^		std::int32_t cookie = none;$/;"	m	struct:libtorrent::aux::block_cache_reference
copy_ptr	libtorrent/include/libtorrent/copy_ptr.hpp	/^		copy_ptr(copy_ptr const& p): m_ptr(p.m_ptr ? new T(*p.m_ptr) : nullptr) {}$/;"	f	struct:libtorrent::copy_ptr
copy_ptr	libtorrent/include/libtorrent/copy_ptr.hpp	/^		explicit copy_ptr(T* t): m_ptr(t) {}$/;"	f	struct:libtorrent::copy_ptr
copy_ptr	libtorrent/include/libtorrent/copy_ptr.hpp	/^	struct copy_ptr$/;"	s	namespace:libtorrent
cork	libtorrent/include/libtorrent/peer_connection.hpp	/^		explicit cork(peer_connection& p): m_pc(p)$/;"	f	struct:libtorrent::cork
cork	libtorrent/include/libtorrent/peer_connection.hpp	/^	struct cork$/;"	s	namespace:libtorrent
corrupt	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t corrupt;$/;"	m	struct:libtorrent::tracker_request
corrupt_pieces	libtorrent/include/libtorrent/close_reason.hpp	/^		corrupt_pieces,$/;"	m	class:libtorrent::close_reason_t
count	libowfat/cdb_make.h	/^  uint32 count[256];$/;"	m	struct:cdb_make
count	libowfat/libowfat/cdb_make.h	/^  uint32 count[256];$/;"	m	struct:cdb_make
count	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^			int count;$/;"	m	struct:libtorrent::dht::dos_blocker::node_ban_entry
count	libtorrent/include/libtorrent/sha1.hpp	/^		std::uint32_t count[2];$/;"	m	struct:libtorrent::sha1_ctx
counter	libtorrent/include/libtorrent/session_stats.hpp	/^		counter, gauge$/;"	m	class:libtorrent::metric_type_t
counter	libtorrent/include/libtorrent/stat.hpp	/^		std::int32_t counter() const { return m_counter; }$/;"	f	class:libtorrent::stat_channel
counters	libtorrent/include/libtorrent/performance_counters.hpp	/^	struct TORRENT_EXTRA_EXPORT counters$/;"	s	namespace:libtorrent
counters	src/ot_stats.c	/^  size_t              counters[STATS_NETWORK_NODE_COUNT];$/;"	m	union:stats_network_node	file:
cppobj	Makefile	/^cppobj = torrent.o #client_test.o session_view.o torrent_view.o print.o $/;"	m
crc32	libowfat/test/uudecode.c	/^uint32_t crc32(uint32_t crc, const char* buf, unsigned int len) {$/;"	f
crc_table	libowfat/test/uudecode.c	/^static const uint32_t crc_table[256] = {$/;"	v	file:
create	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		HCRYPTHASH create()$/;"	f	struct:libtorrent::aux::crypt_hash
create_packet	libtorrent/include/libtorrent/packet_pool.hpp	/^	inline packet_ptr create_packet(int const size)$/;"	f	namespace:libtorrent
create_reference	src/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:
create_tcp	src/socket.c	/^int create_tcp()$/;"	f
create_torrent	libtorrent/include/libtorrent/create_torrent.hpp	/^	struct TORRENT_EXPORT create_torrent$/;"	s	namespace:libtorrent
created	libtorrent/include/libtorrent/error_code.hpp	/^			created = 201,$/;"	e	enum:libtorrent::errors::http_errors
creation_date	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::time_t creation_date() const$/;"	f	class:libtorrent::torrent_info
creator	libtorrent/include/libtorrent/torrent_info.hpp	/^		const std::string& creator() const$/;"	f	class:libtorrent::torrent_info
critbit0_allprefixed	libowfat/critbit/critbit.c	/^int critbit0_allprefixed(critbit0_tree* t,const char* prefix,int(*handle)(const char*,void*),void* arg) {$/;"	f
critbit0_clear	libowfat/critbit/critbit.c	/^void critbit0_clear(critbit0_tree* t) {$/;"	f
critbit0_contains	libowfat/critbit/critbit.c	/^int critbit0_contains(critbit0_tree* t,const char* u) {$/;"	f
critbit0_delete	libowfat/critbit/critbit.c	/^int critbit0_delete(critbit0_tree* t,const char* u) {$/;"	f
critbit0_insert	libowfat/critbit/critbit.c	/^int critbit0_insert(critbit0_tree* t,const char* u) {$/;"	f
critbit0_node	libowfat/critbit/critbit.c	/^} critbit0_node;$/;"	t	typeref:struct:__anon27	file:
critbit0_tree	libowfat/critbit.h	/^} critbit0_tree;$/;"	t	typeref:struct:__anon32
critbit0_tree	libowfat/libowfat/critbit.h	/^} critbit0_tree;$/;"	t	typeref:struct:__anon38
critical	libtorrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
crypt_acquire_provider	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^	inline HCRYPTPROV crypt_acquire_provider(DWORD provider_type)$/;"	f	namespace:libtorrent::aux
crypt_gen_random	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^	inline void crypt_gen_random(span<char> buffer)$/;"	f	namespace:libtorrent::aux
crypt_hash	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		crypt_hash() { m_hash = create(); }$/;"	f	struct:libtorrent::aux::crypt_hash
crypt_hash	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		crypt_hash(crypt_hash const& h) { m_hash = duplicate(h); }$/;"	f	struct:libtorrent::aux::crypt_hash
crypt_hash	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^	struct crypt_hash$/;"	s	namespace:libtorrent::aux
crypto_cut	libtorrent/include/libtorrent/receive_buffer.hpp	/^	void crypto_cut(int size, int packet_size)$/;"	f	struct:libtorrent::crypto_receive_buffer
crypto_packet_finished	libtorrent/include/libtorrent/receive_buffer.hpp	/^	bool crypto_packet_finished() const$/;"	f	struct:libtorrent::crypto_receive_buffer
crypto_packet_size	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int crypto_packet_size() const$/;"	f	struct:libtorrent::crypto_receive_buffer
crypto_plugin	libtorrent/include/libtorrent/extensions.hpp	/^	struct TORRENT_EXPORT crypto_plugin$/;"	s	namespace:libtorrent
crypto_receive_buffer	libtorrent/include/libtorrent/receive_buffer.hpp	/^	explicit crypto_receive_buffer(receive_buffer& next)$/;"	f	struct:libtorrent::crypto_receive_buffer
crypto_receive_buffer	libtorrent/include/libtorrent/receive_buffer.hpp	/^struct crypto_receive_buffer$/;"	s	namespace:libtorrent
ctime	libtorrent/include/libtorrent/aux_/path.hpp	/^		std::uint64_t ctime = 0;$/;"	m	struct:libtorrent::file_status
ctrace	libtorrent/include/libtorrent/aux_/route.h	/^typedef struct ctrace {$/;"	s
ctrace_t	libtorrent/include/libtorrent/aux_/route.h	/^} ctrace_t;$/;"	t	typeref:struct:ctrace
ctx	libowfat/io.h	/^  int ctx;$/;"	m	struct:iomux
ctx	libowfat/libowfat/io.h	/^  int ctx;$/;"	m	struct:iomux
cumulative_hash_time	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int cumulative_hash_time;$/;"	m	struct:libtorrent::cache_status
cumulative_job_time	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int cumulative_job_time;$/;"	m	struct:libtorrent::cache_status
cumulative_read_time	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int cumulative_read_time;$/;"	m	struct:libtorrent::cache_status
cumulative_write_time	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int cumulative_write_time;$/;"	m	struct:libtorrent::cache_status
cur	libowfat/ent.c	/^}* root,** cur=&root;$/;"	v	typeref:struct:entity
curlen	libtorrent/include/libtorrent/sha512.hpp	/^		std::size_t curlen;$/;"	m	struct:libtorrent::sha512_ctx
current_time	src/main.c	/^time_t current_time;$/;"	v
current_time	src/test.c	/^time_t current_time;$/;"	v
current_tracker	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::string current_tracker;$/;"	m	struct:libtorrent::torrent_status
curserver	libowfat/dns.h	/^  unsigned int curserver;$/;"	m	struct:dns_transmit
curserver	libowfat/libowfat/dns.h	/^  unsigned int curserver;$/;"	m	struct:dns_transmit
cursor	libtorrent/include/libtorrent/packet_buffer.hpp	/^		index_type cursor() const { return m_first; }$/;"	f	class:libtorrent::packet_buffer
cursor	libtorrent/include/libtorrent/piece_picker.hpp	/^		piece_index_t cursor() const { return m_cursor; }$/;"	f	class:libtorrent::piece_picker
cwnd_reduce_timer	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int cwnd_reduce_timer() const { return m_sett.get_int(settings_pack::utp_cwnd_reduce_timer); }$/;"	f	struct:libtorrent::utp_socket_manager
d	libowfat/ent.c	/^struct letters* d;$/;"	v	typeref:struct:letters
d	libtorrent/include/libtorrent/disk_io_job.hpp	/^		} d;$/;"	m	struct:libtorrent::disk_io_job	typeref:union:libtorrent::disk_io_job::un
data	include/ot_accesslist.h	/^  uint8_t *data;$/;"	m	struct:ot_log
data	include/ot_vector.h	/^  void   *data;$/;"	m	struct:__anon17
data	include/trackerlogic.h	/^  uint8_t data[OT_IP_SIZE+2+2];$/;"	m	struct:__anon22
data	libowfat/dns/dns_rcip.c	/^static stralloc data;$/;"	v	file:
data	libowfat/dns/dns_rcrw.c	/^static stralloc data;$/;"	v	file:
data	libowfat/ent.c	/^char* data;$/;"	v
data	libowfat/entities.h	/^  char data[8115];$/;"	m	struct:__anon42
data	libowfat/iarray.h	/^  char data[];$/;"	m	struct:_iarray_page
data	libowfat/libowfat/iarray.h	/^  char data[];$/;"	m	struct:_iarray_page
data	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^		char const* data(Protocol const&) const { return m_value; }$/;"	f	struct:libtorrent::aux::bind_to_device
data	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		char const* data(Protocol const&) const { return reinterpret_cast<char const*>(&m_value); }$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
data	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		char const* data(Protocol const&) const { return reinterpret_cast<char const*>(&m_value); }$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
data	libtorrent/include/libtorrent/buffer.hpp	/^	char const* data() const { return m_begin; }$/;"	f	class:libtorrent::buffer
data	libtorrent/include/libtorrent/buffer.hpp	/^	char* data() { return m_begin; }$/;"	f	class:libtorrent::buffer
data	libtorrent/include/libtorrent/entry.hpp	/^		>::type data;$/;"	m	class:libtorrent::entry
data	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	void set_data(item const& data) = delete;$/;"	m	struct:libtorrent::dht::put_data
data	libtorrent/include/libtorrent/netlink.hpp	/^		const data_type* data() const$/;"	f	class:libtorrent::basic_nl_endpoint
data	libtorrent/include/libtorrent/netlink.hpp	/^		data_type* data()$/;"	f	class:libtorrent::basic_nl_endpoint
data	libtorrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::dont_fragment
data	libtorrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::exclusive_address_use
data	libtorrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::no_enobufs
data	libtorrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::tcp_notsent_lowat
data	libtorrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::traffic_class
data	libtorrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::v6_protection_level
data	libtorrent/include/libtorrent/socket.hpp	/^		tos_t const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::type_of_service
data	libtorrent/include/libtorrent/udp_socket.hpp	/^			span<char> data;$/;"	m	struct:libtorrent::udp_socket::packet
dataSize	include/packet.h	/^    u32_t  dataSize;            \/\/数据域大小     例如 0x00001000$/;"	m	struct:yzy_packet
dataType	include/packet.h	/^    u8_t   dataType;            \/\/数据段类型      例如 ox00:二进制数据 0x01:json 0x02:protobuf$/;"	m	struct:yzy_packet
data_buf	include/client.h	/^    unsigned char *data_buf;$/;"	m	struct:client
data_did_not_terminate	libtorrent/include/libtorrent/gzip.hpp	/^			data_did_not_terminate,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
data_size	include/client.h	/^    int data_size;$/;"	m	struct:client
data_size	libtorrent/include/libtorrent/kademlia/node.hpp	/^	int data_size() const { return int(m_storage.num_torrents()); }$/;"	f	class:libtorrent::dht::node
data_t	libtorrent/include/libtorrent/lazy_entry.hpp	/^		union data_t$/;"	u	struct:libtorrent::lazy_entry
data_type	libtorrent/include/libtorrent/entry.hpp	/^		enum data_type$/;"	g	class:libtorrent::entry
datasize	libowfat/ent.c	/^size_t nodes,datasize;$/;"	v
day_tab	src/tools.c	/^const char day_tab[] = "Sun,Mon,Tue,Wed,Thu,Fri,Sat,";$/;"	v
deadline	libowfat/dns.h	/^  struct taia deadline;$/;"	m	struct:dns_transmit	typeref:struct:dns_transmit::taia
deadline	libowfat/dns/dns_rcip.c	/^static struct taia deadline;$/;"	v	typeref:struct:taia	file:
deadline	libowfat/dns/dns_rcrw.c	/^static struct taia deadline;$/;"	v	typeref:struct:taia	file:
deadline	libowfat/libowfat/dns.h	/^  struct taia deadline;$/;"	m	struct:dns_transmit	typeref:struct:dns_transmit::taia
deadline	libtorrent/include/libtorrent/torrent.hpp	/^		time_point deadline;$/;"	m	struct:libtorrent::time_critical_piece
debug	libtorrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
debug_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t TORRENT_DEPRECATED_MEMBER debug_notification = connect_notification;$/;"	m	class:libtorrent::alert
debug_printf	libowfat/io_internal.h	135;"	d
debugbuf	include/trackerlogic.h	/^  char    *debugbuf;$/;"	m	struct:ot_workstruct
dec	libowfat/textcode/scan_base64.c	/^static inline int dec(unsigned char x) {$/;"	f	file:
dec	libowfat/textcode/scan_base64url.c	/^static inline int dec(unsigned char x) {$/;"	f	file:
dec	libtorrent/include/libtorrent/bitfield.hpp	/^			void dec()$/;"	f	struct:libtorrent::bitfield::const_iterator
dec_num_connecting	libtorrent/include/libtorrent/torrent.hpp	/^		void dec_num_connecting(torrent_peer* pp)$/;"	f	class:libtorrent::torrent
dec_refcount	libtorrent/include/libtorrent/storage.hpp	/^		int dec_refcount()$/;"	f	struct:libtorrent::storage_interface
decay	libtorrent/include/libtorrent/packet_pool.hpp	/^		void decay()$/;"	f	struct:libtorrent::packet_pool
decay	libtorrent/include/libtorrent/packet_pool.hpp	/^		void decay()$/;"	f	struct:libtorrent::packet_slab
decay	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		void decay() { m_packet_pool.decay(); }$/;"	f	struct:libtorrent::utp_socket_manager
decltype	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^			decltype(auto)$/;"	f	struct:libtorrent::aux::container_wrapper
decltype	libtorrent/include/libtorrent/aux_/unique_ptr.hpp	/^			decltype(auto)$/;"	f	struct:libtorrent::aux::unique_ptr
decltype	libtorrent/include/libtorrent/vector_utils.hpp	/^		-> decltype(container.begin())$/;"	f	namespace:libtorrent
decrease_est_reciprocation_rate	libtorrent/include/libtorrent/settings_pack.hpp	/^			decrease_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
defaul_signal_handlers	src/opentracker.c	/^static void defaul_signal_handlers( void ) {$/;"	f	file:
default_block_size	libtorrent/include/libtorrent/disk_interface.hpp	/^	constexpr int default_block_size = 0x4000;$/;"	m	namespace:libtorrent
default_cache_min_age	libtorrent/include/libtorrent/settings_pack.hpp	/^			default_cache_min_age TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
default_est_reciprocation_rate	libtorrent/include/libtorrent/settings_pack.hpp	/^			default_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
default_flags	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t default_flags =$/;"	m	namespace:libtorrent::torrent_flags
default_max_bottled_buffer_size	libtorrent/include/libtorrent/http_connection.hpp	/^constexpr int default_max_bottled_buffer_size = 2 * 1024 * 1024;$/;"	m	namespace:libtorrent
default_storage	libtorrent/include/libtorrent/storage.hpp	/^	class TORRENT_EXPORT default_storage : public storage_interface$/;"	c	namespace:libtorrent
defermode	libowfat/libowfat/socket.h	/^enum defermode {$/;"	g
defermode	libowfat/socket.h	/^enum defermode {$/;"	g
deferred_handler	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^struct deferred_handler$/;"	s	namespace:libtorrent::aux
deinit	libowfat/buffer.h	/^  void (*deinit)(void*);	\/* called to munmap\/free cleanup, with a pointer to the buffer as argument *\/$/;"	m	struct:buffer
deinit	libowfat/libowfat/buffer.h	/^  void (*deinit)(void*);	\/* called to munmap\/free cleanup, with a pointer to the buffer as argument *\/$/;"	m	struct:buffer
delete_files	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, delete_files$/;"	m	class:libtorrent::job_action_t
delete_files	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr remove_flags_t delete_files = 0_bit;$/;"	m	struct:libtorrent::session_handle
delete_partfile	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr remove_flags_t delete_partfile = 1_bit;$/;"	m	struct:libtorrent::session_handle
deprecated_estimated_reciprocation_rate	libtorrent/include/libtorrent/peer_info.hpp	/^		int deprecated_estimated_reciprocation_rate;$/;"	m	struct:libtorrent::peer_info
deprecated_move_flags_t	libtorrent/include/libtorrent/storage_defs.hpp	/^	enum deprecated_move_flags_t$/;"	g	namespace:libtorrent
depth_exceeded	libtorrent/include/libtorrent/bdecode.hpp	/^		depth_exceeded,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
depth_exceeded	libtorrent/include/libtorrent/error_code.hpp	/^			depth_exceeded,$/;"	e	enum:libtorrent::errors::error_code_enum
desired_queue_size	libtorrent/include/libtorrent/peer_connection.hpp	/^		int desired_queue_size() const$/;"	f	class:libtorrent::peer_connection
destination	libtorrent/include/libtorrent/enum_net.hpp	/^		address destination;$/;"	m	struct:libtorrent::ip_route
destination	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::string const& destination() { return m_dest; }$/;"	f	class:libtorrent::i2p_stream::std
destination	libtorrent/include/libtorrent/torrent_peer.hpp	/^		aux::string_ptr destination;$/;"	m	struct:libtorrent::i2p_peer
destruct_holder	libtorrent/include/libtorrent/chained_buffer.hpp	/^			destruct_holder_fun destruct_holder;$/;"	m	struct:libtorrent::chained_buffer
destructing_torrent	libtorrent/include/libtorrent/error_code.hpp	/^			destructing_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
detail	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^      namespace detail {$/;"	n	namespace:boost::multiprecision
detail	libtorrent/include/libtorrent/bdecode.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	libtorrent/include/libtorrent/bencode.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	libtorrent/include/libtorrent/create_torrent.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	libtorrent/include/libtorrent/entry.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	libtorrent/include/libtorrent/io.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	libtorrent/include/libtorrent/ip_filter.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	libtorrent/include/libtorrent/socket_io.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
dev_random	libtorrent/include/libtorrent/aux_/dev_random.hpp	/^		dev_random()$/;"	f	struct:libtorrent::aux::dev_random
dev_random	libtorrent/include/libtorrent/aux_/dev_random.hpp	/^	struct dev_random$/;"	s	namespace:libtorrent::aux
device	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::string device;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
device	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		std::string device;$/;"	m	struct:libtorrent::aux::listen_socket_t
device	libtorrent/include/libtorrent/string_util.hpp	/^		std::string device;$/;"	m	struct:libtorrent::listen_interface_t
devices	libtorrent/include/libtorrent/upnp.hpp	/^		std::set<rootdevice> devices;$/;"	m	struct:libtorrent::final::upnp_state_t
dh_key_exchange	libtorrent/include/libtorrent/pe_crypto.hpp	/^	class TORRENT_EXTRA_EXPORT dh_key_exchange$/;"	c	namespace:libtorrent
dht	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t dht = 10_bit;$/;"	m	namespace:libtorrent::alert_category
dht	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/fwd.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/announce_flags.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/dht_state.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^			node dht;$/;"	m	struct:libtorrent::dht::final::tracker_node
dht	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/direct_request.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/ed25519.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/io.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/item.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/msg.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/node.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/node_id.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/observer.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/refresh.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^namespace libtorrent { namespace dht$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/kademlia/types.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t dht = 1_bit;$/;"	m	struct:libtorrent::peer_info
dht_active_requests	src/client_test.cpp	/^std::vector<lt::dht_lookup> dht_active_requests;$/;"	v
dht_allocated_observers	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_allocated_observers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_announce_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			dht_announce_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
dht_announce_peer_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_announce_peer_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_announce_peer_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_announce_peer_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_bootstrap_nodes	libtorrent/include/libtorrent/settings_pack.hpp	/^			dht_bootstrap_nodes,$/;"	e	enum:libtorrent::settings_pack::string_types
dht_bytes_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_bytes_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_bytes_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_bytes_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_download_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int dht_download_rate;$/;"	m	struct:libtorrent::session_status
dht_find_node_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_find_node_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_find_node_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_find_node_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_get_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_get_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_peers_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_get_peers_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_peers_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_get_peers_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_global_nodes	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t dht_global_nodes;$/;"	m	struct:libtorrent::session_status
dht_immutable_data	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_immutable_data,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_invalid_announce	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_announce,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_find_node	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_find_node,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_get	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_get,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_get_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_get_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_put	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_put,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_sample_infohashes	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_sample_infohashes,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_log	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t dht_log = 17_bit;$/;"	m	namespace:libtorrent::alert_category
dht_log_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t dht_log_notification = 17_bit;$/;"	m	class:libtorrent::alert
dht_logger	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^	struct TORRENT_EXTRA_EXPORT dht_logger$/;"	s	namespace:libtorrent::dht
dht_messages_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_messages_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_messages_in_dropped	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_messages_in_dropped,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_messages_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_messages_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_messages_out_dropped	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_messages_out_dropped,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_mutable_data	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_mutable_data,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_node_cache	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_node_cache,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_node_cache	libtorrent/include/libtorrent/session_status.hpp	/^		int dht_node_cache;$/;"	m	struct:libtorrent::session_status
dht_nodes	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<std::pair<std::string, int>>> dht_nodes;$/;"	m	struct:libtorrent::add_torrent_params
dht_nodes	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_nodes,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_nodes	libtorrent/include/libtorrent/session_status.hpp	/^		int dht_nodes;$/;"	m	struct:libtorrent::session_status
dht_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t dht_notification = 10_bit;$/;"	m	class:libtorrent::alert
dht_observer	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^	struct TORRENT_EXTRA_EXPORT dht_observer : dht_logger$/;"	s	namespace:libtorrent::dht
dht_operation	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t dht_operation = 18_bit;$/;"	m	namespace:libtorrent::alert_category
dht_operation_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t dht_operation_notification = 18_bit;$/;"	m	class:libtorrent::alert
dht_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_ping_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_ping_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_ping_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_ping_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_prefer_verified_node_ids	libtorrent/include/libtorrent/settings_pack.hpp	/^			dht_prefer_verified_node_ids,$/;"	e	enum:libtorrent::settings_pack::bool_types
dht_put_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_put_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_put_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_put_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_request_feature	libtorrent/include/libtorrent/extensions.hpp	/^		static constexpr feature_flags_t dht_request_feature = 3_bit;$/;"	m	struct:libtorrent::plugin
dht_routing_bucket	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT dht_routing_bucket$/;"	s	namespace:libtorrent
dht_routing_table	libtorrent/include/libtorrent/session_status.hpp	/^		std::vector<dht_routing_bucket> dht_routing_table;$/;"	m	struct:libtorrent::session_status
dht_routing_table	src/client_test.cpp	/^std::vector<lt::dht_routing_bucket> dht_routing_table;$/;"	v
dht_sample_infohashes_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_sample_infohashes_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_sample_infohashes_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_sample_infohashes_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_settings	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^	struct TORRENT_EXPORT dht_settings$/;"	s	namespace:libtorrent::dht
dht_settings	libtorrent/include/libtorrent/session.hpp	/^		dht::dht_settings dht_settings;$/;"	m	struct:libtorrent::session_params
dht_state	libtorrent/include/libtorrent/kademlia/dht_state.hpp	/^	struct TORRENT_EXPORT dht_state$/;"	s	namespace:libtorrent::dht
dht_state	libtorrent/include/libtorrent/session.hpp	/^		dht::dht_state dht_state;$/;"	m	struct:libtorrent::session_params
dht_storage_constructor	libtorrent/include/libtorrent/session.hpp	/^		dht::dht_storage_constructor_type dht_storage_constructor;$/;"	m	struct:libtorrent::session_params
dht_storage_counters	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^	struct TORRENT_EXPORT dht_storage_counters$/;"	s	namespace:libtorrent::dht
dht_storage_interface	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^	struct TORRENT_EXPORT dht_storage_interface$/;"	s	namespace:libtorrent::dht
dht_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			dht_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_torrents	libtorrent/include/libtorrent/session_status.hpp	/^		int dht_torrents;$/;"	m	struct:libtorrent::session_status
dht_total_allocations	libtorrent/include/libtorrent/session_status.hpp	/^		int dht_total_allocations;$/;"	m	struct:libtorrent::session_status
dht_upload_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int dht_upload_rate;$/;"	m	struct:libtorrent::session_status
dht_upload_rate_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			dht_upload_rate_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
dict	libtorrent/include/libtorrent/bdecode.hpp	/^	{ none, dict, list, string, integer, end };$/;"	m	struct:libtorrent::detail::bdecode_token	typeref:enum:libtorrent::detail::bdecode_token::
dict	libtorrent/include/libtorrent/lazy_entry.hpp	/^			lazy_dict_entry* dict;$/;"	m	union:libtorrent::lazy_entry::data_t
dict_find	libtorrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry const* dict_find(char const* name) const$/;"	f	struct:libtorrent::lazy_entry
dict_find	libtorrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry const* dict_find(std::string const& name) const$/;"	f	struct:libtorrent::lazy_entry
dict_size	libtorrent/include/libtorrent/lazy_entry.hpp	/^		int dict_size() const$/;"	f	struct:libtorrent::lazy_entry
dict_t	libtorrent/include/libtorrent/bdecode.hpp	/^		dict_t,$/;"	e	enum:bdecode_node::type_t
dict_t	libtorrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
dictionary_t	libtorrent/include/libtorrent/entry.hpp	/^			dictionary_t,$/;"	e	enum:libtorrent::entry::data_type
die	libowfat/errmsg.h	29;"	d
die	libowfat/libowfat/errmsg.h	29;"	d
diesys	libowfat/errmsg.h	30;"	d
diesys	libowfat/libowfat/errmsg.h	30;"	d
diet_path	libowfat/GNUmakefile	/^diet_path = $(foreach dir,$(path),$(wildcard $(dir)\/diet))$/;"	m
digest32	libtorrent/include/libtorrent/sha1_hash.hpp	/^		explicit digest32(std::string const& s)$/;"	f	class:libtorrent::digest32
digest32	libtorrent/include/libtorrent/sha1_hash.hpp	/^	class digest32$/;"	c	namespace:libtorrent
dir	libowfat/test/proxy.c	/^  enum { UNDECIDED, FORA, FORB } dir;$/;"	m	struct:state	typeref:enum:state::__anon43	file:
direct_observer	libtorrent/include/libtorrent/kademlia/direct_request.hpp	/^	direct_observer(std::shared_ptr<traversal_algorithm> algo$/;"	f	struct:libtorrent::dht::direct_observer
direct_observer	libtorrent/include/libtorrent/kademlia/direct_request.hpp	/^struct direct_observer : observer$/;"	s	namespace:libtorrent::dht
direct_traversal	libtorrent/include/libtorrent/kademlia/direct_request.hpp	/^	direct_traversal(node& node$/;"	f	struct:libtorrent::dht::direct_traversal
direct_traversal	libtorrent/include/libtorrent/kademlia/direct_request.hpp	/^struct direct_traversal : traversal_algorithm$/;"	s	namespace:libtorrent::dht
directory	libtorrent/include/libtorrent/aux_/path.hpp	/^			directory = 0x4000,  \/\/ directory$/;"	e	enum:libtorrent::file_status::__anon61
directory	libtorrent/include/libtorrent/file.hpp	/^	class TORRENT_EXTRA_EXPORT directory : public boost::noncopyable$/;"	c	namespace:libtorrent
dirty	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t dirty:1;$/;"	m	struct:libtorrent::cached_block_entry
disable_dht	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t disable_dht = 19_bit;$/;"	m	namespace:libtorrent::torrent_flags
disable_hash_checks	libtorrent/include/libtorrent/settings_pack.hpp	/^			disable_hash_checks,$/;"	e	enum:libtorrent::settings_pack::bool_types
disable_lsd	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t disable_lsd = 20_bit;$/;"	m	namespace:libtorrent::torrent_flags
disable_pex	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t disable_pex = 21_bit;$/;"	m	namespace:libtorrent::torrent_flags
disable_storage	src/client_test.cpp	/^bool disable_storage = false;$/;"	v
disabled	libtorrent/include/libtorrent/session_settings.hpp	/^			disabled$/;"	e	enum:libtorrent::pe_settings::enc_policy
disabled	libtorrent/include/libtorrent/upnp.hpp	/^		bool disabled = false;$/;"	m	struct:libtorrent::final::rootdevice
disallow	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		void disallow(socket_type_t const st, peer_class_t const peer_class)$/;"	f	namespace:libtorrent
disallow_ghost	libtorrent/include/libtorrent/block_cache.hpp	/^			disallow_ghost$/;"	e	enum:libtorrent::block_cache::eviction_mode
disarm	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^		void disarm() { m_armed = false; }$/;"	f	struct:libtorrent::aux::scope_end_impl
discardable	libtorrent/include/libtorrent/alert.hpp	/^		bool discardable() const { return discardable_impl(); }$/;"	f	class:libtorrent::alert
discardable_impl	libtorrent/include/libtorrent/alert.hpp	/^		virtual bool discardable_impl() const { return true; }$/;"	f	class:libtorrent::alert
disconnected_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			disconnected_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
disk_blocks_in_use	libtorrent/include/libtorrent/performance_counters.hpp	/^			disk_blocks_in_use,$/;"	e	enum:libtorrent::counters::stats_gauge_t
disk_buffer_holder	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_buffer_holder$/;"	s	namespace:libtorrent
disk_buffer_pool	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_buffer_pool$/;"	s	namespace:libtorrent
disk_cache_no_pieces	libtorrent/include/libtorrent/session_handle.hpp	/^		enum { disk_cache_no_pieces = 1 };$/;"	e	enum:libtorrent::session_handle::__anon59
disk_class	libtorrent/include/libtorrent/torrent.hpp	/^		enum class disk_class { none, write };$/;"	c	class:libtorrent::torrent
disk_hash_time	libtorrent/include/libtorrent/performance_counters.hpp	/^			disk_hash_time,$/;"	e	enum:libtorrent::counters::stats_counter_t
disk_interface	libtorrent/include/libtorrent/disk_interface.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_interface$/;"	s	namespace:libtorrent
disk_io_job	libtorrent/include/libtorrent/disk_io_job.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_io_job : tailqueue_node<disk_io_job>$/;"	s	namespace:libtorrent
disk_io_read_mode	libtorrent/include/libtorrent/settings_pack.hpp	/^			disk_io_read_mode,$/;"	e	enum:libtorrent::settings_pack::int_types
disk_io_thread_pool	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_io_thread_pool$/;"	s	namespace:libtorrent
disk_io_write_mode	libtorrent/include/libtorrent/settings_pack.hpp	/^			disk_io_write_mode,$/;"	e	enum:libtorrent::settings_pack::int_types
disk_job_fence	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^	struct TORRENT_EXPORT disk_job_fence$/;"	s	namespace:libtorrent::aux
disk_job_pool	libtorrent/include/libtorrent/disk_job_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_job_pool$/;"	s	namespace:libtorrent
disk_job_time	libtorrent/include/libtorrent/performance_counters.hpp	/^			disk_job_time,$/;"	e	enum:libtorrent::counters::stats_counter_t
disk_observer	libtorrent/include/libtorrent/disk_observer.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_observer$/;"	s	namespace:libtorrent
disk_read_queue	libtorrent/include/libtorrent/session_status.hpp	/^		int disk_read_queue;$/;"	m	struct:libtorrent::session_status
disk_read_time	libtorrent/include/libtorrent/performance_counters.hpp	/^			disk_read_time,$/;"	e	enum:libtorrent::counters::stats_counter_t
disk_thread	libtorrent/include/libtorrent/peer_connection.hpp	/^		disk_interface* disk_thread;$/;"	m	struct:libtorrent::peer_connection_args
disk_write_queue	libtorrent/include/libtorrent/session_status.hpp	/^		int disk_write_queue;$/;"	m	struct:libtorrent::session_status
disk_write_time	libtorrent/include/libtorrent/performance_counters.hpp	/^			disk_write_time,$/;"	e	enum:libtorrent::counters::stats_counter_t
distance_too_far_back_in_block	libtorrent/include/libtorrent/gzip.hpp	/^			distance_too_far_back_in_block,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
distribute_quota	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^	int distribute_quota;$/;"	m	struct:libtorrent::bandwidth_channel
distributed_copies	libtorrent/include/libtorrent/torrent_status.hpp	/^		float distributed_copies = 0.f;$/;"	m	struct:libtorrent::torrent_status
distributed_fraction	libtorrent/include/libtorrent/torrent_status.hpp	/^		int distributed_fraction = 0;$/;"	m	struct:libtorrent::torrent_status
distributed_full_copies	libtorrent/include/libtorrent/torrent_status.hpp	/^		int distributed_full_copies = 0;$/;"	m	struct:libtorrent::torrent_status
dlen	libowfat/cdb.h	/^  uint32 dlen; \/* initialized if cdb_findnext() returns 1 *\/$/;"	m	struct:cdb
dlen	libowfat/libowfat/cdb.h	/^  uint32 dlen; \/* initialized if cdb_findnext() returns 1 *\/$/;"	m	struct:cdb
dllobj	Makefile	/^dllobj =$/;"	m
dns_cache_entry	libtorrent/include/libtorrent/resolver.hpp	/^	struct dns_cache_entry$/;"	s	struct:libtorrent::final
dns_domain_copy	libowfat/dns/dns_domain.c	/^int dns_domain_copy(char **out,const char *in)$/;"	f
dns_domain_equal	libowfat/dns/dns_domain.c	/^int dns_domain_equal(const char *dn1,const char *dn2)$/;"	f
dns_domain_free	libowfat/dns/dns_domain.c	/^void dns_domain_free(char **out)$/;"	f
dns_domain_fromdot	libowfat/dns/dns_dfd.c	/^int dns_domain_fromdot(char **out,const char *buf,size_t n)$/;"	f
dns_domain_length	libowfat/dns/dns_domain.c	/^unsigned int dns_domain_length(const char *dn)$/;"	f
dns_domain_suffix	libowfat/dns/dns_domain.c	/^int dns_domain_suffix(const char *big,const char *little)$/;"	f
dns_domain_suffixpos	libowfat/dns/dns_domain.c	/^unsigned int dns_domain_suffixpos(const char *big,const char *little)$/;"	f
dns_domain_todot_cat	libowfat/dns/dns_dtda.c	/^int dns_domain_todot_cat(stralloc *out,const char *d)$/;"	f
dns_ip4	libowfat/dns/dns_ip.c	/^int dns_ip4(stralloc *out,const stralloc *fqdn)$/;"	f
dns_ip4_packet	libowfat/dns/dns_ip.c	/^int dns_ip4_packet(stralloc *out,const char *buf,unsigned int len)$/;"	f
dns_ip4_qualify	libowfat/dns/dns_ipq.c	/^int dns_ip4_qualify(stralloc *out,stralloc *fqdn,const stralloc *in)$/;"	f
dns_ip4_qualify_rules	libowfat/dns/dns_ipq.c	/^int dns_ip4_qualify_rules(stralloc *out,stralloc *fqdn,const stralloc *in,const stralloc *rules)$/;"	f
dns_ip6	libowfat/dns/dns_ip6.c	/^int dns_ip6(stralloc *out,stralloc *fqdn)$/;"	f
dns_ip6_packet	libowfat/dns/dns_ip6.c	/^int dns_ip6_packet(stralloc *out,const char *buf,unsigned int len) {$/;"	f
dns_ip6_packet_add	libowfat/dns/dns_ip6.c	/^static int dns_ip6_packet_add(stralloc *out,const char *buf,unsigned int len)$/;"	f	file:
dns_ip6_qualify	libowfat/dns/dns_ipq6.c	/^int dns_ip6_qualify(stralloc *out,stralloc *fqdn,const stralloc *in)$/;"	f
dns_ip6_qualify_rules	libowfat/dns/dns_ipq6.c	/^int dns_ip6_qualify_rules(stralloc *out,stralloc *fqdn,const stralloc *in,const stralloc *rules)$/;"	f
dns_mx	libowfat/dns/dns_mx.c	/^int dns_mx(stralloc *out,const stralloc *fqdn)$/;"	f
dns_mx_packet	libowfat/dns/dns_mx.c	/^int dns_mx_packet(stralloc *out,const char *buf,unsigned int len)$/;"	f
dns_name4	libowfat/dns/dns_name.c	/^int dns_name4(stralloc *out,const char ip[4])$/;"	f
dns_name4_domain	libowfat/dns/dns_nd.c	/^void dns_name4_domain(char name[DNS_NAME4_DOMAIN],const char ip[4])$/;"	f
dns_name6	libowfat/dns/dns_name.c	/^int dns_name6(stralloc *out,const char ip[16])$/;"	f
dns_name6_domain	libowfat/dns/dns_nd6.c	/^void dns_name6_domain(char name[DNS_NAME6_DOMAIN],const char ip[16])$/;"	f
dns_name6_inner	libowfat/dns/dns_name.c	/^static int dns_name6_inner(stralloc *out,const char ip[16])$/;"	f	file:
dns_name_packet	libowfat/dns/dns_name.c	/^int dns_name_packet(stralloc *out,const char *buf,unsigned int len)$/;"	f
dns_packet_copy	libowfat/dns/dns_packet.c	/^unsigned int dns_packet_copy(const char *buf,unsigned int len,unsigned int pos,char *out,unsigned int outlen)$/;"	f
dns_packet_getname	libowfat/dns/dns_packet.c	/^unsigned int dns_packet_getname(const char *buf,unsigned int len,unsigned int pos,char **d)$/;"	f
dns_packet_skipname	libowfat/dns/dns_packet.c	/^unsigned int dns_packet_skipname(const char *buf,unsigned int len,unsigned int pos)$/;"	f
dns_random	libowfat/dns/dns_random.c	/^unsigned int dns_random(unsigned int n)$/;"	f
dns_random_init	libowfat/dns/dns_random.c	/^void dns_random_init(const char data[128])$/;"	f
dns_resolvconfip	libowfat/dns/dns_rcip.c	/^int dns_resolvconfip(char s[256])$/;"	f
dns_resolvconfrewrite	libowfat/dns/dns_rcrw.c	/^int dns_resolvconfrewrite(stralloc *out)$/;"	f
dns_resolve	libowfat/dns/dns_resolve.c	/^int dns_resolve(const char *q,const char qtype[2])$/;"	f
dns_resolve_tx	libowfat/dns/dns_resolve.c	/^struct dns_transmit dns_resolve_tx;$/;"	v	typeref:struct:dns_transmit
dns_sortip	libowfat/dns/dns_sortip.c	/^void dns_sortip(char *s,unsigned int n)$/;"	f
dns_sortip6	libowfat/dns/dns_sortip6.c	/^void dns_sortip6(char *s,unsigned int n)$/;"	f
dns_transmit	libowfat/dns.h	/^struct dns_transmit {$/;"	s
dns_transmit	libowfat/libowfat/dns.h	/^struct dns_transmit {$/;"	s
dns_transmit_free	libowfat/dns/dns_transmit.c	/^void dns_transmit_free(struct dns_transmit *d)$/;"	f
dns_transmit_get	libowfat/dns/dns_transmit.c	/^int dns_transmit_get(struct dns_transmit *d,const iopause_fd *x,const struct taia *when)$/;"	f
dns_transmit_io	libowfat/dns/dns_transmit.c	/^void dns_transmit_io(struct dns_transmit *d,iopause_fd *x,struct taia *deadline)$/;"	f
dns_transmit_start	libowfat/dns/dns_transmit.c	/^int dns_transmit_start(struct dns_transmit *d,const char servers[256],int flagrecursive,const char *q,const char qtype[2],const char localip[16])$/;"	f
dns_txt	libowfat/dns/dns_txt.c	/^int dns_txt(stralloc *out,const stralloc *fqdn)$/;"	f
dns_txt_packet	libowfat/dns/dns_txt.c	/^int dns_txt_packet(stralloc *out,const char *buf,unsigned int len)$/;"	f
do_exit	src/main.c	/^static void do_exit()$/;"	f	file:
do_exit	src/server.c	/^static void do_exit()$/;"	f	file:
do_tick	libtorrent/include/libtorrent/storage.hpp	/^		void do_tick()$/;"	f	struct:libtorrent::storage_interface
doit	libowfat/cdb/cdb_traverse.c	/^static int doit(struct cdb *c,uint32 *kpos) {$/;"	f	file:
doit	libowfat/dns/dns_ipq.c	/^static int doit(stralloc *work,const char *rule)$/;"	f	file:
doit	libowfat/dns/dns_ipq6.c	/^static int doit(stralloc *work,const char *rule)$/;"	f	file:
done	libowfat/test/proxy.c	/^  int done,todo;$/;"	m	struct:state	file:
done	libtorrent/include/libtorrent/file.hpp	/^		bool done() const { return m_done; }$/;"	f	class:libtorrent::directory
dont_count_slow_torrents	libtorrent/include/libtorrent/settings_pack.hpp	/^			dont_count_slow_torrents,$/;"	e	enum:libtorrent::settings_pack::bool_types
dont_flush_write_cache	libtorrent/include/libtorrent/settings_pack.hpp	/^			dont_flush_write_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
dont_follow_links	libtorrent/include/libtorrent/aux_/path.hpp	/^	enum { dont_follow_links = 1 };$/;"	e	enum:libtorrent::__anon62
dont_fragment	libtorrent/include/libtorrent/socket.hpp	/^		explicit dont_fragment(bool val) : m_value(val) {}$/;"	f	struct:libtorrent::dont_fragment
dont_fragment	libtorrent/include/libtorrent/socket.hpp	/^		explicit dont_fragment(bool val)$/;"	f	struct:libtorrent::dont_fragment
dont_fragment	libtorrent/include/libtorrent/socket.hpp	/^	struct dont_fragment$/;"	s	namespace:libtorrent
dont_fragment	libtorrent/include/libtorrent/udp_socket.hpp	/^		static constexpr udp_send_flags_t dont_fragment = 3_bit;$/;"	m	class:libtorrent::udp_socket
dont_have_msg	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			dont_have_msg = 7,$/;"	e	enum:libtorrent::bt_peer_connection::__anon47
dont_parse_chunks	libtorrent/include/libtorrent/http_parser.hpp	/^		enum flags_t { dont_parse_chunks = 1 };$/;"	e	enum:libtorrent::http_parser::flags_t
dont_queue	libtorrent/include/libtorrent/udp_socket.hpp	/^		static constexpr udp_send_flags_t dont_queue = 2_bit;$/;"	m	class:libtorrent::udp_socket
dont_replace	libtorrent/include/libtorrent/storage_defs.hpp	/^		dont_replace TORRENT_DEPRECATED_ENUM$/;"	e	enum:libtorrent::deprecated_move_flags_t
dos_blocker	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^	struct TORRENT_EXTRA_EXPORT dos_blocker$/;"	s	namespace:libtorrent::dht
down_bandwidth_bytes_queue	libtorrent/include/libtorrent/session_status.hpp	/^		int down_bandwidth_bytes_queue;$/;"	m	struct:libtorrent::session_status
down_bandwidth_queue	libtorrent/include/libtorrent/session_status.hpp	/^		int down_bandwidth_queue;$/;"	m	struct:libtorrent::session_status
down_bandwidth_queue	libtorrent/include/libtorrent/torrent_status.hpp	/^		int down_bandwidth_queue = 0;$/;"	m	struct:libtorrent::torrent_status
down_count	include/trackerlogic.h	/^  size_t         down_count;$/;"	m	struct:ot_peerlist
down_speed	libtorrent/include/libtorrent/peer_info.hpp	/^		int down_speed;$/;"	m	struct:libtorrent::peer_info
download_channel	libtorrent/include/libtorrent/peer_connection.hpp	/^			download_channel,$/;"	e	enum:libtorrent::peer_connection::channels
download_ip_overhead	libtorrent/include/libtorrent/stat.hpp	/^		int download_ip_overhead() const { return m_stat[download_ip_protocol].counter(); }$/;"	f	class:libtorrent::stat
download_ip_protocol	libtorrent/include/libtorrent/stat.hpp	/^			download_ip_protocol,$/;"	e	enum:libtorrent::stat::__anon67
download_limit	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int download_limit = -1;$/;"	m	struct:libtorrent::add_torrent_params
download_limit	libtorrent/include/libtorrent/peer_class.hpp	/^		int download_limit;$/;"	m	struct:libtorrent::peer_class_info
download_limit	libtorrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER int download_limit;$/;"	m	struct:libtorrent::peer_info
download_limit_too_low	libtorrent/include/libtorrent/alert_types.hpp	/^			download_limit_too_low,$/;"	e	enum:libtorrent::final::performance_warning_t
download_payload	libtorrent/include/libtorrent/stat.hpp	/^			download_payload,$/;"	e	enum:libtorrent::stat::__anon67
download_payload_rate	libtorrent/include/libtorrent/peer_connection.hpp	/^		int download_payload_rate() const { return m_statistics.download_payload_rate(); }$/;"	f	class:libtorrent::peer_connection
download_payload_rate	libtorrent/include/libtorrent/stat.hpp	/^		int download_payload_rate() const$/;"	f	class:libtorrent::stat
download_payload_rate	libtorrent/include/libtorrent/torrent_status.hpp	/^		int download_payload_rate = 0;$/;"	m	struct:libtorrent::torrent_status
download_priority	libtorrent/include/libtorrent/peer_class.hpp	/^		int download_priority;$/;"	m	struct:libtorrent::peer_class_info
download_protocol	libtorrent/include/libtorrent/stat.hpp	/^			download_protocol,$/;"	e	enum:libtorrent::stat::__anon67
download_queue	libtorrent/include/libtorrent/piece_picker.hpp	/^			download_queue_t download_queue() const$/;"	f	struct:libtorrent::piece_picker::piece_pos
download_queue_length	libtorrent/include/libtorrent/peer_info.hpp	/^		int download_queue_length;$/;"	m	struct:libtorrent::peer_info
download_queue_time	libtorrent/include/libtorrent/peer_info.hpp	/^		time_duration download_queue_time;$/;"	m	struct:libtorrent::peer_info
download_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int download_rate;$/;"	m	struct:libtorrent::session_status
download_rate	libtorrent/include/libtorrent/stat.hpp	/^		int download_rate() const$/;"	f	class:libtorrent::stat
download_rate	libtorrent/include/libtorrent/torrent_status.hpp	/^		int download_rate = 0;$/;"	m	struct:libtorrent::torrent_status
download_rate_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			download_rate_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
download_rate_peak	libtorrent/include/libtorrent/peer_info.hpp	/^		int download_rate_peak;$/;"	m	struct:libtorrent::peer_info
download_state	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint32_t download_state : 3;$/;"	m	struct:libtorrent::piece_picker::piece_pos
downloaded	libtorrent/include/libtorrent/tracker_manager.hpp	/^		int downloaded;$/;"	m	struct:libtorrent::tracker_response
downloaded	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t downloaded;$/;"	m	struct:libtorrent::tracker_request
downloaded_in_last_round	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t downloaded_in_last_round() const$/;"	f	class:libtorrent::peer_connection
downloaders	libtorrent/include/libtorrent/tracker_manager.hpp	/^		int downloaders;$/;"	m	struct:libtorrent::tracker_response
downloading	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool downloading() const { return state() != piece_open; }$/;"	f	struct:libtorrent::piece_picker::piece_pos
downloading	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool downloading;$/;"	m	struct:libtorrent::piece_picker::piece_stats_t
downloading	libtorrent/include/libtorrent/torrent_status.hpp	/^			downloading,$/;"	e	enum:libtorrent::torrent_status::state_t
downloading_block_index	libtorrent/include/libtorrent/peer_info.hpp	/^		int downloading_block_index;$/;"	m	struct:libtorrent::peer_info
downloading_metadata	libtorrent/include/libtorrent/torrent_status.hpp	/^			downloading_metadata,$/;"	e	enum:libtorrent::torrent_status::state_t
downloading_piece	libtorrent/include/libtorrent/piece_picker.hpp	/^			downloading_piece()$/;"	f	struct:libtorrent::piece_picker::downloading_piece
downloading_piece	libtorrent/include/libtorrent/piece_picker.hpp	/^		struct downloading_piece$/;"	s	class:libtorrent::piece_picker
downloading_piece_index	libtorrent/include/libtorrent/peer_info.hpp	/^		piece_index_t downloading_piece_index;$/;"	m	struct:libtorrent::peer_info
downloading_progress	libtorrent/include/libtorrent/peer_info.hpp	/^		int downloading_progress;$/;"	m	struct:libtorrent::peer_info
downloading_total	libtorrent/include/libtorrent/peer_info.hpp	/^		int downloading_total;$/;"	m	struct:libtorrent::peer_info
dpos	libowfat/cdb.h	/^  uint32 dpos; \/* initialized if cdb_findnext() returns 1 *\/$/;"	m	struct:cdb
dpos	libowfat/libowfat/cdb.h	/^  uint32 dpos; \/* initialized if cdb_findnext() returns 1 *\/$/;"	m	struct:cdb
drop_privileges	src/opentracker.c	/^int drop_privileges ( const char * const serveruser, const char * const serverdir ) {$/;"	f
dummy_list	src/trackerlogic.c	/^static ot_peerlist dummy_list;$/;"	v	file:
dummyreadwrite	libowfat/buffer/buffer_frombuf.c	/^static ssize_t dummyreadwrite(int fd,char* buf,size_t len) {$/;"	f	file:
dump	libowfat/ent.c	/^void dump(struct letters* s,size_t depth) {$/;"	f
duplicate	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		HCRYPTHASH duplicate(crypt_hash const& h)$/;"	f	struct:libtorrent::aux::crypt_hash
duplicate_is_error	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t duplicate_is_error = 6_bit;$/;"	m	namespace:libtorrent::torrent_flags
duplicate_peer_id	libtorrent/include/libtorrent/close_reason.hpp	/^		duplicate_peer_id,$/;"	m	class:libtorrent::close_reason_t
duplicate_peer_id	libtorrent/include/libtorrent/error_code.hpp	/^			duplicate_peer_id,$/;"	e	enum:libtorrent::errors::error_code_enum
duplicate_torrent	libtorrent/include/libtorrent/error_code.hpp	/^			duplicate_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
duplicated_id	libtorrent/include/libtorrent/i2p_stream.hpp	/^			duplicated_id,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
ec	libtorrent/include/libtorrent/alert_types.hpp	/^		error_code TORRENT_DEPRECATED_MEMBER ec;$/;"	m	struct:libtorrent::final
ec	libtorrent/include/libtorrent/error_code.hpp	/^		error_code ec;$/;"	m	struct:libtorrent::storage_error
ed25519_private_key_size	libtorrent/include/libtorrent/ed25519.hpp	/^	ed25519_private_key_size = 64,$/;"	e	enum:libtorrent::__anon53
ed25519_public_key_size	libtorrent/include/libtorrent/ed25519.hpp	/^	ed25519_public_key_size = 32,$/;"	e	enum:libtorrent::__anon53
ed25519_scalar_size	libtorrent/include/libtorrent/ed25519.hpp	/^	ed25519_scalar_size = 32,$/;"	e	enum:libtorrent::__anon53
ed25519_seed_size	libtorrent/include/libtorrent/ed25519.hpp	/^	ed25519_seed_size = 32,$/;"	e	enum:libtorrent::__anon53
ed25519_shared_secret_size	libtorrent/include/libtorrent/ed25519.hpp	/^	ed25519_shared_secret_size = 32$/;"	e	enum:libtorrent::__anon53
ed25519_signature_size	libtorrent/include/libtorrent/ed25519.hpp	/^	ed25519_signature_size = 64,$/;"	e	enum:libtorrent::__anon53
elemperpage	libowfat/iarray.h	/^  size_t elemsize,elemperpage,bytesperpage,len;$/;"	m	struct:__anon31
elemperpage	libowfat/libowfat/iarray.h	/^  size_t elemsize,elemperpage,bytesperpage,len;$/;"	m	struct:__anon37
elemsize	libowfat/iarray.h	/^  size_t elemsize,elemperpage,bytesperpage,len;$/;"	m	struct:__anon31
elemsize	libowfat/libowfat/iarray.h	/^  size_t elemsize,elemperpage,bytesperpage,len;$/;"	m	struct:__anon37
emplace_alert	libtorrent/include/libtorrent/alert_manager.hpp	/^		void emplace_alert(Args&&... args) try$/;"	f	class:libtorrent::alert_manager
emplace_back	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		emplace_back(Args&&... args)$/;"	f	struct:libtorrent::heterogeneous_queue
empty	libtorrent/include/libtorrent/aux_/file_progress.hpp	/^		bool empty() const { return m_file_progress.empty(); }$/;"	f	struct:libtorrent::aux::file_progress
empty	libtorrent/include/libtorrent/buffer.hpp	/^	bool empty() const { return m_size == 0; }$/;"	f	class:libtorrent::buffer
empty	libtorrent/include/libtorrent/chained_buffer.hpp	/^		bool empty() const { return m_bytes == 0; }$/;"	f	namespace:libtorrent
empty	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		bool empty() const { return m_num_items == 0; }$/;"	f	struct:libtorrent::heterogeneous_queue
empty	libtorrent/include/libtorrent/kademlia/item.hpp	/^	bool empty() const { return m_value.type() == entry::undefined_t; }$/;"	f	class:libtorrent::dht::item
empty	libtorrent/include/libtorrent/linked_list.hpp	/^		bool empty() const { return m_size == 0; }$/;"	f	struct:libtorrent::linked_list
empty	libtorrent/include/libtorrent/packet_buffer.hpp	/^		bool empty() const { return m_size == 0; }$/;"	f	class:libtorrent::packet_buffer
empty	libtorrent/include/libtorrent/tailqueue.hpp	/^		bool empty() const { TORRENT_ASSERT(m_size >= 0); return m_size == 0; }$/;"	f	struct:libtorrent::tailqueue
enable_dht	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_dht,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_incoming_tcp	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_incoming_tcp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_incoming_utp	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_incoming_utp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_ip_notifier	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_ip_notifier,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_lsd	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_lsd,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_natpmp	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_natpmp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_outgoing_tcp	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_outgoing_tcp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_outgoing_utp	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_outgoing_utp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_upnp	libtorrent/include/libtorrent/settings_pack.hpp	/^			enable_upnp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enabled	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool enabled : 1;$/;"	m	struct:libtorrent::announce_endpoint
enabled	libtorrent/include/libtorrent/session_settings.hpp	/^			enabled,$/;"	e	enum:libtorrent::pe_settings::enc_policy
enc	libowfat/textcode/fmt_uuencoded.c	/^static inline unsigned int enc(unsigned char x) {$/;"	f	file:
enc_get_utf8_size	src/tools.c	/^int enc_get_utf8_size(const unsigned char pInput)$/;"	f
enc_handler	libtorrent/include/libtorrent/pe_crypto.hpp	/^			std::shared_ptr<crypto_plugin> enc_handler;$/;"	m	struct:libtorrent::encryption_handler::barrier
enc_level	libtorrent/include/libtorrent/session_settings.hpp	/^		enum enc_level$/;"	g	struct:libtorrent::pe_settings
enc_policy	libtorrent/include/libtorrent/session_settings.hpp	/^		enum enc_policy$/;"	g	struct:libtorrent::pe_settings
enc_unicode_to_utf8_one	src/tools.c	/^int enc_unicode_to_utf8_one(unsigned long unic, unsigned char *pOutput,$/;"	f
enc_utf8_to_unicode_one	src/tools.c	/^int enc_utf8_to_unicode_one(const unsigned char *pInput, unsigned long *Unic)$/;"	f
encoding	include/packet.h	/^    u8_t   encoding;            \/\/数据段压缩方式  例如 ox00:无压缩$/;"	m	struct:yzy_packet
encryption	libtorrent/include/libtorrent/operations.hpp	/^		encryption,$/;"	m	class:libtorrent::operation_t
encryption_error	libtorrent/include/libtorrent/close_reason.hpp	/^		encryption_error = 256,$/;"	m	class:libtorrent::close_reason_t
encryption_handler	libtorrent/include/libtorrent/pe_crypto.hpp	/^	struct TORRENT_EXTRA_EXPORT encryption_handler$/;"	s	namespace:libtorrent
end	libtorrent/include/libtorrent/aux_/range.hpp	/^		Iter end() { return _end; }$/;"	f	struct:libtorrent::aux::iterator_range
end	libtorrent/include/libtorrent/buffer.hpp	/^	char const* end() const { return m_begin + m_size; }$/;"	f	class:libtorrent::buffer
end	libtorrent/include/libtorrent/buffer.hpp	/^	char* end() { return m_begin + m_size; }$/;"	f	class:libtorrent::buffer
end	libtorrent/include/libtorrent/file_storage.hpp	/^		iterator end() const { return m_files.end(); }$/;"	f	class:libtorrent::file_storage
end	libtorrent/include/libtorrent/index_range.hpp	/^	index_iter<Index> end() { return index_iter<Index>{_end}; }$/;"	f	struct:libtorrent::index_range
end	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	router_iterator end() const { return m_router_nodes.end(); }$/;"	f	class:libtorrent::dht::routing_table
end	libtorrent/include/libtorrent/peer_list.hpp	/^		const_iterator end() const { return m_peers.end(); }$/;"	f	struct:libtorrent::peer_list
end	libtorrent/include/libtorrent/peer_list.hpp	/^		iterator end() { return m_peers.end(); }$/;"	f	struct:libtorrent::peer_list
end	libtorrent/include/libtorrent/sha1_hash.hpp	/^		const_iterator end() const$/;"	f	class:libtorrent::digest32
end	libtorrent/include/libtorrent/sha1_hash.hpp	/^		iterator end()$/;"	f	class:libtorrent::digest32
end	libtorrent/include/libtorrent/torrent.hpp	/^		const_peer_iterator end() const { return m_connections.end(); }$/;"	f	class:libtorrent::torrent
end	libtorrent/include/libtorrent/torrent.hpp	/^		peer_iterator end() { return m_connections.end(); }$/;"	f	class:libtorrent::torrent
end_deprecated	libtorrent/include/libtorrent/file_storage.hpp	/^		iterator end_deprecated() const { return m_files.end(); }$/;"	f	class:libtorrent::file_storage
end_files	libtorrent/include/libtorrent/torrent_info.hpp	/^		file_iterator end_files() const { return m_files.end_deprecated(); }$/;"	f	class:libtorrent::torrent_info
end_game_piece_picks	libtorrent/include/libtorrent/performance_counters.hpp	/^			end_game_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
end_index	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^		IndexType end_index() const$/;"	f	struct:libtorrent::aux::container_wrapper
end_piece	libtorrent/include/libtorrent/file_storage.hpp	/^		piece_index_t end_piece() const$/;"	f	class:libtorrent::file_storage
end_piece	libtorrent/include/libtorrent/torrent_info.hpp	/^		piece_index_t end_piece() const$/;"	f	class:libtorrent::torrent_info
endgame	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool endgame() const { return m_endgame_mode; }$/;"	f	class:libtorrent::peer_connection
endgame_mode	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t endgame_mode = 14_bit;$/;"	m	struct:libtorrent::peer_info
endp	libtorrent/include/libtorrent/peer_connection.hpp	/^		tcp::endpoint endp;$/;"	m	struct:libtorrent::peer_connection_args
endpoint	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> TORRENT_DEPRECATED_MEMBER endpoint;$/;"	m	namespace:libtorrent
endpoint	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> TORRENT_DEPRECATED_MEMBER endpoint;$/;"	v
endpoint	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> endpoint;$/;"	m	struct:libtorrent::peer_alert
endpoint	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<udp::endpoint> endpoint;$/;"	m	struct:libtorrent::final
endpoint	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	union_endpoint endpoint;$/;"	m	struct:libtorrent::dht::node_entry
endpoints	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::vector<announce_endpoint> endpoints;$/;"	m	struct:libtorrent::announce_entry
endpoints	libtorrent/include/libtorrent/http_connection.hpp	/^	std::vector<tcp::endpoint> const& endpoints() const { return m_endpoints; }$/;"	f	class:libtorrent::http_connection::std
endpoints	libtorrent/include/libtorrent/torrent.hpp	/^		std::vector<tcp::endpoint> endpoints;$/;"	m	struct:libtorrent::web_seed_t
enforce_node_id	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool enforce_node_id = false;$/;"	m	struct:libtorrent::dht::dht_settings
ensure_trailing_slash	libtorrent/include/libtorrent/string_util.hpp	/^	inline void ensure_trailing_slash(std::string& url)$/;"	f	namespace:libtorrent
entities	libowfat/entities.h	/^} entities = {$/;"	v	typeref:struct:__anon42
entity	libowfat/ent.c	/^  const char* entity;$/;"	m	struct:entity	file:
entity	libowfat/ent.c	/^struct entity {$/;"	s	file:
entry	libtorrent/include/libtorrent/entry.hpp	/^		entry(U v) \/\/ NOLINT$/;"	f	class:libtorrent::entry
entry	libtorrent/include/libtorrent/entry.hpp	/^	class TORRENT_EXPORT entry$/;"	c	namespace:libtorrent
entry_type_t	libtorrent/include/libtorrent/lazy_entry.hpp	/^		enum entry_type_t$/;"	g	struct:libtorrent::lazy_entry
enum_if	libtorrent/include/libtorrent/alert_types.hpp	/^			enum_if TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
enum_if	libtorrent/include/libtorrent/operations.hpp	/^		enum_if,$/;"	m	class:libtorrent::operation_t
enum_route	libtorrent/include/libtorrent/operations.hpp	/^		enum_route,$/;"	m	class:libtorrent::operation_t
eof_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			eof_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
ep	libtorrent/include/libtorrent/kademlia/io.hpp	/^		udp::endpoint ep;$/;"	m	struct:libtorrent::dht::node_endpoint
ep	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	udp::endpoint ep() const { return endpoint; }$/;"	f	struct:libtorrent::dht::node_entry
ep	src/cJSON.c	/^static const char *ep;$/;"	v	file:
ephemeral	libtorrent/include/libtorrent/torrent.hpp	/^		bool ephemeral = false;$/;"	m	struct:libtorrent::web_seed_t
ephemeral	libtorrent/include/libtorrent/torrent.hpp	/^		static constexpr web_seed_flag_t ephemeral = 0_bit;$/;"	m	class:libtorrent::torrent
epolladded	libowfat/io_internal.h	/^  unsigned int epolladded:1;$/;"	m	struct:__anon40
erase	libtorrent/include/libtorrent/linked_list.hpp	/^		void erase(T* e)$/;"	f	struct:libtorrent::linked_list
erased	libtorrent/include/libtorrent/peer_list.hpp	/^		std::vector<torrent_peer*> erased;$/;"	m	struct:libtorrent::torrent_state
err_msg	src/log.c	/^void err_msg(const char *fmt, ...)$/;"	f
errc	libtorrent/include/libtorrent/torrent_status.hpp	/^		error_code errc;$/;"	m	struct:libtorrent::torrent_status
errmsg_flush	libowfat/buffer/errmsg_puts.c	/^void errmsg_flush(int fd) {$/;"	f
errmsg_iam	libowfat/buffer/errmsg_iam.c	/^void errmsg_iam(const char* who) {$/;"	f
errmsg_info	libowfat/buffer/errmsg_info.c	/^void errmsg_info(const char* message, ...) {$/;"	f
errmsg_infosys	libowfat/buffer/errmsg_infosys.c	/^void errmsg_infosys(const char* message, ...) {$/;"	f
errmsg_puts	libowfat/buffer/errmsg_puts.c	/^void errmsg_puts(int fd,const char* s) {$/;"	f
errmsg_start	libowfat/buffer/errmsg_puts.c	/^void errmsg_start(int fd) {$/;"	f
errmsg_warn	libowfat/buffer/errmsg_warn.c	/^void errmsg_warn(const char* message, ...) {$/;"	f
errmsg_warnsys	libowfat/buffer/errmsg_warnsys.c	/^void errmsg_warnsys(const char* message, ...) {$/;"	f
errmsg_write	libowfat/buffer/errmsg_write.c	/^void errmsg_write(int fd,const char* err,const char* message,va_list list) {$/;"	f
error	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t error = 0_bit;$/;"	m	namespace:libtorrent::alert_category
error	libtorrent/include/libtorrent/alert_types.hpp	/^		error_code const error;$/;"	m	namespace:libtorrent
error	libtorrent/include/libtorrent/alert_types.hpp	/^		error_code const error;$/;"	m	struct:libtorrent::final
error	libtorrent/include/libtorrent/disk_io_job.hpp	/^		storage_error error;$/;"	m	struct:libtorrent::disk_io_job
error	libtorrent/include/libtorrent/torrent.hpp	/^			error_code error;$/;"	m	struct:libtorrent::torrent::read_piece_struct
error	libtorrent/include/libtorrent/torrent.hpp	/^		error_code error() const { return m_error; }$/;"	f	class:libtorrent::torrent
error	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER error;$/;"	m	struct:libtorrent::torrent_status
error	libtorrent/include/libtorrent/udp_socket.hpp	/^			error_code error;$/;"	m	struct:libtorrent::udp_socket::packet
error_code	libtorrent/include/libtorrent/upnp.hpp	/^	int error_code = -1;$/;"	m	struct:libtorrent::error_code_parse_state
error_code_enum	libtorrent/include/libtorrent/bdecode.hpp	/^	enum error_code_enum$/;"	g	namespace:libtorrent::bdecode_errors
error_code_enum	libtorrent/include/libtorrent/error_code.hpp	/^		enum error_code_enum$/;"	g	namespace:libtorrent::errors
error_code_enum	libtorrent/include/libtorrent/gzip.hpp	/^		enum error_code_enum$/;"	g	namespace:libtorrent::gzip_errors
error_code_enum	libtorrent/include/libtorrent/upnp.hpp	/^		enum error_code_enum$/;"	g	namespace:libtorrent::upnp_errors
error_code_enum	libtorrent/include/libtorrent/utf8.hpp	/^		enum error_code_enum$/;"	g	namespace:libtorrent::utf8_errors
error_code_max	libtorrent/include/libtorrent/bdecode.hpp	/^		error_code_max$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
error_code_max	libtorrent/include/libtorrent/error_code.hpp	/^			error_code_max$/;"	e	enum:libtorrent::errors::error_code_enum
error_code_max	libtorrent/include/libtorrent/gzip.hpp	/^			error_code_max$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
error_code_parse_state	libtorrent/include/libtorrent/upnp.hpp	/^struct error_code_parse_state$/;"	s	namespace:libtorrent
error_encrypted_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			error_encrypted_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_file	libtorrent/include/libtorrent/torrent_status.hpp	/^		file_index_t error_file = torrent_status::error_file_none;$/;"	m	struct:libtorrent::torrent_status
error_handler	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		error_handler_interface& error_handler;$/;"	m	struct:libtorrent::aux::allocating_handler
error_handler_interface	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^	struct TORRENT_EXTRA_EXPORT error_handler_interface$/;"	s	namespace:libtorrent::aux
error_incoming_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			error_incoming_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t error_notification = 0_bit;$/;"	m	class:libtorrent::alert
error_outgoing_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			error_outgoing_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			error_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_rc4_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			error_rc4_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_state	libtorrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	e	enum:libtorrent::http_parser::__anon55
error_tcp_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			error_tcp_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_utp_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			error_utp_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
errorcode	libowfat/io_internal.h	/^  DWORD errorcode;$/;"	m	struct:__anon40
errors	libtorrent/include/libtorrent/error_code.hpp	/^	namespace errors$/;"	n	namespace:libtorrent
errors	libtorrent/include/libtorrent/natpmp.hpp	/^	namespace errors$/;"	n	namespace:libtorrent
esc	src/print.cpp	/^char const* esc(char const* code)$/;"	f
est_reciprocation_rate	libtorrent/include/libtorrent/peer_connection.hpp	/^		int est_reciprocation_rate() const { return m_est_reciprocation_rate; }$/;"	f	class:libtorrent::peer_connection
estimated_reciprocation_rate	libtorrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER int estimated_reciprocation_rate;$/;"	m	struct:libtorrent::peer_info
event	libtorrent/include/libtorrent/alert_types.hpp	/^		int const event;$/;"	m	struct:libtorrent::final
event	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::uint8_t event;$/;"	m	struct:libtorrent::tracker_request
event_t	libtorrent/include/libtorrent/tracker_manager.hpp	/^		enum event_t$/;"	g	struct:libtorrent::tracker_request
eventpacket	libowfat/io_internal.h	/^struct eventpacket {$/;"	s
events	libowfat/io.h	/^    int fd, events;$/;"	m	struct:iomux::__anon29
events	libowfat/libowfat/io.h	/^    int fd, events;$/;"	m	struct:iomux::__anon35
events_per_time	src/ot_stats.c	/^static unsigned long events_per_time( unsigned long long events, time_t t ) {$/;"	f	file:
eviction_mode	libtorrent/include/libtorrent/block_cache.hpp	/^		enum eviction_mode$/;"	g	struct:libtorrent::block_cache
exception	libtorrent/include/libtorrent/operations.hpp	/^		exception,$/;"	m	class:libtorrent::operation_t
exclusive_address_use	libtorrent/include/libtorrent/socket.hpp	/^		explicit exclusive_address_use(int enable): m_value(enable) {}$/;"	f	struct:libtorrent::exclusive_address_use
exclusive_address_use	libtorrent/include/libtorrent/socket.hpp	/^	struct exclusive_address_use$/;"	s	namespace:libtorrent
exec_cmd	src/tools.c	/^void exec_cmd(const char *cmd, char *result)$/;"	f
executable_attribute	libtorrent/include/libtorrent/file_storage.hpp	/^		bool executable_attribute:1;$/;"	m	struct:libtorrent::file_entry
executable_attribute	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t executable_attribute:1;$/;"	m	struct:libtorrent::internal_file_entry
exeobj	Makefile	/^exeobj = bt_server$/;"	m
exerr	src/proxy.c	/^void exerr( char * message ) {$/;"	f
exerr	src/trackerlogic.c	/^void exerr( char * message ) {$/;"	f
exit	libtorrent/include/libtorrent/upnp.hpp	/^	bool exit = false;$/;"	m	struct:libtorrent::error_code_parse_state
expected_close_bracket_in_address	libtorrent/include/libtorrent/error_code.hpp	/^			expected_close_bracket_in_address,$/;"	e	enum:libtorrent::errors::error_code_enum
expected_colon	libtorrent/include/libtorrent/bdecode.hpp	/^		expected_colon,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
expected_colon	libtorrent/include/libtorrent/error_code.hpp	/^			expected_colon,$/;"	e	enum:libtorrent::errors::error_code_enum
expected_digit	libtorrent/include/libtorrent/bdecode.hpp	/^		expected_digit,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
expected_string	libtorrent/include/libtorrent/error_code.hpp	/^			expected_string = 190,$/;"	e	enum:libtorrent::errors::error_code_enum
expected_value	libtorrent/include/libtorrent/bdecode.hpp	/^		expected_value,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
expected_value	libtorrent/include/libtorrent/error_code.hpp	/^			expected_value,$/;"	e	enum:libtorrent::errors::error_code_enum
expire	libtorrent/include/libtorrent/block_cache.hpp	/^		time_point expire = min_time();$/;"	m	struct:libtorrent::cached_piece_entry
expires	libtorrent/include/libtorrent/aux_/portmap.hpp	/^		time_point expires;$/;"	m	struct:libtorrent::aux::base_mapping
expires	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^			time_point expires;$/;"	m	struct:libtorrent::udp_tracker_connection::connection_cache_entry
export_bits	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^      OutputIterator export_bits($/;"	f	namespace:boost::multiprecision
export_filter	libtorrent/include/libtorrent/ip_filter.hpp	/^		std::vector<ip_range<ExternalAddressType>> export_filter() const$/;"	f	class:libtorrent::detail::filter_impl
extended_routing_table	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool extended_routing_table = true;$/;"	m	struct:libtorrent::dht::dht_settings
extension	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::uint8_t extension;$/;"	m	struct:libtorrent::utp_header
extensions	libtorrent/include/libtorrent/add_torrent_params.hpp	/^			extensions;$/;"	m	struct:libtorrent::add_torrent_params
extensions	libtorrent/include/libtorrent/session.hpp	/^		std::vector<std::shared_ptr<plugin>> extensions;$/;"	m	struct:libtorrent::session_params
external_address	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<address> external_address;$/;"	m	struct:libtorrent::final
external_address	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		ip_voter external_address;$/;"	m	struct:libtorrent::aux::listen_socket_t
external_address	libtorrent/include/libtorrent/ip_voter.hpp	/^		address external_address() const { return m_external_address; }$/;"	f	struct:libtorrent::ip_voter
external_address	libtorrent/include/libtorrent/natpmp.hpp	/^		address external_address;$/;"	m	struct:libtorrent::natpmp::mapping_t
external_ip	libtorrent/include/libtorrent/ip_voter.hpp	/^		external_ip()$/;"	f	struct:libtorrent::external_ip
external_ip	libtorrent/include/libtorrent/ip_voter.hpp	/^	struct TORRENT_EXTRA_EXPORT external_ip$/;"	s	namespace:libtorrent
external_ip	libtorrent/include/libtorrent/tracker_manager.hpp	/^		address external_ip;$/;"	m	struct:libtorrent::tracker_response
external_ip	libtorrent/include/libtorrent/upnp.hpp	/^		address external_ip;$/;"	m	struct:libtorrent::final::rootdevice
external_ip_t	libtorrent/include/libtorrent/ip_voter.hpp	/^		struct external_ip_t$/;"	s	struct:libtorrent::ip_voter
external_port	libtorrent/include/libtorrent/aux_/portmap.hpp	/^		int external_port = 0;$/;"	m	struct:libtorrent::aux::base_mapping
external_port	libtorrent/include/libtorrent/upnp.hpp	/^		int external_port = 0;$/;"	m	struct:libtorrent::final::global_mapping_t
external_port_cannot_be_wildcarded	libtorrent/include/libtorrent/upnp.hpp	/^			external_port_cannot_be_wildcarded = 716,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
external_port_must_be_wildcard	libtorrent/include/libtorrent/upnp.hpp	/^			external_port_must_be_wildcard = 727$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
extra_headers	libtorrent/include/libtorrent/torrent_info.hpp	/^		headers_t extra_headers;$/;"	m	struct:libtorrent::web_seed_entry
extract_bits	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         inline std::uintmax_t extract_bits(const Backend& val, unsigned location, unsigned count, const mpl::true_&)$/;"	f	namespace:boost::multiprecision::detail
extract_bits	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         std::uintmax_t extract_bits(const Backend& val, unsigned location, unsigned count, const mpl::false_& tag)$/;"	f	namespace:boost::multiprecision::detail
fail	libtorrent/include/libtorrent/torrent.hpp	/^			bool fail;$/;"	m	struct:libtorrent::torrent::read_piece_struct
fail_count	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	int fail_count() const { return pinged() ? timeout_count : 0; }$/;"	f	struct:libtorrent::dht::node_entry
fail_if_exist	libtorrent/include/libtorrent/storage_defs.hpp	/^		fail_if_exist TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::deprecated_move_flags_t
fail_if_exist	libtorrent/include/libtorrent/storage_defs.hpp	/^		fail_if_exist,$/;"	m	class:libtorrent::move_flags_t
fail_limit	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t fail_limit = 0;$/;"	m	struct:libtorrent::announce_entry
failcount	libtorrent/include/libtorrent/peer_info.hpp	/^		int failcount;$/;"	m	struct:libtorrent::peer_info
failcount	libtorrent/include/libtorrent/peer_info.hpp	/^		std::uint8_t failcount;$/;"	m	struct:libtorrent::peer_list_entry
failcount	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t failcount:5; \/\/ [0, 31]$/;"	m	struct:libtorrent::torrent_peer
failcount	libtorrent/include/libtorrent/upnp.hpp	/^		int failcount = 0;$/;"	m	struct:libtorrent::final::mapping_t
failed	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			failed = 2$/;"	m	class:libtorrent::bt_peer_connection::hp_message
failed_hash_check	libtorrent/include/libtorrent/error_code.hpp	/^			failed_hash_check,$/;"	e	enum:libtorrent::errors::error_code_enum
failed_to_add	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^		failed_to_add = 0,$/;"	e	enum:libtorrent::dht::routing_table::add_node_status_t
fails	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t TORRENT_DEPRECATED_MEMBER fails:7;$/;"	m	struct:libtorrent::announce_entry
fails	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t fails : 7;$/;"	m	struct:libtorrent::announce_endpoint
failure_reason	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::string failure_reason;$/;"	m	struct:libtorrent::tracker_response
family	libtorrent/include/libtorrent/netlink.hpp	/^		int family() const$/;"	f	class:libtorrent::netlink
family_name	libtorrent/include/libtorrent/kademlia/node.hpp	/^		char const* family_name;$/;"	m	struct:libtorrent::dht::node::protocol_descriptor
fast	libtorrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	e	enum:libtorrent::partial_piece_info::state_t
fast_reconnects	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t fast_reconnects:4;$/;"	m	struct:libtorrent::torrent_peer
fast_retransmit	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t fast_retransmit;$/;"	m	struct:libtorrent::utp_status
fastest_upload	libtorrent/include/libtorrent/settings_pack.hpp	/^			fastest_upload,$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
fatal	libtorrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
fatal_disk_error	libtorrent/include/libtorrent/storage_defs.hpp	/^		fatal_disk_error,$/;"	m	class:libtorrent::status_t
father	libowfat/test/fdpassing.c	/^void father(int64 fd) {$/;"	f
fd	include/client.h	/^    int fd; $/;"	m	struct:client
fd	libowfat/buffer.h	/^  int fd;		\/* passed as first argument to op *\/$/;"	m	struct:buffer
fd	libowfat/cdb.h	/^  int64 fd;$/;"	m	struct:cdb
fd	libowfat/cdb_make.h	/^  int64 fd;$/;"	m	struct:cdb_make
fd	libowfat/io.h	/^    int fd, events;$/;"	m	struct:iomux::__anon29
fd	libowfat/io_internal.h	/^  int fd;$/;"	m	struct:eventpacket
fd	libowfat/iob_internal.h	/^  int64 fd;$/;"	m	struct:iob_entry
fd	libowfat/libowfat/buffer.h	/^  int fd;		\/* passed as first argument to op *\/$/;"	m	struct:buffer
fd	libowfat/libowfat/cdb.h	/^  int64 fd;$/;"	m	struct:cdb
fd	libowfat/libowfat/cdb_make.h	/^  int64 fd;$/;"	m	struct:cdb_make
fd	libowfat/libowfat/io.h	/^    int fd, events;$/;"	m	struct:iomux::__anon35
fd	src/proxy.c	/^  int64    fd;              \/* A file handle, if connected, <= 0 is disconnected (0 initially, -1 else) *\/$/;"	m	struct:__anon10	file:
fdmsg	libowfat/io/io_passfd.c	/^union fdmsg {$/;"	u	file:
fdmsg	libowfat/io/io_receivefd.c	/^union fdmsg {$/;"	u	file:
fence	libtorrent/include/libtorrent/disk_io_job.hpp	/^		static constexpr disk_job_flags_t fence = 1_bit;$/;"	m	struct:libtorrent::disk_io_job
fence_post_fence	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		enum { fence_post_fence = 0, fence_post_flush = 1, fence_post_none = 2 };$/;"	e	enum:libtorrent::aux::disk_job_fence::__anon60
fence_post_flush	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		enum { fence_post_fence = 0, fence_post_flush = 1, fence_post_none = 2 };$/;"	e	enum:libtorrent::aux::disk_job_fence::__anon60
fence_post_none	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		enum { fence_post_fence = 0, fence_post_flush = 1, fence_post_none = 2 };$/;"	e	enum:libtorrent::aux::disk_job_fence::__anon60
fetch_sync	sync_daemon.pl	/^sub fetch_sync {$/;"	s
fetch_sync_from_file	sync_daemon.pl	/^sub fetch_sync_from_file {$/;"	s
fifo	libtorrent/include/libtorrent/aux_/path.hpp	/^			fifo = 0x1000, \/\/ named pipe (fifo)$/;"	e	enum:libtorrent::file_status::__anon61
file	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER file;$/;"	m	struct:libtorrent::final
file	libtorrent/include/libtorrent/error_code.hpp	/^		file_index_t file() const { return file_index_t(file_idx); }$/;"	f	struct:libtorrent::storage_error
file	libtorrent/include/libtorrent/error_code.hpp	/^		void file(file_index_t f) { file_idx = static_cast<int>(f); }$/;"	f	struct:libtorrent::storage_error
file	libtorrent/include/libtorrent/file.hpp	/^	struct TORRENT_EXTRA_EXPORT file : boost::noncopyable$/;"	s	namespace:libtorrent
file	libtorrent/include/libtorrent/operations.hpp	/^		file,$/;"	m	class:libtorrent::operation_t
file_at	libtorrent/include/libtorrent/torrent_info.hpp	/^		file_entry file_at(int index) const { return m_files.at_deprecated(index); }$/;"	f	class:libtorrent::torrent_info
file_at_offset	libtorrent/include/libtorrent/torrent_info.hpp	/^		file_iterator file_at_offset(std::int64_t offset) const$/;"	f	class:libtorrent::torrent_info
file_checks_delay_per_block	libtorrent/include/libtorrent/settings_pack.hpp	/^			file_checks_delay_per_block TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
file_collision	libtorrent/include/libtorrent/error_code.hpp	/^			file_collision,$/;"	e	enum:libtorrent::errors::error_code_enum
file_copy	libtorrent/include/libtorrent/operations.hpp	/^		file_copy,$/;"	m	class:libtorrent::operation_t
file_entry	libtorrent/include/libtorrent/file_storage.hpp	/^	struct TORRENT_DEPRECATED_EXPORT file_entry$/;"	s	namespace:libtorrent
file_error	libtorrent/include/libtorrent/stat_cache.hpp	/^			file_error = -2 \/\/ (first index in m_errors)$/;"	e	enum:libtorrent::stat_cache::__anon68
file_fallocate	libtorrent/include/libtorrent/operations.hpp	/^		file_fallocate,$/;"	m	class:libtorrent::operation_t
file_filter	src/bt.cpp	/^bool file_filter(std::string const &f)$/;"	f
file_hard_link	libtorrent/include/libtorrent/operations.hpp	/^		file_hard_link,$/;"	m	class:libtorrent::operation_t
file_idx	libtorrent/include/libtorrent/error_code.hpp	/^		std::int32_t file_idx:24;$/;"	m	struct:libtorrent::storage_error
file_idx	libtorrent/include/libtorrent/resolve_links.hpp	/^			file_index_t file_idx;$/;"	m	struct:libtorrent::resolve_links::link_t
file_index	libtorrent/include/libtorrent/disk_interface.hpp	/^		file_index_t file_index;$/;"	m	struct:libtorrent::open_file_state
file_index	libtorrent/include/libtorrent/disk_io_job.hpp	/^			file_index_t file_index;$/;"	m	union:libtorrent::disk_io_job::__anon49
file_index	libtorrent/include/libtorrent/file_storage.hpp	/^		file_index_t file_index;$/;"	m	struct:libtorrent::file_slice
file_index	libtorrent/include/libtorrent/web_peer_connection.hpp	/^			file_index_t file_index;$/;"	m	struct:libtorrent::web_peer_connection::file_request_t
file_open	libtorrent/include/libtorrent/operations.hpp	/^		file_open,$/;"	m	class:libtorrent::operation_t
file_open_mode	libtorrent/include/libtorrent/disk_interface.hpp	/^	namespace file_open_mode$/;"	n	namespace:libtorrent
file_pool	libtorrent/include/libtorrent/file_pool.hpp	/^	struct TORRENT_EXPORT file_pool : boost::noncopyable$/;"	s	namespace:libtorrent
file_pool_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			file_pool_size,$/;"	e	enum:libtorrent::settings_pack::int_types
file_priorities	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<download_priority_t>> file_priorities;$/;"	m	struct:libtorrent::add_torrent_params
file_priority	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, file_priority$/;"	m	class:libtorrent::job_action_t
file_progress	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t file_progress = 21_bit;$/;"	m	namespace:libtorrent::alert_category
file_progress	libtorrent/include/libtorrent/aux_/file_progress.hpp	/^	struct TORRENT_EXTRA_EXPORT file_progress$/;"	s	namespace:libtorrent::aux
file_progress_flags_t	libtorrent/include/libtorrent/torrent_handle.hpp	/^		enum file_progress_flags_t$/;"	g	struct:libtorrent::torrent_handle
file_progress_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t file_progress_notification = 21_bit;$/;"	m	class:libtorrent::alert
file_ptr	libtorrent/include/libtorrent/file_pool.hpp	/^			file_handle file_ptr;$/;"	m	struct:libtorrent::file_pool::lru_file_entry
file_read	libtorrent/include/libtorrent/operations.hpp	/^		file_read,$/;"	m	class:libtorrent::operation_t
file_remove	libtorrent/include/libtorrent/operations.hpp	/^		file_remove,$/;"	m	class:libtorrent::operation_t
file_rename	libtorrent/include/libtorrent/operations.hpp	/^		file_rename,$/;"	m	class:libtorrent::operation_t
file_request_t	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		struct file_request_t$/;"	s	class:libtorrent::web_peer_connection
file_size	libtorrent/include/libtorrent/aux_/path.hpp	/^		std::int64_t file_size = 0;$/;"	m	struct:libtorrent::file_status
file_size	libtorrent/include/libtorrent/stat_cache.hpp	/^			std::int64_t file_size;$/;"	m	struct:libtorrent::stat_cache::stat_cache_t
file_slice	libtorrent/include/libtorrent/file_storage.hpp	/^	struct TORRENT_EXPORT file_slice$/;"	s	namespace:libtorrent
file_stat	libtorrent/include/libtorrent/operations.hpp	/^		file_stat,$/;"	m	class:libtorrent::operation_t
file_status	libtorrent/include/libtorrent/aux_/path.hpp	/^	struct file_status$/;"	s	namespace:libtorrent
file_storage	libtorrent/include/libtorrent/file_storage.hpp	/^	class TORRENT_EXPORT file_storage$/;"	c	namespace:libtorrent
file_too_short	libtorrent/include/libtorrent/error_code.hpp	/^			file_too_short,$/;"	e	enum:libtorrent::errors::error_code_enum
file_write	libtorrent/include/libtorrent/operations.hpp	/^		file_write,$/;"	m	class:libtorrent::operation_t
filehash	libtorrent/include/libtorrent/file_storage.hpp	/^		sha1_hash filehash;$/;"	m	struct:libtorrent::file_entry
files	libowfat/iob.h	/^  long next,bufs,files;$/;"	m	struct:io_batch
files	libowfat/libowfat/iob.h	/^  long next,bufs,files;$/;"	m	struct:io_batch
files	libtorrent/include/libtorrent/create_torrent.hpp	/^		file_storage const& files() const { return m_files; }$/;"	f	struct:libtorrent::create_torrent
files	libtorrent/include/libtorrent/storage.hpp	/^		file_storage const& files() const { return m_files; }$/;"	f	struct:libtorrent::storage_interface
files	libtorrent/include/libtorrent/storage.hpp	/^		file_storage const& files() const$/;"	f	class:libtorrent::default_storage
files	libtorrent/include/libtorrent/storage_defs.hpp	/^		file_storage const& files;$/;"	m	struct:libtorrent::storage_params
files	libtorrent/include/libtorrent/torrent_info.hpp	/^		file_storage const& files() const { return m_files; }$/;"	f	class:libtorrent::torrent_info
filter	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::shared_ptr<const ip_filter> filter;$/;"	m	struct:libtorrent::tracker_request
filter	src/torrent_view.cpp	/^int torrent_view::filter() const$/;"	f	class:torrent_view
filter_impl	libtorrent/include/libtorrent/ip_filter.hpp	/^		filter_impl()$/;"	f	class:libtorrent::detail::filter_impl
filter_impl	libtorrent/include/libtorrent/ip_filter.hpp	/^	class filter_impl$/;"	c	namespace:libtorrent::detail
filter_priority	libtorrent/include/libtorrent/piece_picker.hpp	/^			static constexpr std::uint32_t filter_priority = 0;$/;"	m	struct:libtorrent::piece_picker::piece_pos
filtered	libtorrent/include/libtorrent/extensions.hpp	/^		static constexpr add_peer_flags_t filtered = 2_bit;$/;"	m	struct:libtorrent::torrent_plugin
filtered	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool filtered() const { return piece_priority == filter_priority; }$/;"	f	struct:libtorrent::piece_picker::piece_pos
fin_resends	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int fin_resends() const { return m_sett.get_int(settings_pack::utp_fin_resends); }$/;"	f	struct:libtorrent::utp_socket_manager
final	libowfat/cdb_make.h	/^  char final[2048];$/;"	m	struct:cdb_make
final	libowfat/libowfat/cdb_make.h	/^  char final[2048];$/;"	m	struct:cdb_make
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_DEPRECATED_EXPORT torrent_added_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT block_downloading_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT block_finished_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT block_timeout_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT dht_reply_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT external_ip_alert final : alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT file_completed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT file_error_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT file_rename_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT file_renamed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT hash_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT invalid_request_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT listen_failed_alert final : alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT listen_succeeded_alert final : alert$/;"	s
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT metadata_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT metadata_received_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_ban_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_connect_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_disconnected_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_error_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_snubbed_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_unsnubbed_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT performance_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT piece_finished_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT read_piece_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT request_dropped_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT save_resume_data_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT save_resume_data_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT scrape_failed_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT scrape_reply_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT state_changed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT storage_moved_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT storage_moved_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_checked_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_delete_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_deleted_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_finished_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_paused_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_removed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_resumed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_announce_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_error_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_reply_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_warning_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT udp_error_alert final : alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT unwanted_block_alert final : peer_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT url_seed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		struct TORRENT_EXTRA_EXPORT session_impl final$/;"	s	namespace:libtorrent::aux
final	libtorrent/include/libtorrent/disk_io_thread.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_io_thread final$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^	struct TORRENT_EXTRA_EXPORT dht_tracker final$/;"	s	namespace:libtorrent::dht
final	libtorrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^class sample_infohashes final : public traversal_algorithm$/;"	c	namespace:libtorrent::dht
final	libtorrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^class sample_infohashes_observer final : public traversal_observer$/;"	c	namespace:libtorrent::dht
final	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool should_log(peer_log_alert::direction_t direction) const final;$/;"	m	class:libtorrent::peer_connection
final	libtorrent/include/libtorrent/resolver.hpp	/^struct TORRENT_EXTRA_EXPORT resolver final : resolver_interface$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^	struct TORRENT_EXTRA_EXPORT torrent_peer_allocator final$/;"	s	namespace:libtorrent
final	libtorrent/include/libtorrent/tracker_manager.hpp	/^	class TORRENT_EXTRA_EXPORT tracker_manager final$/;"	c	namespace:libtorrent
final	libtorrent/include/libtorrent/upnp.hpp	/^struct TORRENT_EXTRA_EXPORT upnp final$/;"	s	namespace:libtorrent
find	libtorrent/include/libtorrent/bloom_filter.hpp	/^		bool find(sha1_hash const& k) const$/;"	f	struct:libtorrent::bloom_filter
find_data	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^struct find_data : traversal_algorithm$/;"	s	namespace:libtorrent::dht
find_data_observer	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^	find_data_observer($/;"	f	struct:libtorrent::dht::find_data_observer
find_data_observer	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^struct find_data_observer : traversal_observer$/;"	s	namespace:libtorrent::dht
find_first_of	libtorrent/include/libtorrent/string_view.hpp	/^inline string_view::size_type find_first_of(string_view const v, char const c$/;"	f	namespace:libtorrent
find_first_of	libtorrent/include/libtorrent/string_view.hpp	/^inline string_view::size_type find_first_of(string_view const v, char const* c$/;"	f	namespace:libtorrent
find_peers	libtorrent/include/libtorrent/peer_list.hpp	/^		std::pair<const_iterator, const_iterator> find_peers(address const& a) const$/;"	f	struct:libtorrent::peer_list
find_peers	libtorrent/include/libtorrent/peer_list.hpp	/^		std::pair<iterator, iterator> find_peers(address const& a)$/;"	f	struct:libtorrent::peer_list
fingerprint	libtorrent/include/libtorrent/fingerprint.hpp	/^	struct TORRENT_DEPRECATED_EXPORT fingerprint$/;"	s	namespace:libtorrent
finished	libtorrent/include/libtorrent/http_parser.hpp	/^		bool finished() const { return m_finished; }$/;"	f	class:libtorrent::http_parser
finished	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t finished:15;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
finished	libtorrent/include/libtorrent/torrent_handle.hpp	/^			finished$/;"	e	enum:libtorrent::block_info::block_state_t
finished	libtorrent/include/libtorrent/torrent_handle.hpp	/^		int finished;$/;"	m	struct:libtorrent::partial_piece_info
finished	libtorrent/include/libtorrent/torrent_status.hpp	/^			finished,$/;"	e	enum:libtorrent::torrent_status::state_t
finished_duration	libtorrent/include/libtorrent/torrent_status.hpp	/^		seconds finished_duration;$/;"	m	struct:libtorrent::torrent_status
finished_time	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int finished_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
finished_time	libtorrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER finished_time = 0;$/;"	m	struct:libtorrent::torrent_status
first	libtorrent/include/libtorrent/ip_filter.hpp	/^	Addr first;$/;"	m	struct:libtorrent::ip_range
first	libtorrent/include/libtorrent/span.hpp	/^		span<T> first(difference_type const n) const$/;"	f	struct:libtorrent::span
first	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* first() const { TORRENT_ASSERT(m_size > 0); return m_first; }$/;"	f	struct:libtorrent::tailqueue
firstByteMark	src/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
first_deferred	libowfat/io/io_close.c	/^long first_deferred=-1;$/;"	v
first_deferred	libowfat/io_internal.h	/^my_extern long first_deferred;$/;"	v
first_readable	libowfat/io_internal.h	/^my_extern long first_readable;$/;"	v
first_requested	libtorrent/include/libtorrent/torrent.hpp	/^		time_point first_requested;$/;"	m	struct:libtorrent::time_critical_piece
first_seen	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	time_point first_seen = aux::time_now();$/;"	m	struct:libtorrent::dht::node_entry
first_time	libtorrent/include/libtorrent/extensions.hpp	/^		static constexpr add_peer_flags_t first_time = 1_bit;$/;"	m	struct:libtorrent::torrent_plugin
first_time_seen	libtorrent/include/libtorrent/peer_list.hpp	/^		bool first_time_seen = false;$/;"	m	struct:libtorrent::torrent_state
first_writeable	libowfat/io_internal.h	/^my_extern long first_writeable;$/;"	v
firsttcp	libowfat/dns/dns_transmit.c	/^static int firsttcp(struct dns_transmit *d)$/;"	f	file:
firstudp	libowfat/dns/dns_transmit.c	/^static int firstudp(struct dns_transmit *d)$/;"	f	file:
flag	include/ot_http.h	/^  STRUCT_HTTP_FLAG flag;$/;"	m	struct:http_data
flag_alive	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_alive = 6_bit;$/;"	m	struct:libtorrent::dht::observer
flag_broadcast	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		enum flags_t { flag_broadcast = 1 };$/;"	e	enum:libtorrent::broadcast_socket::flags_t
flag_done	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_done = 7_bit;$/;"	m	struct:libtorrent::dht::observer
flag_executable	libtorrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t flag_executable = 2_bit;$/;"	m	class:libtorrent::file_storage
flag_failed	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_failed = 4_bit;$/;"	m	struct:libtorrent::dht::observer
flag_hidden	libtorrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t flag_hidden = 1_bit;$/;"	m	class:libtorrent::file_storage
flag_initial	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_initial = 1_bit;$/;"	m	struct:libtorrent::dht::observer
flag_ipv6_address	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_ipv6_address = 5_bit;$/;"	m	struct:libtorrent::dht::observer
flag_no_id	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_no_id = 2_bit;$/;"	m	struct:libtorrent::dht::observer
flag_pad_file	libtorrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t flag_pad_file = 0_bit;$/;"	m	class:libtorrent::file_storage
flag_queried	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_queried = 0_bit;$/;"	m	struct:libtorrent::dht::observer
flag_short_timeout	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_short_timeout = 3_bit;$/;"	m	struct:libtorrent::dht::observer
flag_symlink	libtorrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t flag_symlink = 3_bit;$/;"	m	class:libtorrent::file_storage
flageof	libowfat/test/io.c	/^int flageof = 0;$/;"	v
flageof	libowfat/test/io2.c	/^int flageof = 0;$/;"	v
flags	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		torrent_flags_t flags = torrent_flags::default_flags;$/;"	m	struct:libtorrent::add_torrent_params
flags	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			listen_socket_flags_t flags;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
flags	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		listen_socket_flags_t flags = accept_incoming;$/;"	m	struct:libtorrent::aux::listen_socket_t
flags	libtorrent/include/libtorrent/disk_io_job.hpp	/^		disk_job_flags_t flags = disk_job_flags_t{};$/;"	m	struct:libtorrent::disk_io_job
flags	libtorrent/include/libtorrent/flags.hpp	/^namespace flags {$/;"	n	namespace:libtorrent
flags	libtorrent/include/libtorrent/ip_filter.hpp	/^	std::uint32_t flags;$/;"	m	struct:libtorrent::ip_range
flags	libtorrent/include/libtorrent/kademlia/msg.hpp	/^	int flags;$/;"	m	struct:libtorrent::dht::key_desc_t
flags	libtorrent/include/libtorrent/peer_info.hpp	/^		int flags;$/;"	m	struct:libtorrent::peer_list_entry
flags	libtorrent/include/libtorrent/peer_info.hpp	/^		peer_flags_t flags;$/;"	m	struct:libtorrent::peer_info
flags	libtorrent/include/libtorrent/torrent.hpp	/^		deadline_flags_t flags;$/;"	m	struct:libtorrent::time_critical_piece
flags_t	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		enum flags_t { flag_broadcast = 1 };$/;"	g	class:libtorrent::broadcast_socket
flags_t	libtorrent/include/libtorrent/http_parser.hpp	/^		enum flags_t { dont_parse_chunks = 1 };$/;"	g	class:libtorrent::http_parser
flags_t	libtorrent/include/libtorrent/peer_info.hpp	/^		enum flags_t$/;"	g	struct:libtorrent::peer_list_entry
flush_delete_cache	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			flush_delete_cache = 4,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::
flush_disk_cache	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr resume_data_flags_t flush_disk_cache = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
flush_expect_clear	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			flush_expect_clear = 8$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::
flush_expired	libtorrent/include/libtorrent/block_cache.hpp	/^			flush_expired,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
flush_hashed	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, flush_hashed$/;"	m	class:libtorrent::job_action_t
flush_piece	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, flush_piece$/;"	m	class:libtorrent::job_action_t
flush_range	libtorrent/include/libtorrent/block_cache.hpp	/^			flush_range,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
flush_storage	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, flush_storage$/;"	m	class:libtorrent::job_action_t
flush_write_cache	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			flush_write_cache = 2,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::
flushing	libtorrent/include/libtorrent/block_cache.hpp	/^			flushing = static_cast<int>(job_action_t::num_job_ids), \/\/ 20$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
flushing_count	libtorrent/include/libtorrent/block_cache.hpp	/^		int flushing_count = 0;$/;"	m	struct:libtorrent::cached_block_entry
fmt_2digits	libowfat/fmt/fmt_httpdate.c	/^static unsigned int fmt_2digits(char* dest,int i) {$/;"	f	file:
fmt_2digits	libowfat/fmt/fmt_iso8601.c	/^static unsigned int fmt_2digits(char* dest,int i) {$/;"	f	file:
fmt_8int	libowfat/fmt.h	78;"	d
fmt_8int	libowfat/libowfat/fmt.h	78;"	d
fmt_8long	libowfat/fmt/fmt_8long.c	/^size_t fmt_8long(char *dest,unsigned long i) {$/;"	f
fmt_8longlong	libowfat/fmt/fmt_8longlong.c	/^size_t fmt_8longlong(char *dest,unsigned long long i) {$/;"	f
fmt_asn1derlength	libowfat/fmt/fmt_asn1derlength.c	/^size_t fmt_asn1derlength(char* dest,unsigned long long l) {$/;"	f
fmt_asn1dertag	libowfat/fmt/fmt_asn1dertag.c	/^size_t fmt_asn1dertag(char* dest,unsigned long long l) {$/;"	f
fmt_base64	libowfat/textcode/fmt_base64.c	/^size_t fmt_base64(char* dest,const char* src,size_t len) {$/;"	f
fmt_base64_sa	libowfat/libowfat/textcode.h	97;"	d
fmt_base64_sa	libowfat/textcode.h	97;"	d
fmt_base64url	libowfat/textcode/fmt_base64url.c	/^size_t fmt_base64url(char* dest,const char* src,size_t len) {$/;"	f
fmt_base64url_sa	libowfat/libowfat/textcode.h	98;"	d
fmt_base64url_sa	libowfat/textcode.h	98;"	d
fmt_cescape	libowfat/textcode/fmt_cescape.c	/^size_t fmt_cescape(char* dest,const char* src,size_t len) {$/;"	f
fmt_cescape2	libowfat/textcode/fmt_cescape.c	/^size_t fmt_cescape2(char* dest,const char* src,size_t len,const char* escapeme) {$/;"	f
fmt_cescape2_sa	libowfat/libowfat/textcode.h	110;"	d
fmt_cescape2_sa	libowfat/textcode.h	110;"	d
fmt_cescape_sa	libowfat/libowfat/textcode.h	104;"	d
fmt_cescape_sa	libowfat/textcode.h	104;"	d
fmt_copybytes	libowfat/fmt.h	/^static inline size_t fmt_copybytes(char* dest,const char* src,size_t n) {$/;"	f
fmt_copybytes	libowfat/libowfat/fmt.h	/^static inline size_t fmt_copybytes(char* dest,const char* src,size_t n) {$/;"	f
fmt_double	libowfat/fmt/fmt_double.c	/^size_t fmt_double(char *dest, double d,int maxlen,int prec) {$/;"	f
fmt_escapecharc	libowfat/fmt/fmt_escapecharc.c	/^size_t fmt_escapecharc(char* dest,uint32_t ch) {$/;"	f
fmt_escapecharhtml	libowfat/fmt/fmt_escapecharhtml.c	/^size_t fmt_escapecharhtml(char* dest,uint32_t ch) {$/;"	f
fmt_escapecharhtml	libowfat/fmt/fmt_escapecharxml.c	/^size_t fmt_escapecharhtml(char* dest,uint32_t ch) {$/;"	f
fmt_escapecharjson	libowfat/fmt/fmt_escapecharjson.c	/^size_t fmt_escapecharjson(char* dest,uint32_t ch) {$/;"	f
fmt_escapecharquotedprintable	libowfat/fmt/fmt_escapecharquotedprintable.c	/^size_t fmt_escapecharquotedprintable(char* dest,uint32_t ch) {$/;"	f
fmt_escapecharquotedprintableutf8	libowfat/fmt/fmt_escapecharquotedprintableutf8.c	/^size_t fmt_escapecharquotedprintableutf8(char* dest,uint32_t ch) {$/;"	f
fmt_escapecharxml	libowfat/fmt/fmt_escapecharxml.c	/^size_t fmt_escapecharxml(char* dest,uint32_t ch) {$/;"	f
fmt_fill	libowfat/fmt/fmt_fill.c	/^size_t fmt_fill(char* dest,size_t srclen,size_t padlen,size_t maxlen) {$/;"	f
fmt_foldwhitespace	libowfat/textcode/fmt_foldwhitespace.c	/^size_t fmt_foldwhitespace(char* dest,const char* src,size_t len) {$/;"	f
fmt_hex4	libowfat/fmt/fmt_escapecharjson.c	/^static void fmt_hex4(char* dest,uint16_t w) {$/;"	f	file:
fmt_hexdump	libowfat/textcode/fmt_hexdump.c	/^size_t fmt_hexdump(char* dest,const char* src,size_t len) {$/;"	f
fmt_hexdump_sa	libowfat/libowfat/textcode.h	102;"	d
fmt_hexdump_sa	libowfat/textcode.h	102;"	d
fmt_html	libowfat/textcode/fmt_html.c	/^size_t fmt_html(char* dest,const char* src,size_t len) {$/;"	f
fmt_html_sa	libowfat/libowfat/textcode.h	103;"	d
fmt_html_sa	libowfat/textcode.h	103;"	d
fmt_html_tagarg	libowfat/textcode/fmt_html_tagarg.c	/^size_t fmt_html_tagarg(char* dest,const char* src,size_t len) {$/;"	f
fmt_httpdate	libowfat/fmt/fmt_httpdate.c	/^size_t fmt_httpdate(char* dest,time_t t) {$/;"	f
fmt_human	libowfat/fmt/fmt_human.c	/^size_t fmt_human(char* dest,unsigned long long l) {$/;"	f
fmt_humank	libowfat/fmt/fmt_humank.c	/^size_t fmt_humank(char* dest,unsigned long long l) {$/;"	f
fmt_int	libowfat/fmt.h	76;"	d
fmt_int	libowfat/libowfat/fmt.h	76;"	d
fmt_ip4	libowfat/socket/fmt_ip4.c	/^size_t fmt_ip4(char *s,const char ip[4])$/;"	f
fmt_ip6	libowfat/socket/fmt_ip6.c	/^size_t fmt_ip6(char *s,const char ip[16])$/;"	f
fmt_ip6_flat	libowfat/socket/fmt_ip6_flat.c	/^size_t fmt_ip6_flat(char *s,const char ip[16])$/;"	f
fmt_ip6c	libowfat/socket/fmt_ip6c.c	/^size_t fmt_ip6c(char *s,const char ip[16])$/;"	f
fmt_ip6if	libowfat/socket/fmt_ip6if.c	/^size_t fmt_ip6if(char* dest,const char* ip,uint32 scope_id) {$/;"	f
fmt_ip6ifc	libowfat/socket/fmt_ip6ifc.c	/^size_t fmt_ip6ifc(char *s,const char ip[16],uint32 scope_id)$/;"	f
fmt_iso8601	libowfat/fmt/fmt_iso8601.c	/^size_t fmt_iso8601(char* dest,time_t t) {$/;"	f
fmt_jsonescape	libowfat/textcode/fmt_jsonescape.c	/^size_t fmt_jsonescape(char* dest,const char* src,size_t len) {$/;"	f
fmt_jsonescape_sa	libowfat/libowfat/textcode.h	106;"	d
fmt_jsonescape_sa	libowfat/textcode.h	106;"	d
fmt_ldapescape	libowfat/textcode/fmt_ldapescape.c	/^size_t fmt_ldapescape(char* dest,const char* src,size_t len) {$/;"	f
fmt_ldapescape2	libowfat/textcode/fmt_ldapescape2.c	/^size_t fmt_ldapescape2(char* dest,const char* src,size_t len,const char* escapeme) {$/;"	f
fmt_ldapescape_sa	libowfat/libowfat/textcode.h	105;"	d
fmt_ldapescape_sa	libowfat/textcode.h	105;"	d
fmt_long	libowfat/fmt/fmt_long.c	/^size_t fmt_long(char *dest,long int i) {$/;"	f
fmt_longlong	libowfat/fmt/fmt_longlong.c	/^size_t fmt_longlong(char *dest,signed long long int i) {$/;"	f
fmt_minus	libowfat/fmt/fmt_minus.c	/^size_t fmt_minus(char *dest,int i) {$/;"	f
fmt_netstring	libowfat/fmt/fmt_netstring.c	/^size_t fmt_netstring(char* dest,const char* src,size_t len) {$/;"	f
fmt_oct3	libowfat/fmt/fmt_escapecharc.c	/^static void fmt_oct3(char* dest,uint8_t w) {$/;"	f	file:
fmt_pad	libowfat/fmt/fmt_pad.c	/^size_t fmt_pad(char* dest,const char* src,size_t srclen,size_t padlen,size_t maxlen) {$/;"	f
fmt_pb_double	libowfat/fmt/fmt_pb_double.c	/^size_t fmt_pb_double(char* dest,size_t fieldno,double d) {$/;"	f
fmt_pb_float	libowfat/fmt/fmt_pb_float.c	/^size_t fmt_pb_float(char* dest,size_t fieldno,float f) {$/;"	f
fmt_pb_int	libowfat/fmt/fmt_pb_int.c	/^size_t fmt_pb_int(char* dest,size_t fieldno,unsigned long long l) {$/;"	f
fmt_pb_sint	libowfat/fmt/fmt_pb_sint.c	/^size_t fmt_pb_sint(char* dest,size_t fieldno,signed long long l) {$/;"	f
fmt_pb_string	libowfat/fmt/fmt_pb_string.c	/^size_t fmt_pb_string(char* dest,size_t fieldno,const char* s,size_t l) {$/;"	f
fmt_pb_tag	libowfat/fmt/fmt_pb_tag.c	/^size_t fmt_pb_tag(char* dest,size_t fieldno,unsigned char type) {$/;"	f
fmt_pb_type0_int	libowfat/fmt/fmt_varint.c	/^size_t fmt_pb_type0_int(char* dest,unsigned long long l) {$/;"	f
fmt_pb_type0_sint	libowfat/fmt/fmt_pb_type0_sint.c	/^size_t fmt_pb_type0_sint(char* dest,signed long long l) {$/;"	f
fmt_pb_type1_double	libowfat/fmt/fmt_pb_type1_double.c	/^size_t fmt_pb_type1_double(char* dest,double d) {$/;"	f
fmt_pb_type1_fixed64	libowfat/fmt/fmt_pb_type1_fixed64.c	/^size_t fmt_pb_type1_fixed64(char* dest,uint64_t l) {$/;"	f
fmt_pb_type2_string	libowfat/fmt/fmt_pb_type2_string.c	/^size_t fmt_pb_type2_string(char* dest,const char* s,size_t l) {$/;"	f
fmt_pb_type5_fixed32	libowfat/fmt/fmt_pb_type5_fixed32.c	/^size_t fmt_pb_type5_fixed32(char* dest,uint32_t l) {$/;"	f
fmt_pb_type5_float	libowfat/fmt/fmt_pb_type5_float.c	/^size_t fmt_pb_type5_float(char* dest,float f) {$/;"	f
fmt_plusminus	libowfat/fmt/fmt_plusminus.c	/^size_t fmt_plusminus(char *dest,int i) {$/;"	f
fmt_quotedprintable	libowfat/textcode/fmt_quotedprintable.c	/^size_t fmt_quotedprintable(char* dest,const char* src,size_t len) {$/;"	f
fmt_quotedprintable2	libowfat/textcode/fmt_quotedprintable.c	/^size_t fmt_quotedprintable2(char* dest,const char* src,size_t len,const char* escapeme) {$/;"	f
fmt_quotedprintable2_sa	libowfat/libowfat/textcode.h	108;"	d
fmt_quotedprintable2_sa	libowfat/textcode.h	108;"	d
fmt_quotedprintable_sa	libowfat/libowfat/textcode.h	99;"	d
fmt_quotedprintable_sa	libowfat/textcode.h	99;"	d
fmt_str	libowfat/fmt/fmt_str.c	/^size_t fmt_str(char *out,const char *in) {$/;"	f
fmt_strm	libowfat/fmt.h	207;"	d
fmt_strm	libowfat/libowfat/fmt.h	207;"	d
fmt_strm_alloca	libowfat/fmt.h	213;"	d
fmt_strm_alloca	libowfat/libowfat/fmt.h	213;"	d
fmt_strm_internal	libowfat/fmt/fmt_strm_internal.c	/^size_t fmt_strm_internal(char* dest, ...) {$/;"	f
fmt_strn	libowfat/fmt/fmt_strn.c	/^size_t fmt_strn(char *out,const char *in,size_t limit) {$/;"	f
fmt_to_array	libowfat/textcode/fmt_to_array.c	/^void fmt_to_array(size_t (*func)(char*,const char*,size_t),$/;"	f
fmt_to_sa	libowfat/textcode/fmt_to_sa.c	/^int fmt_to_sa(size_t (*func)(char*,const char*,size_t),$/;"	f
fmt_tofrom_array	libowfat/textcode/fmt_tofrom_array.c	/^void fmt_tofrom_array(size_t (*func)(char*,const char*,size_t),$/;"	f
fmt_tohex	libowfat/fmt/fmt_tohex.c	/^char fmt_tohex(char c) {$/;"	f
fmt_uint	libowfat/fmt.h	75;"	d
fmt_uint	libowfat/libowfat/fmt.h	75;"	d
fmt_uint0	libowfat/fmt.h	86;"	d
fmt_uint0	libowfat/libowfat/fmt.h	86;"	d
fmt_ulong	libowfat/fmt/fmt_ulong.c	/^size_t fmt_ulong(char *dest,unsigned long i) {$/;"	f
fmt_ulong0	libowfat/fmt/fmt_ulong0.c	/^size_t fmt_ulong0(char *dest,unsigned long i,size_t pad) {$/;"	f
fmt_ulonglong	libowfat/fmt/fmt_ulonglong.c	/^size_t fmt_ulonglong(char *dest,unsigned long long int i) {$/;"	f
fmt_urlencoded	libowfat/textcode/fmt_urlencoded.c	/^size_t fmt_urlencoded(char* dest,const char* src,size_t len) {$/;"	f
fmt_urlencoded2	libowfat/textcode/fmt_urlencoded.c	/^size_t fmt_urlencoded2(char* dest,const char* src,size_t len,const char* escapeme) {$/;"	f
fmt_urlencoded2_sa	libowfat/libowfat/textcode.h	109;"	d
fmt_urlencoded2_sa	libowfat/textcode.h	109;"	d
fmt_urlencoded_sa	libowfat/libowfat/textcode.h	100;"	d
fmt_urlencoded_sa	libowfat/textcode.h	100;"	d
fmt_utf8	libowfat/fmt/fmt_utf8.c	/^size_t fmt_utf8(char *dest,uint32_t n) {$/;"	f
fmt_uuencoded	libowfat/textcode/fmt_uuencoded.c	/^size_t fmt_uuencoded(char* dest,const char* src,size_t len) {$/;"	f
fmt_uuencoded_sa	libowfat/libowfat/textcode.h	96;"	d
fmt_uuencoded_sa	libowfat/textcode.h	96;"	d
fmt_varint	libowfat/fmt/fmt_varint.c	/^size_t fmt_varint(char* dest,unsigned long long l) {$/;"	f
fmt_xint	libowfat/fmt.h	77;"	d
fmt_xint	libowfat/libowfat/fmt.h	77;"	d
fmt_xlong	libowfat/fmt/fmt_xlong.c	/^size_t fmt_xlong(char *dest,unsigned long i) {$/;"	f
fmt_xlonglong	libowfat/fmt/fmt_xlonglong.c	/^size_t fmt_xlonglong(char *dest,unsigned long long i) {$/;"	f
fmt_xml	libowfat/textcode/fmt_xml.c	/^size_t fmt_xml(char* dest,const char* src,size_t len) {$/;"	f
fmt_xmlescape	libowfat/fmt/fmt_xmlescape.c	/^size_t fmt_xmlescape(char* dest,uint32_t ch) {$/;"	f
fmt_yenc	libowfat/textcode/fmt_yenc.c	/^size_t fmt_yenc(char* dest,const char* src,size_t len) {$/;"	f
fmt_yenc_sa	libowfat/libowfat/textcode.h	101;"	d
fmt_yenc_sa	libowfat/textcode.h	101;"	d
foo	libowfat/tryinline.c	/^static inline int foo(int bar) { return bar+1; }$/;"	f	file:
foo	libowfat/trysysel.c	/^void foo()$/;"	f
for_each_node	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	void for_each_node(std::function<void(node_entry const&)> f) const$/;"	f	class:libtorrent::dht::routing_table
forbidden	libtorrent/include/libtorrent/error_code.hpp	/^			forbidden = 403,$/;"	e	enum:libtorrent::errors::http_errors
force_copy	libtorrent/include/libtorrent/disk_interface.hpp	/^		static constexpr disk_job_flags_t force_copy = 0_bit;$/;"	m	struct:libtorrent::disk_interface
force_erase	libtorrent/include/libtorrent/peer_list.hpp	/^		static constexpr erase_peer_flags_t force_erase = 1_bit;$/;"	m	struct:libtorrent::peer_list
force_proxy	libtorrent/include/libtorrent/settings_pack.hpp	/^			force_proxy TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
forced	libtorrent/include/libtorrent/session_settings.hpp	/^			forced,$/;"	e	enum:libtorrent::pe_settings::enc_policy
fp_err	src/log.c	/^FILE *fp_err = NULL;$/;"	v
fp_log	src/log.c	/^FILE *fp_log = NULL;$/;"	v
free_deleter	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^	struct free_deleter$/;"	s	namespace:libtorrent::aux
free_fn	include/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
free_peerlist	src/proxy.c	/^void free_peerlist( ot_peerlist *peer_list ) {$/;"	f
free_peerlist	src/trackerlogic.c	/^void free_peerlist( ot_peerlist *peer_list ) {$/;"	f
free_upload_slots	libtorrent/include/libtorrent/torrent.hpp	/^		bool free_upload_slots() const$/;"	f	class:libtorrent::torrent
freechain	libowfat/array/iarray_free.c	/^static void freechain(iarray_page* p,size_t pagesize) {$/;"	f	file:
from	libtorrent/include/libtorrent/udp_socket.hpp	/^			udp::endpoint from;$/;"	m	struct:libtorrent::udp_socket::packet
from_hex	libtorrent/include/libtorrent/hex.hpp	/^	inline bool from_hex(char const *in, int len, char* out)$/;"	f	namespace:libtorrent
from_span_t	libtorrent/include/libtorrent/torrent_info.hpp	/^	class from_span_t {};$/;"	c	namespace:libtorrent
from_string	libtorrent/include/libtorrent/bloom_filter.hpp	/^		void from_string(char const* str)$/;"	f	struct:libtorrent::bloom_filter
fromhex	src/scan_urlencoded_query.c	/^static unsigned char fromhex(unsigned char x) {$/;"	f	file:
front	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		T* front()$/;"	f	struct:libtorrent::heterogeneous_queue
front	libtorrent/include/libtorrent/linked_list.hpp	/^		T const* front() const { return m_first; }$/;"	f	struct:libtorrent::linked_list
front	libtorrent/include/libtorrent/linked_list.hpp	/^		T* front() { return m_first; }$/;"	f	struct:libtorrent::linked_list
full_block_bytes	libtorrent/include/libtorrent/piece_block_progress.hpp	/^		int full_block_bytes;$/;"	m	struct:libtorrent::piece_block_progress
fullscrape_deinit	include/ot_fullscrape.h	18;"	d
fullscrape_deinit	src/ot_fullscrape.c	/^void fullscrape_deinit( ) {$/;"	f
fullscrape_deliver	src/ot_fullscrape.c	/^void fullscrape_deliver( int64 sock, ot_tasktype tasktype ) {$/;"	f
fullscrape_increase	src/ot_fullscrape.c	/^static int fullscrape_increase( int *iovec_entries, struct iovec **iovector,$/;"	f	file:
fullscrape_init	include/ot_fullscrape.h	17;"	d
fullscrape_init	src/ot_fullscrape.c	/^void fullscrape_init( ) {$/;"	f
fullscrape_make	src/ot_fullscrape.c	/^static void fullscrape_make( int *iovec_entries, struct iovec **iovector, ot_tasktype mode ) {$/;"	f	file:
fullscrape_worker	src/ot_fullscrape.c	/^static void * fullscrape_worker( void * args ) {$/;"	f	file:
g_accesslist	src/ot_accesslist.c	/^static ot_hash *g_accesslist;$/;"	v	file:
g_accesslist_filename	src/ot_accesslist.c	/^       char    *g_accesslist_filename;$/;"	v
g_accesslist_mutex	src/ot_accesslist.c	/^static pthread_mutex_t g_accesslist_mutex;$/;"	v	file:
g_accesslist_size	src/ot_accesslist.c	/^static size_t   g_accesslist_size;$/;"	v	file:
g_adminip_addresses	src/ot_accesslist.c	/^static ot_ip6         g_adminip_addresses[OT_ADMINIP_MAX];$/;"	v	file:
g_adminip_count	src/ot_accesslist.c	/^static unsigned int   g_adminip_count = 0;$/;"	v	file:
g_adminip_permissions	src/ot_accesslist.c	/^static ot_permissions g_adminip_permissions[OT_ADMINIP_MAX];$/;"	v	file:
g_connection_count	src/proxy.c	/^static int        g_connection_count;$/;"	v	file:
g_connection_reconn	src/proxy.c	/^static ot_time    g_connection_reconn;$/;"	v	file:
g_connections	src/proxy.c	/^static proxy_peer g_connections[MAX_PEERS];$/;"	v	file:
g_hour_of_the_key	src/ot_udp.c	/^static ot_time  g_hour_of_the_key;$/;"	v	file:
g_inbuffer	src/proxy.c	/^static uint8_t  g_inbuffer[LIVESYNC_INCOMING_BUFFSIZE];$/;"	v	file:
g_key_of_the_hour	src/ot_udp.c	/^static uint32_t g_key_of_the_hour[2] = {0};$/;"	v	file:
g_logchain_first	src/ot_accesslist.c	/^ot_log *g_logchain_first, *g_logchain_last;$/;"	v
g_logchain_last	src/ot_accesslist.c	/^ot_log *g_logchain_first, *g_logchain_last;$/;"	v
g_lognets_list	src/ot_accesslist.c	/^static ot_vector g_lognets_list;$/;"	v	file:
g_lognets_list_mutex	src/ot_accesslist.c	/^static pthread_mutex_t g_lognets_list_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
g_modest_fullscrape_mutex	src/ot_http.c	/^static pthread_mutex_t g_modest_fullscrape_mutex = PTHREAD_MUTEX_INITIALIZER; $/;"	v	file:
g_modest_fullscrape_timeouts	src/ot_http.c	/^static ot_vector g_modest_fullscrape_timeouts;$/;"	v	file:
g_next_packet_time	src/ot_livesync.c	/^static ot_time  g_next_packet_time;$/;"	v	file:
g_next_packet_time	src/proxy.c	/^static ot_time  g_next_packet_time;$/;"	v	file:
g_now_minutes	include/trackerlogic.h	62;"	d
g_now_seconds	src/opentracker.c	/^time_t       g_now_seconds;$/;"	v
g_opentracker_running	src/opentracker.c	/^volatile int g_opentracker_running = 1;$/;"	v
g_outbuf	src/ot_livesync.c	/^char            g_outbuf[LIVESYNC_OUTGOING_BUFFSIZE_PEERS];$/;"	v
g_outbuf_data	src/ot_livesync.c	/^static size_t   g_outbuf_data;$/;"	v	file:
g_outbuf_mutex	src/ot_livesync.c	/^static pthread_mutex_t g_outbuf_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
g_peerbuffer_highwater	src/proxy.c	/^static uint8_t *g_peerbuffer_highwater = g_peerbuffer_start + LIVESYNC_OUTGOING_BUFFSIZE_PEERS - LIVESYNC_OUTGOING_WATERMARK_PEERS;$/;"	v	file:
g_peerbuffer_pos	src/proxy.c	/^static uint8_t *g_peerbuffer_pos;$/;"	v	file:
g_peerbuffer_start	src/proxy.c	/^static uint8_t  g_peerbuffer_start[LIVESYNC_OUTGOING_BUFFSIZE_PEERS];$/;"	v	file:
g_proxies_list	src/ot_accesslist.c	/^static ot_vector g_proxies_list;$/;"	v	file:
g_proxies_list_mutex	src/ot_accesslist.c	/^static pthread_mutex_t g_proxies_list_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
g_redirecturl	src/opentracker.c	/^char *       g_redirecturl;$/;"	v
g_rijndael_round_key	src/ot_udp.c	/^static uint32_t g_rijndael_round_key[44] = {0};$/;"	v	file:
g_self_pipe	src/opentracker.c	/^int          g_self_pipe[2];$/;"	v
g_self_pipe	src/proxy.c	/^int      g_self_pipe[2];$/;"	v
g_serverdir	src/opentracker.c	/^static char * g_serverdir;$/;"	v	file:
g_serverip	src/proxy.c	/^ot_ip6   g_serverip;$/;"	v
g_serverport	src/proxy.c	/^uint16_t g_serverport = 9009;$/;"	v
g_serveruser	src/opentracker.c	/^static char * g_serveruser;$/;"	v	file:
g_socket_in	src/ot_livesync.c	/^static int64    g_socket_in = -1;$/;"	v	file:
g_socket_in	src/proxy.c	/^static int64    g_socket_in = -1;$/;"	v	file:
g_socket_out	src/ot_livesync.c	/^static int64    g_socket_out = -1;$/;"	v	file:
g_socket_out	src/proxy.c	/^static int64    g_socket_out = -1;$/;"	v	file:
g_stats_path	src/ot_http.c	/^char   *g_stats_path;$/;"	v
g_stats_path_len	src/ot_http.c	/^ssize_t g_stats_path_len;$/;"	v
g_torrent_count	src/ot_mutex.c	/^static size_t    g_torrent_count;$/;"	v	file:
g_tracker_id	src/opentracker.c	/^uint32_t     g_tracker_id;$/;"	v
g_tracker_id	src/proxy.c	/^uint32_t g_tracker_id;$/;"	v
g_udp_workers	src/opentracker.c	/^static unsigned int g_udp_workers;$/;"	v	file:
g_version_accesslist_c	src/ot_accesslist.c	/^const char *g_version_accesslist_c = "$Source$: $Revision$\\n";$/;"	v
g_version_clean_c	src/ot_clean.c	/^const char *g_version_clean_c = "$Source$: $Revision$\\n";$/;"	v
g_version_fullscrape_c	src/ot_fullscrape.c	/^const char *g_version_fullscrape_c = "$Source$: $Revision$\\n";$/;"	v
g_version_http_c	src/ot_http.c	/^const char *g_version_http_c = "$Source$: $Revision$\\n";$/;"	v
g_version_iovec_c	src/ot_iovec.c	/^const char *g_version_iovec_c = "$Source$: $Revision$\\n";$/;"	v
g_version_livesync_c	src/ot_livesync.c	/^const char *g_version_livesync_c = "$Source$: $Revision$\\n";$/;"	v
g_version_mutex_c	src/ot_mutex.c	/^const char *g_version_mutex_c = "$Source$: $Revision$\\n";$/;"	v
g_version_opentracker_c	src/opentracker.c	/^const char *g_version_opentracker_c = "$Source$: $Revision$\\n";$/;"	v
g_version_rijndael_c	src/ot_rijndael.c	/^const char *g_version_rijndael_c = "$Source$: $Revision$\\n";$/;"	v
g_version_scan_urlencoded_query_c	src/scan_urlencoded_query.c	/^const char *g_version_scan_urlencoded_query_c = "$Source$: $Revision$\\n";$/;"	v
g_version_stats_c	src/ot_stats.c	/^const char *g_version_stats_c = "$Source$: $Revision$\\n";$/;"	v
g_version_sync_c	src/ot_sync.c	/^const char *g_version_sync_c = "$Source$: $Revision$\\n";$/;"	v
g_version_trackerlogic_c	src/trackerlogic.c	/^const char *g_version_trackerlogic_c = "$Source$: $Revision$\\n";$/;"	v
g_version_udp_c	src/ot_udp.c	/^const char *g_version_udp_c = "$Source$: $Revision$\\n";$/;"	v
g_version_vector_c	src/ot_vector.c	/^const char *g_version_vector_c = "$Source$: $Revision$\\n";$/;"	v
g_woodpeckers_mutex	src/ot_stats.c	/^static pthread_mutex_t g_woodpeckers_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
gain_factor	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int gain_factor() const { return m_sett.get_int(settings_pack::utp_gain_factor); }$/;"	f	struct:libtorrent::utp_socket_manager
gateway	libtorrent/include/libtorrent/enum_net.hpp	/^		address gateway;$/;"	m	struct:libtorrent::ip_route
gcc_path	libowfat/GNUmakefile	/^gcc_path = $(foreach dir,$(path),$(wildcard $(dir)\/gcc))$/;"	m
general_failure	libtorrent/include/libtorrent/socks5_stream.hpp	/^		general_failure,$/;"	e	enum:libtorrent::socks_error::socks_error_code
generation_id	libtorrent/include/libtorrent/aux_/route.h	/^	uint32_t generation_id;		\/* route generation id *\/$/;"	m	struct:rtentry
get	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		T get(Container const& c, int const name, int const type) const$/;"	f	struct:libtorrent::aux::session_settings_single_thread
get	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		template <class S> S const* get() const$/;"	f	struct:libtorrent::aux::socket_type
get	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		template <class S> S* get()$/;"	f	struct:libtorrent::aux::socket_type
get	libtorrent/include/libtorrent/linked_list.hpp	/^		T const* get() const { return m_current; }$/;"	f	struct:libtorrent::list_iterator
get	libtorrent/include/libtorrent/linked_list.hpp	/^		T* get() { return m_current; }$/;"	f	struct:libtorrent::list_iterator
get	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* get() const { return m_current; }$/;"	f	struct:libtorrent::tailqueue_iterator
get_active_handle	src/torrent_view.cpp	/^lt::torrent_handle torrent_view::get_active_handle() const$/;"	f	class:torrent_view
get_active_torrent	src/torrent_view.cpp	/^lt::torrent_status const& torrent_view::get_active_torrent() const$/;"	f	class:lt::torrent_view
get_all	libtorrent/include/libtorrent/linked_list.hpp	/^		T* get_all()$/;"	f	struct:libtorrent::linked_list
get_all	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* get_all()$/;"	f	struct:libtorrent::tailqueue
get_bdecode_category	libtorrent/include/libtorrent/bdecode.hpp	/^inline boost::system::error_category& get_bdecode_category()$/;"	f	namespace:libtorrent
get_bit	libtorrent/include/libtorrent/bitfield.hpp	/^		bool get_bit(IndexType const index) const$/;"	f	namespace:libtorrent
get_bool	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		bool get_bool(int name) const$/;"	f	struct:libtorrent::aux::session_settings
get_bool	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		bool get_bool(int name) const$/;"	f	struct:libtorrent::aux::session_settings_single_thread
get_commonlog_time	src/tools.c	/^char *get_commonlog_time(void)$/;"	f
get_dht_settings	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			dht::dht_settings const& get_dht_settings() const { return m_dht_settings; }$/;"	f	class:libtorrent::aux::final::dht
get_executor	libtorrent/include/libtorrent/proxy_base.hpp	/^	executor_type get_executor() { return m_sock.get_executor(); }$/;"	f	class:libtorrent::proxy_base
get_executor	libtorrent/include/libtorrent/ssl_stream.hpp	/^	executor_type get_executor() { return m_sock.get_executor(); }$/;"	f	class:libtorrent::ssl_stream
get_executor	libtorrent/include/libtorrent/utp_stream.hpp	/^	executor_type get_executor() { return m_io_service.get_executor(); }$/;"	f	struct:libtorrent::utp_stream
get_gzip_category	libtorrent/include/libtorrent/gzip.hpp	/^	inline boost::system::error_category& get_gzip_category()$/;"	f	namespace:libtorrent
get_hash	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		void get_hash(char *digest, std::size_t digest_size)$/;"	f	struct:libtorrent::aux::crypt_hash
get_hash_xor_mask	libtorrent/include/libtorrent/pe_crypto.hpp	/^		sha1_hash const& get_hash_xor_mask() const { return m_xor_mask; }$/;"	f	class:libtorrent::dh_key_exchange
get_hotplug_sock	src/tools.c	/^int get_hotplug_sock(void)$/;"	f
get_http_category	libtorrent/include/libtorrent/error_code.hpp	/^	inline boost::system::error_category& get_http_category()$/;"	f	namespace:libtorrent
get_i2p_category	libtorrent/include/libtorrent/i2p_stream.hpp	/^	inline boost::system::error_category& get_i2p_category()$/;"	f	namespace:libtorrent
get_int	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		int get_int(int name) const$/;"	f	struct:libtorrent::aux::session_settings
get_int	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		int get_int(int name) const$/;"	f	struct:libtorrent::aux::session_settings_single_thread
get_interface	libtorrent/include/libtorrent/operations.hpp	/^		get_interface,$/;"	m	class:libtorrent::operation_t
get_io_service	libtorrent/include/libtorrent/io_service_fwd.hpp	/^io_service& get_io_service(T& o) { return static_cast<io_service&>(o.get_executor().context()); }$/;"	f	namespace:libtorrent
get_io_service	libtorrent/include/libtorrent/peer_connection.hpp	/^		io_service& get_io_service() { return m_ios; }$/;"	f	class:libtorrent::peer_connection
get_io_service	libtorrent/include/libtorrent/proxy_base.hpp	/^	io_service& get_io_service()$/;"	f	class:libtorrent::proxy_base
get_io_service	libtorrent/include/libtorrent/ssl_stream.hpp	/^	io_service& get_io_service()$/;"	f	class:libtorrent::ssl_stream
get_io_service	libtorrent/include/libtorrent/tracker_manager.hpp	/^		io_service& get_io_service() { return lt::get_io_service(m_timeout); }$/;"	f	struct:libtorrent::timeout_handler
get_io_service	libtorrent/include/libtorrent/udp_socket.hpp	/^		io_service& get_io_service() { return lt::get_io_service(m_socket); }$/;"	f	class:libtorrent::udp_socket
get_io_service	libtorrent/include/libtorrent/utp_stream.hpp	/^	io_service& get_io_service() { return m_io_service; }$/;"	f	struct:libtorrent::utp_stream
get_ip_filter	libtorrent/include/libtorrent/torrent.hpp	/^		ip_filter const* get_ip_filter() { return m_ip_filter.get(); }$/;"	f	class:libtorrent::torrent
get_item	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^class get_item : public find_data$/;"	c	namespace:libtorrent::dht
get_item_observer	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^	get_item_observer($/;"	f	class:libtorrent::dht::get_item_observer
get_item_observer	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^class get_item_observer : public find_data_observer$/;"	c	namespace:libtorrent::dht
get_library_handle	libtorrent/include/libtorrent/aux_/win_util.hpp	/^	HMODULE get_library_handle()$/;"	f	namespace:libtorrent::aux
get_library_procedure	libtorrent/include/libtorrent/aux_/win_util.hpp	/^	Signature get_library_procedure(LPCSTR name)$/;"	f	namespace:libtorrent::aux
get_libtorrent_category	libtorrent/include/libtorrent/error_code.hpp	/^	inline boost::system::error_category& get_libtorrent_category()$/;"	f	namespace:libtorrent
get_links	libtorrent/include/libtorrent/resolve_links.hpp	/^		aux::vector<link_t, file_index_t> const& get_links() const$/;"	f	class:libtorrent::resolve_links::aux
get_local_key	libtorrent/include/libtorrent/pe_crypto.hpp	/^		key_t const& get_local_key() const { return m_dh_local_key; }$/;"	f	class:libtorrent::dh_key_exchange
get_netcard_status	src/tools.c	/^int get_netcard_status()$/;"	f
get_network_info	src/tools.c	/^int get_network_info(void)$/;"	f
get_node	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	node& get_node() const { return m_node; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
get_option	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		error_code get_option(GettableSocketOption& opt, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
get_option	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void get_option(GettableSocketOption& opt)$/;"	f	struct:libtorrent::aux::socket_type
get_option	libtorrent/include/libtorrent/proxy_base.hpp	/^	error_code get_option(GettableSocketOption& opt, error_code& ec)$/;"	f	class:libtorrent::proxy_base
get_option	libtorrent/include/libtorrent/proxy_base.hpp	/^	void get_option(GettableSocketOption& opt)$/;"	f	class:libtorrent::proxy_base
get_option	libtorrent/include/libtorrent/ssl_stream.hpp	/^	error_code get_option(GettableSocketOption& opt, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
get_option	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void get_option(GettableSocketOption& opt)$/;"	f	class:libtorrent::ssl_stream
get_option	libtorrent/include/libtorrent/udp_socket.hpp	/^		void get_option(SocketOption const& opt, error_code& ec)$/;"	f	class:libtorrent::udp_socket
get_option	libtorrent/include/libtorrent/udp_socket.hpp	/^		void get_option(SocketOption& opt, error_code& ec)$/;"	f	class:libtorrent::udp_socket
get_option	libtorrent/include/libtorrent/utp_stream.hpp	/^	error_code get_option(GettableSocketOption&, error_code& ec)$/;"	f	struct:libtorrent::utp_stream
get_option	libtorrent/include/libtorrent/utp_stream.hpp	/^	void get_option(GettableSocketOption&) {}$/;"	f	struct:libtorrent::utp_stream
get_peers	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^struct get_peers : find_data$/;"	s	namespace:libtorrent::dht
get_peers_observer	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	get_peers_observer($/;"	f	struct:libtorrent::dht::get_peers_observer
get_peers_observer	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^struct get_peers_observer : find_data_observer$/;"	s	namespace:libtorrent::dht
get_piece	libtorrent/include/libtorrent/block_cache.hpp	/^		piece_index_t get_piece() const { return piece; }$/;"	f	struct:libtorrent::cached_piece_entry
get_piece	src/print.cpp	/^int get_piece(lt::bitfield const& p, int index)$/;"	f
get_pieces	libtorrent/include/libtorrent/aux_/suggest_piece.hpp	/^	int get_pieces(std::vector<piece_index_t>& p$/;"	f	struct:libtorrent::aux::suggest_piece
get_pointers	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		void get_pointers(std::vector<T*>& out)$/;"	f	struct:libtorrent::heterogeneous_queue
get_provider	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		HCRYPTPROV get_provider()$/;"	f	struct:libtorrent::aux::crypt_hash
get_proxy_settings	libtorrent/include/libtorrent/udp_socket.hpp	/^		aux::proxy_settings const& get_proxy_settings() { return m_proxy_settings; }$/;"	f	class:libtorrent::udp_socket::aux
get_ptr	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		std::weak_ptr<listen_socket_t> get_ptr() const { return m_sock; }$/;"	f	struct:libtorrent::aux::listen_socket_handle
get_secret	libtorrent/include/libtorrent/pe_crypto.hpp	/^		key_t const& get_secret() const { return m_dh_shared_secret; }$/;"	f	class:libtorrent::dh_key_exchange
get_send_barrier	libtorrent/include/libtorrent/peer_connection.hpp	/^		int get_send_barrier() const { return m_send_barrier; }$/;"	f	class:libtorrent::peer_connection
get_socket	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::shared_ptr<aux::socket_type> get_socket() const { return m_socket; }$/;"	f	class:libtorrent::peer_connection
get_socket_name	libtorrent/include/libtorrent/alert_types.hpp	/^			get_socket_name TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
get_socks_category	libtorrent/include/libtorrent/socks5_stream.hpp	/^inline boost::system::error_category& get_socks_category()$/;"	f	namespace:libtorrent
get_storage	libtorrent/include/libtorrent/block_cache.hpp	/^		void* get_storage() const { return storage.get(); }$/;"	f	struct:libtorrent::cached_piece_entry
get_str	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		std::string const& get_str(int name) const$/;"	f	class:libtorrent::aux::session_settings::std
get_str	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		std::string const& get_str(int name) const$/;"	f	class:libtorrent::aux::session_settings_single_thread::std
get_suggest_pieces	libtorrent/include/libtorrent/torrent.hpp	/^		int get_suggest_pieces(std::vector<piece_index_t>& p$/;"	f	class:libtorrent::torrent
get_type	libtorrent/include/libtorrent/utp_stream.hpp	/^	int get_type() const { return type_ver >> 4; }$/;"	f	struct:libtorrent::utp_header
get_unchoke_priority	libtorrent/include/libtorrent/extensions.hpp	/^		virtual uint64_t get_unchoke_priority(peer_connection_handle const& \/* peer *\/)$/;"	f	struct:libtorrent::plugin
get_upnp_category	libtorrent/include/libtorrent/upnp.hpp	/^	inline boost::system::error_category& get_upnp_category()$/;"	f	namespace:libtorrent
get_usb_info	src/tools.c	/^void get_usb_info(int usb_number)$/;"	f
get_value_for_net	src/ot_accesslist.c	/^void *get_value_for_net( const ot_ip6 address, const ot_vector *vector, const size_t member_size ) {$/;"	f
get_version	libtorrent/include/libtorrent/utp_stream.hpp	/^	int get_version() const { return type_ver & 0xf; }$/;"	f	struct:libtorrent::utp_header
getname	libtorrent/include/libtorrent/operations.hpp	/^		getname,$/;"	m	class:libtorrent::operation_t
getpeername	libtorrent/include/libtorrent/operations.hpp	/^		getpeername,$/;"	m	class:libtorrent::operation_t
ghost_hit_lru1	libtorrent/include/libtorrent/block_cache.hpp	/^			ghost_hit_lru1,$/;"	e	enum:libtorrent::block_cache::cache_op_t
ghost_hit_lru2	libtorrent/include/libtorrent/block_cache.hpp	/^			ghost_hit_lru2$/;"	e	enum:libtorrent::block_cache::cache_op_t
global_mapping_t	libtorrent/include/libtorrent/upnp.hpp	/^	struct global_mapping_t$/;"	s	struct:libtorrent::final
good	libtorrent/include/libtorrent/pe_crypto.hpp	/^		bool good() const { return true; }$/;"	f	class:libtorrent::dh_key_exchange
graceful_pause	libtorrent/include/libtorrent/torrent.hpp	/^		bool graceful_pause() const { return m_graceful_pause_mode; }$/;"	f	class:libtorrent::torrent
graceful_pause	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr pause_flags_t graceful_pause = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
groupip_1	src/ot_livesync.c	/^char groupip_1[4] = { 224,0,23,5 };$/;"	v
groupip_1	src/proxy.c	/^char     groupip_1[4] = { 224,0,23,5 };$/;"	v
grow_capacity	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		void grow_capacity(int const size)$/;"	f	struct:libtorrent::heterogeneous_queue
guided_read_cache	libtorrent/include/libtorrent/settings_pack.hpp	/^			guided_read_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
gzip_errors	libtorrent/include/libtorrent/gzip.hpp	/^	namespace gzip_errors$/;"	n	namespace:libtorrent
h	libowfat/cdb_make.h	/^struct cdb_hp { uint32 h; uint32 p; } ;$/;"	m	struct:cdb_hp
h	libowfat/io.h	/^  unsigned int h,l; \/* high, low *\/$/;"	m	struct:iomux
h	libowfat/io/io_passfd.c	/^  struct cmsghdr h;$/;"	m	union:fdmsg	typeref:struct:fdmsg::cmsghdr	file:
h	libowfat/io/io_receivefd.c	/^  struct cmsghdr h;$/;"	m	union:fdmsg	typeref:struct:fdmsg::cmsghdr	file:
h	libowfat/libowfat/cdb_make.h	/^struct cdb_hp { uint32 h; uint32 p; } ;$/;"	m	struct:cdb_hp
h	libowfat/libowfat/io.h	/^  unsigned int h,l; \/* high, low *\/$/;"	m	struct:iomux
h	libtorrent/include/libtorrent/block_cache.hpp	/^		hasher h;$/;"	m	struct:libtorrent::partial_hash
half_open_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			half_open_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
handle	libtorrent/include/libtorrent/alert_types.hpp	/^		torrent_handle handle;$/;"	m	struct:libtorrent::torrent_alert
handle	libtorrent/include/libtorrent/torrent_status.hpp	/^		torrent_handle handle;$/;"	m	struct:libtorrent::torrent_status
handle_accept	src/opentracker.c	/^static void handle_accept( const int64 serversocket ) {$/;"	f	file:
handle_accept	src/proxy.c	/^static void handle_accept( int64 serversocket ) {$/;"	f	file:
handle_alert	src/client_test.cpp	/^bool handle_alert(torrent_view& view, session_view& ses_view$/;"	f
handle_alert	src/torrent.cpp	/^bool handle_alert(lt::alert *a, lt::torrent_handle &th)$/;"	f
handle_dead	src/opentracker.c	/^static void handle_dead( const int64 sock ) {$/;"	f	file:
handle_livesync	include/ot_livesync.h	68;"	d
handle_read	src/opentracker.c	/^static void handle_read( const int64 sock, struct ot_workstruct *ws ) {$/;"	f	file:
handle_read	src/proxy.c	/^static void handle_read( int64 peersocket ) {$/;"	f	file:
handle_reconnects	src/proxy.c	/^static void handle_reconnects( void ) {$/;"	f	file:
handle_udp6	src/ot_udp.c	/^int handle_udp6( int64 serversocket, struct ot_workstruct *ws ) {$/;"	f
handle_write	src/opentracker.c	/^static void handle_write( const int64 sock ) {$/;"	f	file:
handle_write	src/proxy.c	/^static void handle_write( int64 peersocket ) {$/;"	f	file:
handler	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		Handler handler;$/;"	m	struct:libtorrent::aux::allocating_handler
handler_storage	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		handler_storage()$/;"	f	struct:libtorrent::aux::handler_storage
handler_storage	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^	struct handler_storage$/;"	s	namespace:libtorrent::aux
handler_wrapper	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^	handler_wrapper(bool& in_flight, Handler&& h)$/;"	f	struct:libtorrent::aux::handler_wrapper
handler_wrapper	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^struct handler_wrapper$/;"	s	namespace:libtorrent::aux
handshake	libtorrent/include/libtorrent/operations.hpp	/^		handshake,$/;"	m	class:libtorrent::operation_t
handshake	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t handshake = 6_bit;$/;"	m	struct:libtorrent::peer_info
handshake	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void handshake(error_code const& e, std::shared_ptr<handler_type> h)$/;"	f	class:libtorrent::ssl_stream
handshake_client_version	libtorrent/include/libtorrent/settings_pack.hpp	/^			handshake_client_version,$/;"	e	enum:libtorrent::settings_pack::string_types
handshake_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			handshake_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
has_block	libtorrent/include/libtorrent/aux_/has_block.hpp	/^		explicit has_block(piece_block const& b): block(b) {}$/;"	f	struct:libtorrent::aux::has_block
has_block	libtorrent/include/libtorrent/aux_/has_block.hpp	/^	struct has_block$/;"	s	namespace:libtorrent::aux
has_error	libtorrent/include/libtorrent/torrent.hpp	/^		bool has_error() const { return !!m_error; }$/;"	f	class:libtorrent::torrent
has_incoming	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool has_incoming = false;$/;"	m	struct:libtorrent::torrent_status
has_incoming_connections	libtorrent/include/libtorrent/performance_counters.hpp	/^			has_incoming_connections,$/;"	e	enum:libtorrent::counters::stats_gauge_t
has_incoming_connections	libtorrent/include/libtorrent/session_status.hpp	/^		bool has_incoming_connections;$/;"	m	struct:libtorrent::session_status
has_index	libtorrent/include/libtorrent/piece_picker.hpp	/^			explicit has_index(piece_index_t const i) : index(i)$/;"	f	struct:libtorrent::piece_picker::has_index
has_index	libtorrent/include/libtorrent/piece_picker.hpp	/^		struct has_index$/;"	s	class:libtorrent::piece_picker
has_metadata	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool has_metadata() const { return m_has_metadata; }$/;"	f	class:libtorrent::peer_connection
has_metadata	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool has_metadata = false;$/;"	m	struct:libtorrent::torrent_status
has_outstanding_async	libtorrent/include/libtorrent/debug.hpp	/^	inline bool has_outstanding_async(char const* name)$/;"	f	namespace:libtorrent
has_peer	libtorrent/include/libtorrent/torrent.hpp	/^		bool has_peer(peer_connection const* p) const$/;"	f	class:libtorrent::torrent
has_peer_choked	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool has_peer_choked() const { return m_peer_choked; }$/;"	f	class:libtorrent::peer_connection
has_picker	libtorrent/include/libtorrent/torrent.hpp	/^		bool has_picker() const$/;"	f	class:libtorrent::torrent
has_piece_passed	libtorrent/include/libtorrent/torrent.hpp	/^		bool has_piece_passed(piece_index_t index) const$/;"	f	class:libtorrent::torrent
has_read_head	include/client.h	/^    int has_read_head ;$/;"	m	struct:client
has_short_timeout	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	bool has_short_timeout() const { return bool(flags & flag_short_timeout); }$/;"	f	struct:libtorrent::dht::observer
has_storage	libtorrent/include/libtorrent/torrent.hpp	/^		bool has_storage() const { return bool(m_storage); }$/;"	f	class:libtorrent::torrent
hash	include/trackerlogic.h	/^  ot_hash      hash;$/;"	m	struct:__anon23
hash	include/trackerlogic.h	/^  ot_hash *hash;$/;"	m	struct:ot_workstruct
hash	libowfat/cdb_make.h	/^  struct cdb_hp *hash;$/;"	m	struct:cdb_make	typeref:struct:cdb_make::cdb_hp
hash	libowfat/libowfat/cdb_make.h	/^  struct cdb_hp *hash;$/;"	m	struct:cdb_make	typeref:struct:cdb_make::cdb_hp
hash	libtorrent/include/libtorrent/block_cache.hpp	/^		std::unique_ptr<partial_hash> hash;$/;"	m	struct:libtorrent::cached_piece_entry
hash	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, hash$/;"	m	class:libtorrent::job_action_t
hash	libtorrent/include/libtorrent/sha1_hash.hpp	/^	struct hash<libtorrent::sha1_hash>$/;"	s	namespace:std
hash	libtorrent/include/libtorrent/torrent_handle.hpp	/^	struct hash<libtorrent::torrent_handle>$/;"	s	namespace:std
hash	libtorrent/include/libtorrent/torrent_status.hpp	/^	struct hash<libtorrent::torrent_status>$/;"	s	namespace:std
hash	libtorrent/include/libtorrent/units.hpp	/^	struct hash<libtorrent::aux::strong_typedef<UnderlyingType, Tag>> : std::hash<UnderlyingType>$/;"	s	namespace:std
hash_fail_piece_picks	libtorrent/include/libtorrent/performance_counters.hpp	/^			hash_fail_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
hash_for_piece_ptr	libtorrent/include/libtorrent/torrent_info.hpp	/^		char const* hash_for_piece_ptr(piece_index_t const index) const$/;"	f	class:libtorrent::torrent_info
hash_passes	libtorrent/include/libtorrent/block_cache.hpp	/^		int hash_passes = 0;$/;"	m	struct:libtorrent::cached_piece_entry
hash_value	libtorrent/include/libtorrent/block_cache.hpp	/^		struct hash_value$/;"	s	struct:libtorrent::block_cache
hasher	libtorrent/include/libtorrent/hasher.hpp	/^	class TORRENT_EXPORT hasher$/;"	c	namespace:libtorrent
hasher512	libtorrent/include/libtorrent/hasher512.hpp	/^	class TORRENT_EXPORT hasher512$/;"	c	namespace:libtorrent
hasher_thread_divisor	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			hasher_thread_divisor = 4$/;"	e	enum:libtorrent::final::__anon51
hashfails	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint8_t hashfails;$/;"	m	struct:libtorrent::torrent_peer
hashing	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t hashing:1;$/;"	m	struct:libtorrent::cached_piece_entry
hashing_count	libtorrent/include/libtorrent/block_cache.hpp	/^		int hashing_count = 0;$/;"	m	struct:libtorrent::cached_block_entry
hashing_done	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t hashing_done:1;$/;"	m	struct:libtorrent::cached_piece_entry
hashing_threads	libtorrent/include/libtorrent/settings_pack.hpp	/^			hashing_threads TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
have	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool have() const { return index == we_have_index; }$/;"	f	struct:libtorrent::piece_picker::piece_pos
have	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool have;$/;"	m	struct:libtorrent::piece_picker::piece_stats_t
have_files	libtorrent/include/libtorrent/torrent.hpp	/^		typed_bitfield<file_index_t> have_files;$/;"	m	struct:libtorrent::web_seed_t
have_peers	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::set<const torrent_peer*> have_peers;$/;"	m	struct:libtorrent::piece_picker::piece_pos
have_piece	libtorrent/include/libtorrent/torrent.hpp	/^		bool have_piece(piece_index_t index) const$/;"	f	class:libtorrent::torrent
have_pieces	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		typed_bitfield<piece_index_t> have_pieces;$/;"	m	struct:libtorrent::add_torrent_params
hdrbuf	libowfat/test/httpd.c	/^  char* hdrbuf;$/;"	m	struct:http_data	file:
head	libowfat/cdb_make.h	/^  struct cdb_hplist *head;$/;"	m	struct:cdb_make	typeref:struct:cdb_make::cdb_hplist
head	libowfat/libowfat/cdb_make.h	/^  struct cdb_hplist *head;$/;"	m	struct:cdb_make	typeref:struct:cdb_make::cdb_hplist
head_buf	include/client.h	/^    unsigned char *head_buf;$/;"	m	struct:client
header_complete	libowfat/test/httpd.c	/^int header_complete(struct http_data* r) {$/;"	f
header_complete	src/opentracker.c	/^static size_t header_complete( char * request, ssize_t byte_count ) {$/;"	f	file:
header_finished	libtorrent/include/libtorrent/http_parser.hpp	/^		bool header_finished() const { return m_state == read_body; }$/;"	f	class:libtorrent::http_parser
header_size	include/trackerlogic.h	/^  ssize_t  header_size;$/;"	m	struct:ot_workstruct
header_size	libtorrent/include/libtorrent/packet_pool.hpp	/^		std::uint16_t header_size;$/;"	m	struct:libtorrent::packet
header_size	src/torrent_view.cpp	/^const int header_size = 2;$/;"	v
header_t	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		struct header_t$/;"	s	struct:libtorrent::heterogeneous_queue
headers	libtorrent/include/libtorrent/http_parser.hpp	/^		std::multimap<std::string, std::string> const& headers() const { return m_header; }$/;"	f	class:libtorrent::http_parser::std
headroom	libowfat/array.h	/^  size_t headroom;	\/* the actual pointer for free() and realloc() is p-headroom *\/$/;"	m	struct:__anon33
headroom	libowfat/libowfat/array.h	/^  size_t headroom;	\/* the actual pointer for free() and realloc() is p-headroom *\/$/;"	m	struct:__anon39
heap	libowfat/ent.c	/^char* heap;$/;"	v
height	src/session_view.cpp	/^int session_view::height() const$/;"	f	class:session_view
height	src/torrent_view.cpp	/^int torrent_view::height() const$/;"	f	class:torrent_view
help	src/opentracker.c	/^static void help( char *name ) {$/;"	f	file:
heterogeneous_queue	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		heterogeneous_queue() : m_storage(nullptr, aux::free_deleter()) {}$/;"	f	struct:libtorrent::heterogeneous_queue
heterogeneous_queue	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^	struct heterogeneous_queue$/;"	s	namespace:libtorrent
hidden_attribute	libtorrent/include/libtorrent/file_storage.hpp	/^		bool hidden_attribute:1;$/;"	m	struct:libtorrent::file_entry
hidden_attribute	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t hidden_attribute:1;$/;"	m	struct:libtorrent::internal_file_entry
high_performance_seed	libtorrent/include/libtorrent/session.hpp	/^	inline void high_performance_seed(settings_pack& set)$/;"	f	namespace:libtorrent
history_size	libtorrent/include/libtorrent/timestamp_history.hpp	/^	static constexpr int history_size = 20;$/;"	m	struct:libtorrent::timestamp_history
hit_send_barrier	libtorrent/include/libtorrent/peer_connection.hpp	/^		hit_send_barrier(span<span<char>> \/* iovec *\/)$/;"	f	class:libtorrent::peer_connection
hlen	libowfat/test/httpd.c	/^  int hlen;$/;"	m	struct:http_data	file:
holder	libtorrent/include/libtorrent/chained_buffer.hpp	/^			aux::aligned_storage<32>::type holder;$/;"	m	struct:libtorrent::chained_buffer
holepunch_msg	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			holepunch_msg = 4,$/;"	e	enum:libtorrent::bt_peer_connection::__anon47
holepunched	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t holepunched = 15_bit;$/;"	m	struct:libtorrent::peer_info
host_resolver	libtorrent/include/libtorrent/tracker_manager.hpp	/^		resolver_interface& host_resolver() { return m_host_resolver; }$/;"	f	class:libtorrent::final
host_to_network	libtorrent/include/libtorrent/aux_/byteswap.hpp	/^inline std::uint16_t host_to_network(std::uint16_t x)$/;"	f	namespace:libtorrent::aux
host_to_network	libtorrent/include/libtorrent/aux_/byteswap.hpp	/^inline std::uint32_t host_to_network(std::uint32_t x)$/;"	f	namespace:libtorrent::aux
hostname	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^		std::string hostname;$/;"	m	struct:libtorrent::aux::proxy_settings
hostname	libtorrent/include/libtorrent/peer.hpp	/^		std::string hostname;$/;"	m	struct:libtorrent::peer_entry
hostname	libtorrent/include/libtorrent/upnp.hpp	/^		std::string hostname;$/;"	m	struct:libtorrent::final::rootdevice
hostname_lookup	libtorrent/include/libtorrent/operations.hpp	/^		hostname_lookup,$/;"	m	class:libtorrent::operation_t
hp	libowfat/cdb_make.h	/^  struct cdb_hp hp[CDB_HPLIST];$/;"	m	struct:cdb_hplist	typeref:struct:cdb_hplist::cdb_hp
hp	libowfat/libowfat/cdb_make.h	/^  struct cdb_hp hp[CDB_HPLIST];$/;"	m	struct:cdb_hplist	typeref:struct:cdb_hplist::cdb_hp
hp_error	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		enum class hp_error$/;"	c	class:libtorrent::bt_peer_connection::hp_message
hp_message	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		enum class hp_message : std::uint8_t$/;"	c	class:libtorrent::bt_peer_connection
hpos	libowfat/cdb.h	/^  uint32 hpos; \/* initialized if loop is nonzero *\/$/;"	m	struct:cdb
hpos	libowfat/libowfat/cdb.h	/^  uint32 hpos; \/* initialized if loop is nonzero *\/$/;"	m	struct:cdb
hslots	libowfat/cdb.h	/^  uint32 hslots; \/* initialized if loop is nonzero *\/$/;"	m	struct:cdb
hslots	libowfat/libowfat/cdb.h	/^  uint32 hslots; \/* initialized if loop is nonzero *\/$/;"	m	struct:cdb
htmlmode	libowfat/textcode/scan_html.c	/^enum htmlmode {	\/* <a href="http:\/\/example.com\/&quot;foo">libowfat&lt;home<\/a> *\/$/;"	g	file:
http_connection	libtorrent/include/libtorrent/http_connection.hpp	/^struct TORRENT_EXTRA_EXPORT http_connection$/;"	s	namespace:libtorrent
http_data	include/ot_http.h	/^struct http_data {$/;"	s
http_data	libowfat/test/httpd.c	/^struct http_data {$/;"	s	file:
http_error	libtorrent/include/libtorrent/error_code.hpp	/^			http_error,$/;"	e	enum:libtorrent::errors::error_code_enum
http_errors	libtorrent/include/libtorrent/error_code.hpp	/^		enum http_errors$/;"	g	namespace:libtorrent::errors
http_failed_decompress	libtorrent/include/libtorrent/error_code.hpp	/^			http_failed_decompress,$/;"	e	enum:libtorrent::errors::error_code_enum
http_handle_announce	src/ot_http.c	/^static ssize_t http_handle_announce( const int64 sock, struct ot_workstruct *ws, char *read_ptr ) {$/;"	f	file:
http_handle_fullscrape	src/ot_http.c	/^static ssize_t http_handle_fullscrape( const int64 sock, struct ot_workstruct *ws ) {$/;"	f	file:
http_handle_request	src/ot_http.c	/^ssize_t http_handle_request( const int64 sock, struct ot_workstruct *ws ) {$/;"	f
http_handle_scrape	src/ot_http.c	/^static ssize_t http_handle_scrape( const int64 sock, struct ot_workstruct *ws, char *read_ptr ) {$/;"	f	file:
http_handle_stats	src/ot_http.c	/^static ssize_t http_handle_stats( const int64 sock, struct ot_workstruct *ws, char *read_ptr ) {$/;"	f	file:
http_header	libowfat/test/httpd.c	/^const char* http_header(struct http_data* r,const char* h) {$/;"	f
http_header	src/ot_http.c	/^static char* http_header( char *data, size_t byte_count, char *header ) {$/;"	f	file:
http_issue_error	src/ot_http.c	/^ssize_t http_issue_error( const int64 sock, struct ot_workstruct *ws, int code ) {$/;"	f
http_missing_location	libtorrent/include/libtorrent/error_code.hpp	/^			http_missing_location,$/;"	e	enum:libtorrent::errors::error_code_enum
http_parse_error	libtorrent/include/libtorrent/error_code.hpp	/^			http_parse_error = 150,$/;"	e	enum:libtorrent::errors::error_code_enum
http_parser	libtorrent/include/libtorrent/http_parser.hpp	/^	class TORRENT_EXTRA_EXPORT http_parser$/;"	c	namespace:libtorrent
http_seed	libtorrent/include/libtorrent/peer_info.hpp	/^			http_seed = 2$/;"	e	enum:libtorrent::peer_info::connection_type_t
http_seed	libtorrent/include/libtorrent/torrent_info.hpp	/^		enum type_t { url_seed, http_seed };$/;"	e	enum:libtorrent::web_seed_entry::type_t
http_seed_connection	libtorrent/include/libtorrent/http_seed_connection.hpp	/^	class TORRENT_EXTRA_EXPORT http_seed_connection$/;"	c	namespace:libtorrent
http_seeds	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<std::string>> http_seeds;$/;"	m	struct:libtorrent::add_torrent_params
http_senddata	src/ot_http.c	/^static void http_senddata( const int64 sock, struct ot_workstruct *ws ) {$/;"	f	file:
http_sendiovecdata	src/ot_http.c	/^ssize_t http_sendiovecdata( const int64 sock, struct ot_workstruct *ws, int iovec_entries, struct iovec *iovector ) {$/;"	f
http_stream	libtorrent/include/libtorrent/http_stream.hpp	/^	explicit http_stream(io_service& io_service)$/;"	f	class:libtorrent::http_stream
http_stream	libtorrent/include/libtorrent/http_stream.hpp	/^class http_stream : public proxy_base$/;"	c	namespace:libtorrent
http_tracker_connection	libtorrent/include/libtorrent/http_tracker_connection.hpp	/^	class TORRENT_EXTRA_EXPORT http_tracker_connection$/;"	c	namespace:libtorrent
httperror	libowfat/test/httpd.c	/^void httperror(struct http_data* r,const char* title,const char* message) {$/;"	f
httpresponse	libowfat/test/httpd.c	/^void httpresponse(struct http_data* h,int64 s) {$/;"	f
i2p	libtorrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
i2p	libtorrent/include/libtorrent/aux_/escape_string.hpp	/^		constexpr encode_string_flags_t i2p = lowercase | no_padding;$/;"	m	namespace:libtorrent::string
i2p	libtorrent/include/libtorrent/tracker_manager.hpp	/^			i2p = 2$/;"	e	enum:libtorrent::tracker_request::kind_t
i2p_connection	libtorrent/include/libtorrent/i2p_stream.hpp	/^class i2p_connection$/;"	c	namespace:libtorrent
i2p_error	libtorrent/include/libtorrent/i2p_stream.hpp	/^			i2p_error,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
i2p_error	libtorrent/include/libtorrent/i2p_stream.hpp	/^	namespace i2p_error {$/;"	n	namespace:libtorrent
i2p_error_code	libtorrent/include/libtorrent/i2p_stream.hpp	/^		enum i2p_error_code$/;"	g	namespace:libtorrent::i2p_error
i2p_hostname	libtorrent/include/libtorrent/settings_pack.hpp	/^			i2p_hostname,$/;"	e	enum:libtorrent::settings_pack::string_types
i2p_peer	libtorrent/include/libtorrent/torrent_peer.hpp	/^	struct TORRENT_EXTRA_EXPORT i2p_peer : torrent_peer$/;"	s	namespace:libtorrent
i2p_peer_type	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^			i2p_peer_type$/;"	e	enum:libtorrent::torrent_peer_allocator_interface::peer_type_t
i2p_port	libtorrent/include/libtorrent/settings_pack.hpp	/^			i2p_port,$/;"	e	enum:libtorrent::settings_pack::int_types
i2p_socket	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^			i2p_socket,$/;"	m	struct:libtorrent::peer_class_type_filter	typeref:enum:libtorrent::peer_class_type_filter::
i2p_socket	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t i2p_socket = 16_bit;$/;"	m	struct:libtorrent::peer_info
i2p_stream	libtorrent/include/libtorrent/i2p_stream.hpp	/^class i2p_stream : public proxy_base$/;"	c	namespace:libtorrent
i2pconn	libtorrent/include/libtorrent/tracker_manager.hpp	/^		i2p_connection* i2pconn = nullptr;$/;"	m	struct:libtorrent::tracker_request
iarray	libowfat/iarray.h	/^} iarray;$/;"	t	typeref:struct:__anon31
iarray	libowfat/libowfat/iarray.h	/^} iarray;$/;"	t	typeref:struct:__anon37
iarray_allocate	libowfat/array/iarray_allocate.c	/^void* iarray_allocate(iarray* ia,size_t pos) {$/;"	f
iarray_free	libowfat/array/iarray_free.c	/^void iarray_free(iarray* ia) {$/;"	f
iarray_get	libowfat/array/iarray_get.c	/^void* iarray_get(iarray* ia,size_t pos) {$/;"	f
iarray_init	libowfat/array/iarray_init.c	/^void iarray_init(iarray* ia,size_t elemsize) {$/;"	f
iarray_length	libowfat/array/iarray_length.c	/^size_t iarray_length(iarray* ia) {$/;"	f
iarray_page	libowfat/iarray.h	/^} iarray_page;$/;"	t	typeref:struct:_iarray_page
iarray_page	libowfat/libowfat/iarray.h	/^} iarray_page;$/;"	t	typeref:struct:_iarray_page
id	libtorrent/include/libtorrent/kademlia/io.hpp	/^		node_id id;$/;"	m	struct:libtorrent::dht::node_endpoint
id	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	node_id const& id() const { return m_id; }$/;"	f	struct:libtorrent::dht::observer
id	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	node_id const& id() const$/;"	f	class:libtorrent::dht::routing_table
id	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::uint32_t id() const { return m_id; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
id	libtorrent/include/libtorrent/torrent_handle.hpp	/^		std::uint32_t id() const$/;"	f	struct:libtorrent::torrent_handle
identd_error	libtorrent/include/libtorrent/socks5_stream.hpp	/^		identd_error,$/;"	e	enum:libtorrent::socks_error::socks_error_code
ifname	libowfat/socket/socket_getifname.c	/^static char ifname[IF_NAMESIZE];$/;"	v	file:
ignore_dark_internet	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool ignore_dark_internet = true;$/;"	m	struct:libtorrent::dht::dht_settings
ignore_limits_on_local_network	libtorrent/include/libtorrent/settings_pack.hpp	/^			ignore_limits_on_local_network TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
ignore_min_interval	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr reannounce_flags_t ignore_min_interval = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
ignore_resume_timestamps	libtorrent/include/libtorrent/settings_pack.hpp	/^			ignore_resume_timestamps TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
ignore_stats	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool ignore_stats() const { return m_ignore_stats; }$/;"	f	class:libtorrent::peer_connection
ignore_stats	libtorrent/include/libtorrent/peer_connection.hpp	/^		void ignore_stats(bool b) { m_ignore_stats = b; }$/;"	f	class:libtorrent::peer_connection
ignore_unchoke_slots	libtorrent/include/libtorrent/peer_class.hpp	/^		bool ignore_unchoke_slots;$/;"	m	struct:libtorrent::peer_class
ignore_unchoke_slots	libtorrent/include/libtorrent/peer_class.hpp	/^		bool ignore_unchoke_slots;$/;"	m	struct:libtorrent::peer_class_info
immutable_data	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^		std::int32_t immutable_data = 0;$/;"	m	struct:libtorrent::dht::dht_storage_counters
implemented_features	libtorrent/include/libtorrent/extensions.hpp	/^		virtual feature_flags_t implemented_features() { return {}; }$/;"	f	struct:libtorrent::plugin
implied_port	libtorrent/include/libtorrent/kademlia/announce_flags.hpp	/^constexpr announce_flags_t implied_port = 1_bit;$/;"	m	namespace:libtorrent::dht::announce
import_bits	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         import_bits($/;"	f	namespace:boost::multiprecision
import_bits_fast	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^            import_bits_fast($/;"	f	namespace:boost::multiprecision::detail
import_bits_generic	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^            import_bits_generic($/;"	f	namespace:boost::multiprecision::detail
imult16	libowfat/libowfat/safemult.h	/^static inline int imult16( int16 a, int16 b, int16* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
imult16	libowfat/mult/imult16.c	/^int imult16( int16 a, int16 b, int16* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
imult16	libowfat/mult/imult16.c	/^int imult16(int16 a,int16 b,int16* c) {$/;"	f
imult16	libowfat/safemult.h	/^static inline int imult16( int16 a, int16 b, int16* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
imult32	libowfat/libowfat/safemult.h	/^static inline int imult32( int32 a, int32 b, int32* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
imult32	libowfat/mult/imult32.c	/^int imult32( int32 a, int32 b, int32* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
imult32	libowfat/mult/imult32.c	/^int imult32(int32 a,int32 b,int32* c) {$/;"	f
imult32	libowfat/safemult.h	/^static inline int imult32( int32 a, int32 b, int32* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
imult64	libowfat/libowfat/safemult.h	/^static inline int imult64( int64 a, int64 b, int64* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
imult64	libowfat/mult/imult64.c	/^int imult64( int64 a, int64 b, int64* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
imult64	libowfat/mult/imult64.c	/^int imult64(int64 a,int64 b,int64* c) {$/;"	f
imult64	libowfat/safemult.h	/^static inline int imult64( int64 a, int64 b, int64* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
in	libowfat/dns/dns_random.c	/^static uint32 in[12];$/;"	v	file:
in_enc_policy	libtorrent/include/libtorrent/session_settings.hpp	/^		std::uint8_t in_enc_policy;$/;"	m	struct:libtorrent::pe_settings
in_enc_policy	libtorrent/include/libtorrent/settings_pack.hpp	/^			in_enc_policy,$/;"	e	enum:libtorrent::settings_pack::int_types
in_error_code	libtorrent/include/libtorrent/upnp.hpp	/^	bool in_error_code = false;$/;"	m	struct:libtorrent::error_code_parse_state
in_ip_address	libtorrent/include/libtorrent/upnp.hpp	/^	bool in_ip_address = false;$/;"	m	struct:libtorrent::ip_address_parse_state
in_list	libtorrent/include/libtorrent/link.hpp	/^		bool in_list() const { return index >= 0; }$/;"	f	struct:libtorrent::link
in_progress	libtorrent/include/libtorrent/disk_io_job.hpp	/^		static constexpr disk_job_flags_t in_progress = 2_bit;$/;"	m	struct:libtorrent::disk_io_job
in_service	libtorrent/include/libtorrent/upnp.hpp	/^	bool in_service = false;$/;"	m	struct:libtorrent::parse_state
in_storage	libtorrent/include/libtorrent/block_cache.hpp	/^		bool in_storage = false;$/;"	m	struct:libtorrent::cached_piece_entry
in_use	libtorrent/include/libtorrent/block_cache.hpp	/^		bool in_use = true;$/;"	m	struct:libtorrent::cached_piece_entry
in_use	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		int in_use() const$/;"	f	struct:libtorrent::disk_buffer_pool
in_use	libtorrent/include/libtorrent/disk_io_job.hpp	/^		bool in_use = false;$/;"	m	struct:libtorrent::disk_io_job
in_use	libtorrent/include/libtorrent/peer_class.hpp	/^		bool in_use;$/;"	m	struct:libtorrent::peer_class
in_use	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool in_use = true;$/;"	m	struct:libtorrent::torrent_peer
inactive_down_rate	libtorrent/include/libtorrent/settings_pack.hpp	/^			inactive_down_rate,$/;"	e	enum:libtorrent::settings_pack::int_types
inactive_up_rate	libtorrent/include/libtorrent/settings_pack.hpp	/^			inactive_up_rate,$/;"	e	enum:libtorrent::settings_pack::int_types
inactivity_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			inactivity_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
inbuf	include/trackerlogic.h	/^  char    *inbuf;$/;"	m	struct:ot_workstruct
inbuf	libowfat/io_internal.h	/^  char inbuf[8192];$/;"	m	struct:__anon40
inc	libtorrent/include/libtorrent/bitfield.hpp	/^			void inc()$/;"	f	struct:libtorrent::bitfield::const_iterator
inc_num_connecting	libtorrent/include/libtorrent/torrent.hpp	/^		void inc_num_connecting(torrent_peer* pp)$/;"	f	class:libtorrent::torrent
inc_refcount	libtorrent/include/libtorrent/storage.hpp	/^		void inc_refcount() { ++m_references; }$/;"	f	struct:libtorrent::storage_interface
include_failed	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^		include_failed = 1$/;"	e	enum:libtorrent::dht::routing_table::__anon65
incoming	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t incoming = 5_bit;$/;"	m	struct:libtorrent::peer_info
incoming_connection	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		bool incoming_connection = false;$/;"	m	struct:libtorrent::aux::listen_socket_t
incoming_connections	libtorrent/include/libtorrent/performance_counters.hpp	/^			incoming_connections,$/;"	e	enum:libtorrent::counters::stats_counter_t
incoming_message	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^			incoming_message,$/;"	e	enum:libtorrent::dht::dht_logger::message_direction_t
incoming_piece_picks	libtorrent/include/libtorrent/performance_counters.hpp	/^			incoming_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
incoming_redundant_piece_picks	libtorrent/include/libtorrent/performance_counters.hpp	/^			incoming_redundant_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
incoming_request	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t incoming_request = 16_bit;$/;"	m	namespace:libtorrent::alert_category
incoming_request_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t incoming_request_notification = 16_bit;$/;"	m	class:libtorrent::alert
incoming_starts_queued_torrents	libtorrent/include/libtorrent/settings_pack.hpp	/^			incoming_starts_queued_torrents,$/;"	e	enum:libtorrent::settings_pack::bool_types
incomplete	libtorrent/include/libtorrent/alert_types.hpp	/^		int const incomplete;$/;"	m	struct:libtorrent::final
incomplete	libtorrent/include/libtorrent/tracker_manager.hpp	/^		int incomplete;$/;"	m	struct:libtorrent::tracker_response
increase_est_reciprocation_rate	libtorrent/include/libtorrent/settings_pack.hpp	/^			increase_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
increment_guard	libtorrent/include/libtorrent/debug.hpp	/^		explicit increment_guard(int& c) : m_cnt(c) { TORRENT_ASSERT(m_cnt >= 0); ++m_cnt; }$/;"	f	struct:libtorrent::increment_guard
increment_guard	libtorrent/include/libtorrent/debug.hpp	/^	struct increment_guard$/;"	s	namespace:libtorrent
indata	src/proxy.c	/^  uint8_t  indata[8192*16]; \/* Any data not processed yet *\/$/;"	m	struct:__anon10	file:
indata_length	src/proxy.c	/^  size_t   indata_length;   \/* Length of unprocessed data *\/$/;"	m	struct:__anon10	file:
index	libtorrent/include/libtorrent/alert_types.hpp	/^		file_index_t const index;$/;"	m	struct:libtorrent::final
index	libtorrent/include/libtorrent/link.hpp	/^		int index;$/;"	m	struct:libtorrent::link
index	libtorrent/include/libtorrent/piece_picker.hpp	/^			piece_index_t const index;$/;"	m	struct:libtorrent::piece_picker::has_index
index	libtorrent/include/libtorrent/piece_picker.hpp	/^			prio_index_t index;$/;"	m	struct:libtorrent::piece_picker::piece_pos
index_iter	libtorrent/include/libtorrent/index_range.hpp	/^	explicit index_iter(Index i) : m_idx(i) {}$/;"	f	struct:libtorrent::index_iter
index_iter	libtorrent/include/libtorrent/index_range.hpp	/^struct index_iter$/;"	s	namespace:libtorrent
index_mask	libtorrent/include/libtorrent/settings_pack.hpp	/^			index_mask =       0x3fff$/;"	e	enum:libtorrent::settings_pack::type_bases
index_range	libtorrent/include/libtorrent/index_range.hpp	/^struct index_range$/;"	s	namespace:libtorrent
inf	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^	static constexpr int inf = (std::numeric_limits<std::int32_t>::max)();$/;"	m	struct:libtorrent::bandwidth_channel
inflated_data_too_large	libtorrent/include/libtorrent/gzip.hpp	/^			inflated_data_too_large,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
info	libtorrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
info_hash	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		sha1_hash info_hash;$/;"	m	struct:libtorrent::add_torrent_params
info_hash	libtorrent/include/libtorrent/alert_types.hpp	/^		sha1_hash info_hash;$/;"	m	struct:libtorrent::final
info_hash	libtorrent/include/libtorrent/storage_defs.hpp	/^		sha1_hash const& info_hash;$/;"	m	struct:libtorrent::storage_params
info_hash	libtorrent/include/libtorrent/torrent.hpp	/^		sha1_hash const& info_hash() const { return m_info_hash; }$/;"	f	class:libtorrent::torrent
info_hash	libtorrent/include/libtorrent/torrent_info.hpp	/^		const sha1_hash& info_hash() const { return m_info_hash; }$/;"	f	class:libtorrent::torrent_info
info_hash	libtorrent/include/libtorrent/torrent_status.hpp	/^		sha1_hash info_hash;$/;"	m	struct:libtorrent::torrent_status
info_hash	libtorrent/include/libtorrent/tracker_manager.hpp	/^		sha1_hash info_hash;$/;"	m	struct:libtorrent::tracker_request
init	libowfat/dns/dns_rcip.c	/^static int init(char ip[256])$/;"	f	file:
init	libowfat/dns/dns_rcrw.c	/^static int init(stralloc *rules)$/;"	f	file:
init_buffer_entry	libtorrent/include/libtorrent/chained_buffer.hpp	/^		void init_buffer_entry(buffer_t& b, Holder buf, int used_size)$/;"	f	namespace:libtorrent
init_config	src/main.c	/^void init_config()$/;"	f
init_logs	src/log.c	/^void init_logs()$/;"	f
init_pipe	src/main.c	/^int init_pipe()$/;"	f
init_server	src/server.c	/^int init_server()$/;"	f
initial_picker_threshold	libtorrent/include/libtorrent/settings_pack.hpp	/^			initial_picker_threshold,$/;"	e	enum:libtorrent::settings_pack::int_types
initialized	libowfat/array.h	/^  uint64 initialized;	\/* in bytes *\/$/;"	m	struct:__anon33
initialized	libowfat/libowfat/array.h	/^  uint64 initialized;	\/* in bytes *\/$/;"	m	struct:__anon39
initialized	libtorrent/include/libtorrent/timestamp_history.hpp	/^	bool initialized() const { return m_num_samples != not_initialized; }$/;"	f	struct:libtorrent::timestamp_history
inner_scan_urlencoded	libowfat/textcode/scan_urlencoded.c	/^static size_t inner_scan_urlencoded(const char *src,char *dest,size_t *destlen,int plus) {$/;"	f	file:
insert	libtorrent/include/libtorrent/link.hpp	/^		void insert(aux::vector<T*>& list, T* self)$/;"	f	struct:libtorrent::link
install_signal_handlers	src/opentracker.c	/^static void install_signal_handlers( void ) {$/;"	f	file:
instantiate	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void instantiate(io_service& ios, void* userdata = nullptr)$/;"	f	struct:libtorrent::aux::socket_type
int16	libowfat/libowfat/uint16.h	/^typedef int16_t int16;$/;"	t
int16	libowfat/uint16.h	/^typedef int16_t int16;$/;"	t
int32	libowfat/libowfat/uint32.h	/^typedef int32_t int32;$/;"	t
int32	libowfat/uint32.h	/^typedef int32_t int32;$/;"	t
int64	libowfat/libowfat/uint64.h	/^typedef int64_t int64;$/;"	t
int64	libowfat/uint64.h	/^typedef int64_t int64;$/;"	t
int_t	libtorrent/include/libtorrent/bdecode.hpp	/^		int_t$/;"	e	enum:bdecode_node::type_t
int_t	libtorrent/include/libtorrent/entry.hpp	/^			int_t,$/;"	e	enum:libtorrent::entry::data_type
int_t	libtorrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
int_type_base	libtorrent/include/libtorrent/settings_pack.hpp	/^			int_type_base =    0x4000,$/;"	e	enum:libtorrent::settings_pack::type_bases
int_types	libtorrent/include/libtorrent/settings_pack.hpp	/^		enum int_types$/;"	g	struct:libtorrent::settings_pack
integer	libtorrent/include/libtorrent/bdecode.hpp	/^	{ none, dict, list, string, integer, end };$/;"	m	struct:libtorrent::detail::bdecode_token	typeref:enum:libtorrent::detail::bdecode_token::
interesting	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t interesting = 0_bit;$/;"	m	struct:libtorrent::peer_info
interesting	libtorrent/include/libtorrent/torrent.hpp	/^		bool interesting = true;$/;"	m	struct:libtorrent::web_seed_t
interesting_piece_picks	libtorrent/include/libtorrent/performance_counters.hpp	/^			interesting_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
interface_address	libtorrent/include/libtorrent/enum_net.hpp	/^		address interface_address;$/;"	m	struct:libtorrent::ip_interface
interface_num	src/tools.c	/^int interface_num = 0;$/;"	v
internal_file_entry	libtorrent/include/libtorrent/file_storage.hpp	/^	struct internal_file_entry$/;"	s	namespace:libtorrent
internal_port_must_match_external	libtorrent/include/libtorrent/upnp.hpp	/^			internal_port_must_match_external = 724,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
internal_resume_data_error	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		error_code internal_resume_data_error;$/;"	m	struct:libtorrent::add_torrent_params
internal_server_error	libtorrent/include/libtorrent/error_code.hpp	/^			internal_server_error = 500,$/;"	e	enum:libtorrent::errors::http_errors
interval	libtorrent/include/libtorrent/tracker_manager.hpp	/^		seconds32 interval;$/;"	m	struct:libtorrent::tracker_response
inuse	libowfat/io_internal.h	/^  unsigned int inuse:1;		\/* internal consistency checking *\/$/;"	m	struct:__anon40
invalid	libtorrent/include/libtorrent/piece_block.hpp	/^		static const piece_block invalid;$/;"	m	struct:libtorrent::piece_block
invalid_allow_fast	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_allow_fast,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_allow_fast_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_allow_fast_message,$/;"	m	class:libtorrent::close_reason_t
invalid_arg_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			invalid_arg_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
invalid_argument	libtorrent/include/libtorrent/upnp.hpp	/^			invalid_argument = 402,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
invalid_bencoding	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_bencoding,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_bitfield_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_bitfield_message,$/;"	m	class:libtorrent::close_reason_t
invalid_bitfield_size	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_bitfield_size,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_block_type	libtorrent/include/libtorrent/gzip.hpp	/^			invalid_block_type,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_blocks_per_piece	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_blocks_per_piece,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_cancel	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_cancel,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_cancel_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_cancel_message,$/;"	m	class:libtorrent::close_reason_t
invalid_choke	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_choke,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_choke_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_choke_message,$/;"	m	class:libtorrent::close_reason_t
invalid_dht_port	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_dht_port,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_dht_port_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_dht_port_message,$/;"	m	class:libtorrent::close_reason_t
invalid_distance_code_lengths	libtorrent/include/libtorrent/gzip.hpp	/^			invalid_distance_code_lengths,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_dont_have	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_dont_have,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_dont_have_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_dont_have_message,$/;"	m	class:libtorrent::close_reason_t
invalid_encrypt_handshake	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_encrypt_handshake,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_encryption_constant	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_encryption_constant,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_entry_type	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_entry_type,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_escaped_string	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_escaped_string,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_extended	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_extended,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_extended_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_extended_message,$/;"	m	class:libtorrent::close_reason_t
invalid_file_tag	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_file_tag,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_files_entry	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_files_entry,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_gzip_header	libtorrent/include/libtorrent/gzip.hpp	/^			invalid_gzip_header,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_hash_entry	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_hash_entry,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_hash_list	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_hash_list,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_hash_piece	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_hash_piece,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_have	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_have,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_have_all	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_have_all,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_have_all_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_have_all_message,$/;"	m	class:libtorrent::close_reason_t
invalid_have_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_have_message,$/;"	m	class:libtorrent::close_reason_t
invalid_have_none	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_have_none,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_have_none_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_have_none_message,$/;"	m	class:libtorrent::close_reason_t
invalid_hostname	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_hostname,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_id	libtorrent/include/libtorrent/i2p_stream.hpp	/^			invalid_id,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
invalid_info_hash	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_info_hash,$/;"	m	class:libtorrent::close_reason_t
invalid_info_hash	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_info_hash,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_interested	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_interested,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_interested_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_interested_message,$/;"	m	class:libtorrent::close_reason_t
invalid_key	libtorrent/include/libtorrent/i2p_stream.hpp	/^			invalid_key,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
invalid_listen_socket	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_listen_socket,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_literal_code_in_block	libtorrent/include/libtorrent/gzip.hpp	/^			invalid_literal_code_in_block,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_literal_length_code_lengths	libtorrent/include/libtorrent/gzip.hpp	/^			invalid_literal_length_code_lengths,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_lt_tracker_message	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_lt_tracker_message,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_message,$/;"	m	class:libtorrent::close_reason_t
invalid_message	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_message,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_message_id	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_message_id,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_metadata,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_metadata_message,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata_message	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_metadata_message,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_metadata_offset	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_metadata_offset,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata_offset	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_metadata_offset,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_metadata_request	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_metadata_request,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_metadata_request_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_metadata_request_message,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata_size	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_metadata_size,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_not_interested	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_not_interested,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_not_interested_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_not_interested_message,$/;"	m	class:libtorrent::close_reason_t
invalid_pad_size	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_pad_size,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_peer_dict	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_peer_dict,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_peers_entry	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_peers_entry,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_pex_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_pex_message,$/;"	m	class:libtorrent::close_reason_t
invalid_pex_message	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_pex_message,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_piece	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_piece,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_piece_index	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_piece_index,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_piece_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_piece_message,$/;"	m	class:libtorrent::close_reason_t
invalid_piece_requests	libtorrent/include/libtorrent/performance_counters.hpp	/^			invalid_piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
invalid_piece_size	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_piece_size,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_pkts_in	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t invalid_pkts_in;$/;"	m	struct:libtorrent::utp_status
invalid_port	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_port,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_range	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_range,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_redirection	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_redirection,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_reject	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_reject,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_reject_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_reject_message,$/;"	m	class:libtorrent::close_reason_t
invalid_request	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_request,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_request_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_request_message,$/;"	m	class:libtorrent::close_reason_t
invalid_session_handle	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_session_handle,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_slot_list	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_slot_list,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_ssl_cert	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_ssl_cert,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_stored_block_length	libtorrent/include/libtorrent/gzip.hpp	/^			invalid_stored_block_length,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_suggest	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_suggest,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_suggest_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_suggest_message,$/;"	m	class:libtorrent::close_reason_t
invalid_swarm_metadata	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_swarm_metadata,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_torrent_handle	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_torrent_handle,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_tracker_action	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_tracker_action,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_tracker_response	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_tracker_response,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_tracker_response_length	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_tracker_response_length,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_tracker_transaction_id	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_tracker_transaction_id,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_unchoke	libtorrent/include/libtorrent/error_code.hpp	/^			invalid_unchoke,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_unchoke_message	libtorrent/include/libtorrent/close_reason.hpp	/^		invalid_unchoke_message,$/;"	m	class:libtorrent::close_reason_t
invariant_access	libtorrent/include/libtorrent/invariant_check.hpp	/^	class invariant_access$/;"	c	namespace:libtorrent
invariant_checker	libtorrent/include/libtorrent/invariant_check.hpp	/^	struct invariant_checker {};$/;"	s	namespace:libtorrent
invariant_checker_impl	libtorrent/include/libtorrent/invariant_check.hpp	/^		explicit invariant_checker_impl(T const& self_)$/;"	f	struct:libtorrent::invariant_checker_impl
invariant_checker_impl	libtorrent/include/libtorrent/invariant_check.hpp	/^		invariant_checker_impl(invariant_checker_impl const& rhs)$/;"	f	struct:libtorrent::invariant_checker_impl
invariant_checker_impl	libtorrent/include/libtorrent/invariant_check.hpp	/^	struct invariant_checker_impl : invariant_checker$/;"	s	namespace:libtorrent
invoke	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	virtual bool invoke(observer_ptr) { return false; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
invoke_cb	libtorrent/include/libtorrent/kademlia/direct_request.hpp	/^	void invoke_cb(msg const& m)$/;"	f	struct:libtorrent::dht::direct_traversal
invoke_count	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int invoke_count() const { TORRENT_ASSERT(m_invoke_count >= 0); return m_invoke_count; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
io	libtorrent/include/libtorrent/disk_io_job.hpp	/^			} io;$/;"	m	union:libtorrent::disk_io_job::un	typeref:struct:libtorrent::disk_io_job::un::io_args
io_appendfile	libowfat/io/io_appendfile.c	/^int io_appendfile(int64* d,const char* s) {$/;"	f
io_args	libtorrent/include/libtorrent/disk_io_job.hpp	/^			struct io_args$/;"	s	union:libtorrent::disk_io_job::un
io_batch	libowfat/iob.h	/^typedef struct io_batch {$/;"	s
io_batch	libowfat/iob.h	/^} io_batch;$/;"	t	typeref:struct:io_batch
io_batch	libowfat/libowfat/iob.h	/^typedef struct io_batch {$/;"	s
io_batch	libowfat/libowfat/iob.h	/^} io_batch;$/;"	t	typeref:struct:io_batch
io_block	libowfat/io/io_block.c	/^void io_block(int64 d) {$/;"	f
io_canread	libowfat/io/io_canread.c	/^int64 io_canread() {$/;"	f
io_canwrite	libowfat/io/io_canwrite.c	/^int64 io_canwrite() {$/;"	f
io_check	libowfat/io/io_check.c	/^void io_check() {$/;"	f
io_close	libowfat/io/io_close.c	/^void io_close(int64 d) {$/;"	f
io_closeonexec	libowfat/io/io_closeonexec.c	/^void io_closeonexec(int64 d) {$/;"	f
io_comport	libowfat/io_internal.h	/^my_extern HANDLE io_comport;$/;"	v
io_control	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void io_control(IO_Control_Command& ioc)$/;"	f	struct:libtorrent::aux::socket_type
io_control	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void io_control(IO_Control_Command& ioc, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
io_control	libtorrent/include/libtorrent/proxy_base.hpp	/^	void io_control(IO_Control_Command& ioc)$/;"	f	class:libtorrent::proxy_base
io_control	libtorrent/include/libtorrent/proxy_base.hpp	/^	void io_control(IO_Control_Command& ioc, error_code& ec)$/;"	f	class:libtorrent::proxy_base
io_control	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void io_control(IO_Control_Command& ioc)$/;"	f	class:libtorrent::ssl_stream
io_control	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void io_control(IO_Control_Command& ioc, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
io_control	libtorrent/include/libtorrent/utp_stream.hpp	/^	void io_control(IO_Control_Command&) {}$/;"	f	struct:libtorrent::utp_stream
io_control	libtorrent/include/libtorrent/utp_stream.hpp	/^	void io_control(IO_Control_Command&, error_code&) {}$/;"	f	struct:libtorrent::utp_stream
io_createfile	libowfat/io/io_createfile.c	/^int io_createfile(int64* d,const char* s) {$/;"	f
io_debugstring	libowfat/io/io_debugstring.c	/^unsigned int io_debugstring(int64 s,char* buf,unsigned int bufsize) {$/;"	f
io_dontwantread	libowfat/io/io_dontwantread.c	/^void io_dontwantread(int64 d) {$/;"	f
io_dontwantread_really	libowfat/io/io_dontwantread.c	/^void io_dontwantread_really(int64 d, io_entry* e) {$/;"	f
io_dontwantwrite	libowfat/io/io_dontwantwrite.c	/^void io_dontwantwrite(int64 d) {$/;"	f
io_dontwantwrite_really	libowfat/io/io_dontwantwrite.c	/^void io_dontwantwrite_really(int64 d,io_entry* e) {$/;"	f
io_eagain	libowfat/io/io_eagain.c	/^void io_eagain(int64 d) {$/;"	f
io_eagain_read	libowfat/io/io_eagain_read.c	/^void io_eagain_read(int64 d) {$/;"	f
io_eagain_write	libowfat/io/io_eagain_write.c	/^void io_eagain_write(int64 d) {$/;"	f
io_entry	libowfat/io_internal.h	/^} io_entry;$/;"	t	typeref:struct:__anon40
io_fd	libowfat/io/io_fd.c	/^int io_fd(int64 d) {$/;"	f
io_fd_canwrite	libowfat/io/io_fd.c	/^int io_fd_canwrite(int64 d) {$/;"	f
io_fd_flags	libowfat/io.h	/^enum io_fd_flags {$/;"	g
io_fd_flags	libowfat/io/io_fd.c	/^int io_fd_flags(int64 d,int flags) {$/;"	f
io_fd_flags	libowfat/libowfat/io.h	/^enum io_fd_flags {$/;"	g
io_fd_internal	libowfat/io/io_fd.c	/^static io_entry* io_fd_internal(int64 d,int flags) {$/;"	f	file:
io_fds	libowfat/io/io_fd.c	/^iarray io_fds;$/;"	v
io_fds	libowfat/io_internal.h	/^my_extern iarray io_fds;$/;"	v
io_fds_inited	libowfat/io/io_fd.c	/^static int io_fds_inited;$/;"	v	file:
io_finishandshutdown	libowfat/io/io_finishandshutdown.c	/^void io_finishandshutdown(void) {$/;"	f
io_getcookie	libowfat/io/io_getcookie.c	/^void* io_getcookie(int64 d) {$/;"	f
io_master	libowfat/io/io_fd.c	/^int io_master;$/;"	v
io_master	libowfat/io_internal.h	/^my_extern int io_master;$/;"	v
io_mmapwritefile	libowfat/io/io_mmapwritefile.c	/^int64 io_mmapwritefile(int64 out,int64 in,uint64 off,uint64 bytes,io_write_callback writecb) {$/;"	f
io_nonblock	libowfat/io/io_nonblock.c	/^void io_nonblock(int64 d) {$/;"	f
io_passfd	libowfat/io/io_passfd.c	/^int io_passfd(int64 sock,int64 fd) {$/;"	f
io_pipe	libowfat/io/io_pipe.c	/^int io_pipe(int64* d) {$/;"	f
io_pollfds	libowfat/io/io_fd.c	/^array io_pollfds;$/;"	v
io_pollfds	libowfat/io_internal.h	/^my_extern array io_pollfds;$/;"	v
io_readfile	libowfat/io/io_readfile.c	/^int io_readfile(int64* d,const char* s) {$/;"	f
io_readwritefile	libowfat/io/io_readwritefile.c	/^int io_readwritefile(int64* d,const char* s) {$/;"	f
io_receivefd	libowfat/io/io_receivefd.c	/^int64 io_receivefd(int64 sock) {$/;"	f
io_sendfile	libowfat/io/io_sendfile.c	/^int64 io_sendfile(int64 out,int64 in,uint64 off,uint64 bytes) {$/;"	f
io_sendfile	libowfat/io/io_sendfile.c	/^int64 io_sendfile(int64 s,int64 fd,uint64 off,uint64 n) {$/;"	f
io_setcookie	libowfat/io/io_setcookie.c	/^void io_setcookie(int64 d,void* cookie) {$/;"	f
io_signum	libowfat/io/io_fd.c	/^int io_signum;$/;"	v
io_signum	libowfat/io_internal.h	/^my_extern int io_signum;$/;"	v
io_sigpipe	libowfat/io/io_sigpipe.c	/^void io_sigpipe(void) {$/;"	f
io_socketpair	libowfat/io/io_socketpair.c	/^int io_socketpair(int64* d) {$/;"	f
io_ss	libowfat/io/io_fd.c	/^sigset_t io_ss;$/;"	v
io_ss	libowfat/io_internal.h	/^my_extern sigset_t io_ss;$/;"	v
io_timedout	libowfat/io/io_timedout.c	/^int io_timedout(int64 d) {$/;"	f
io_timeout	libowfat/io/io_timeout.c	/^void io_timeout(int64 d,tai6464 t) {$/;"	f
io_timeouted	libowfat/io/io_timeouted.c	/^int64 io_timeouted() {$/;"	f
io_tryread	libowfat/io/io_tryread.c	/^int64 io_tryread(int64 d,char* buf,int64 len) {$/;"	f
io_tryreadtimeout	libowfat/io/io_tryreadtimeout.c	/^int64 io_tryreadtimeout(int64 d,char* buf,int64 len) {$/;"	f
io_trywrite	libowfat/io/io_trywrite.c	/^int64 io_trywrite(int64 d,const char* buf,int64 len) {$/;"	f
io_trywritetimeout	libowfat/io/io_trywritetimeout.c	/^int64 io_trywritetimeout(int64 d,const char* buf,int64 len) {$/;"	f
io_wait	libowfat/io/io_wait.c	/^void io_wait() {$/;"	f
io_waitmode	libowfat/io/io_fd.c	/^enum __io_waitmode io_waitmode;$/;"	v	typeref:enum:__io_waitmode
io_waitmode	libowfat/io_internal.h	/^} io_waitmode;$/;"	v	typeref:enum:__io_waitmode
io_waitread	libowfat/io/io_waitread.c	/^int64 io_waitread(int64 d,char* buf,int64 len) {$/;"	f
io_waituntil	libowfat/io/io_waituntil.c	/^void io_waituntil(tai6464 t) {$/;"	f
io_waituntil2	libowfat/io/io_waituntil2.c	/^int64 io_waituntil2(int64 milliseconds) {$/;"	f
io_waitwrite	libowfat/io/io_waitwrite.c	/^int64 io_waitwrite(int64 d,const char* buf,int64 len) {$/;"	f
io_wanted_fds	libowfat/io/io_fd.c	/^uint64 io_wanted_fds;$/;"	v
io_wanted_fds	libowfat/io_internal.h	/^my_extern uint64 io_wanted_fds;$/;"	v
io_wantread	libowfat/io/io_wantread.c	/^void io_wantread(int64 d) {$/;"	f
io_wantread_really	libowfat/io/io_wantread.c	/^void io_wantread_really(int64 d,io_entry* e) {$/;"	f
io_wantwrite	libowfat/io/io_wantwrite.c	/^void io_wantwrite(int64 d) {$/;"	f
io_wantwrite_really	libowfat/io/io_wantwrite.c	/^void io_wantwrite_really(int64 d, io_entry* e) {$/;"	f
io_write_callback	libowfat/io.h	/^typedef int64 (*io_write_callback)(int64 s,const void* buf,uint64 n);$/;"	t
io_write_callback	libowfat/libowfat/io.h	/^typedef int64 (*io_write_callback)(int64 s,const void* buf,uint64 n);$/;"	t
iob	libowfat/test/httpd.c	/^  io_batch iob;$/;"	m	struct:http_data	file:
iob_addbuf	libowfat/io/iob_addbuf.c	/^int iob_addbuf(io_batch* b,const void* buf,uint64 n) {$/;"	f
iob_addbuf_free	libowfat/io/iob_addbuf_free.c	/^int iob_addbuf_free(io_batch* b,const void* buf,uint64 n) {$/;"	f
iob_addbuf_internal	libowfat/io/iob_addbuf_internal.c	/^int iob_addbuf_internal(io_batch* b,const void* buf,uint64 n,$/;"	f
iob_addbuf_munmap	libowfat/io/iob_addbuf_munmap.c	/^int iob_addbuf_munmap(io_batch* b,const void* buf,uint64 n) {$/;"	f
iob_addfile	libowfat/io/iob_addfile.c	/^int iob_addfile(io_batch* b,int64 fd,uint64 off,uint64 n) {$/;"	f
iob_addfile_close	libowfat/io/iob_addfile_close.c	/^int iob_addfile_close(io_batch* b,int64 fd,uint64 off,uint64 n) {$/;"	f
iob_adds	libowfat/io/iob_adds.c	/^int iob_adds(io_batch* b,const char* s) {$/;"	f
iob_adds_free	libowfat/io/iob_adds_free.c	/^int iob_adds_free(io_batch* b,const char* s) {$/;"	f
iob_bytesleft	libowfat/io/iob_bytesleft.c	/^uint64 iob_bytesleft(const io_batch* b) {$/;"	f
iob_entry	libowfat/iob_internal.h	/^typedef struct iob_entry {$/;"	s
iob_entry	libowfat/iob_internal.h	/^} iob_entry;$/;"	t	typeref:struct:iob_entry
iob_free	libowfat/io/iob_free.c	/^void iob_free(io_batch* b) {$/;"	f
iob_new	libowfat/io/iob_new.c	/^io_batch* iob_new(int hint_entries) {$/;"	f
iob_prefetch	libowfat/io/iob_prefetch.c	/^void iob_prefetch(io_batch* b,uint64 bytes) {$/;"	f
iob_reset	libowfat/io/iob_reset.c	/^void iob_reset(io_batch* b) {$/;"	f
iob_send	libowfat/io/iob_send.c	/^int64 iob_send(int64 s,io_batch* b) {$/;"	f
iob_write	libowfat/io/iob_write.c	/^int64 iob_write(int64 s,io_batch* b,io_write_callback cb) {$/;"	f
ioc	libtorrent/include/libtorrent/aux_/socket_type.hpp	53;"	d
iocontrol	libtorrent/include/libtorrent/operations.hpp	/^		iocontrol,$/;"	m	class:libtorrent::operation_t
iom_abort	libowfat/io/iom_abort.c	/^int iom_abort(iomux_t* c) {$/;"	f
iom_add	libowfat/io/iom_add.c	/^int iom_add(iomux_t* c,int64 s,unsigned int events) {$/;"	f
iom_entry	libowfat/io_internal.h	/^struct iom_entry {$/;"	s
iom_init	libowfat/io/iom_init.c	/^int iom_init(iomux_t* c) {$/;"	f
iom_wait	libowfat/io/iom_wait.c	/^int iom_wait(iomux_t* c,int64* s,unsigned int* revents,unsigned long timeout) {$/;"	f
iomux	libowfat/io.h	/^typedef struct iomux {$/;"	s
iomux	libowfat/libowfat/io.h	/^typedef struct iomux {$/;"	s
iomux_t	libowfat/io.h	/^} iomux_t;$/;"	t	typeref:struct:iomux
iomux_t	libowfat/libowfat/io.h	/^} iomux_t;$/;"	t	typeref:struct:iomux
iopause	libowfat/unix/iopause.c	/^void iopause(iopause_fd *x,unsigned int len,struct taia *deadline,struct taia *stamp)$/;"	f
iopause_fd	libowfat/iopause.h	/^typedef struct pollfd iopause_fd;$/;"	t	typeref:struct:pollfd
iopause_fd	libowfat/libowfat/iopause.h	/^typedef struct pollfd iopause_fd;$/;"	t	typeref:struct:pollfd
ios	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				boost::asio::io_service ios;$/;"	m	struct:libtorrent::aux::final::work_thread_t
ios	libtorrent/include/libtorrent/peer_connection.hpp	/^		io_service* ios;$/;"	m	struct:libtorrent::peer_connection_args
iovec	src/ot_mutex.c	/^  struct iovec   *iovec;$/;"	m	struct:ot_task	typeref:struct:ot_task::iovec	file:
iovec_entries	src/ot_mutex.c	/^  int             iovec_entries;$/;"	m	struct:ot_task	file:
iovec_fix_increase_or_free	src/ot_iovec.c	/^void  *iovec_fix_increase_or_free( int *iovec_entries, struct iovec **iovector, void *last_ptr, size_t new_alloc ) {$/;"	f
iovec_fixlast	src/ot_iovec.c	/^void  iovec_fixlast( int *iovec_entries, struct iovec **iovector, void *last_ptr ) {$/;"	f
iovec_free	src/ot_iovec.c	/^void iovec_free( int *iovec_entries, struct iovec **iovector ) {$/;"	f
iovec_increase	src/ot_iovec.c	/^void *iovec_increase( int *iovec_entries, struct iovec **iovector, size_t new_alloc ) {$/;"	f
iovec_length	src/ot_iovec.c	/^size_t iovec_length( int *iovec_entries, struct iovec **iovector ) {$/;"	f
ip	include/client.h	/^    char ip[IPADDR_LEN];$/;"	m	struct:client
ip	include/ot_accesslist.h	/^  ot_ip6   ip;$/;"	m	struct:ot_log
ip	include/ot_http.h	/^  ot_ip6           ip;$/;"	m	struct:http_data
ip	libowfat/dns/dns_rcip.c	/^static char ip[256]; \/* defined if ok *\/$/;"	v	file:
ip	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> TORRENT_DEPRECATED_MEMBER ip;$/;"	m	struct:libtorrent::peer_alert
ip	libtorrent/include/libtorrent/peer.hpp	/^		address_v4::bytes_type ip;$/;"	m	struct:libtorrent::ipv4_peer_entry
ip	libtorrent/include/libtorrent/peer.hpp	/^		address_v6::bytes_type ip;$/;"	m	struct:libtorrent::ipv6_peer_entry
ip	libtorrent/include/libtorrent/peer_info.hpp	/^		tcp::endpoint ip;$/;"	m	struct:libtorrent::peer_info
ip	libtorrent/include/libtorrent/peer_info.hpp	/^		tcp::endpoint ip;$/;"	m	struct:libtorrent::peer_list_entry
ip	libtorrent/include/libtorrent/peer_list.hpp	/^		external_ip ip;$/;"	m	struct:libtorrent::torrent_state
ip	libtorrent/include/libtorrent/torrent_peer.hpp	/^		tcp::endpoint ip() const { return tcp::endpoint(address(), port); }$/;"	f	struct:libtorrent::torrent_peer
ip	src/ot_http.c	/^typedef struct { ot_ip6 ip; ot_time last_fullscrape; } ot_scrape_log;$/;"	m	struct:__anon3	file:
ip	src/proxy.c	/^  ot_ip6   ip;              \/* The peer to connect to *\/$/;"	m	struct:__anon10	file:
ip4_fmt	libowfat/ip4.h	14;"	d
ip4_fmt	libowfat/libowfat/ip4.h	14;"	d
ip4_scan	libowfat/ip4.h	13;"	d
ip4_scan	libowfat/libowfat/ip4.h	13;"	d
ip4loopback	libowfat/socket/socket_ip4loopback.c	/^const char ip4loopback[4] = {127,0,0,1};$/;"	v
ip6_count	libtorrent/include/libtorrent/aux_/route.h	/^	int	ip6_count;$/;"	m	struct:route_cb
ip6_isv4mapped	libowfat/ip6.h	38;"	d
ip6_isv4mapped	libowfat/libowfat/ip6.h	38;"	d
ip_address	libtorrent/include/libtorrent/upnp.hpp	/^	std::string ip_address;$/;"	m	struct:libtorrent::ip_address_parse_state
ip_address_parse_state	libtorrent/include/libtorrent/upnp.hpp	/^struct ip_address_parse_state: error_code_parse_state$/;"	s	namespace:libtorrent
ip_block	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t ip_block = 8_bit;$/;"	m	namespace:libtorrent::alert_category
ip_block_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t ip_block_notification = 8_bit;$/;"	m	class:libtorrent::alert
ip_change_notifier	libtorrent/include/libtorrent/aux_/ip_notifier.hpp	/^	struct TORRENT_EXTRA_EXPORT ip_change_notifier$/;"	s	namespace:libtorrent::aux
ip_count	libtorrent/include/libtorrent/aux_/route.h	/^	int	ip_count;$/;"	m	struct:route_cb
ip_filter	libtorrent/include/libtorrent/ip_filter.hpp	/^struct TORRENT_EXPORT ip_filter$/;"	s	namespace:libtorrent
ip_filter_applies	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER ip_filter_applies = false;$/;"	m	struct:libtorrent::torrent_status
ip_interface	libtorrent/include/libtorrent/enum_net.hpp	/^	struct ip_interface$/;"	s	namespace:libtorrent
ip_overhead_download_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int ip_overhead_download_rate;$/;"	m	struct:libtorrent::session_status
ip_overhead_upload_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int ip_overhead_upload_rate;$/;"	m	struct:libtorrent::session_status
ip_range	libtorrent/include/libtorrent/ip_filter.hpp	/^struct ip_range$/;"	s	namespace:libtorrent
ip_route	libtorrent/include/libtorrent/enum_net.hpp	/^	struct ip_route$/;"	s	namespace:libtorrent
ip_set	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^struct TORRENT_EXTRA_EXPORT ip_set$/;"	s	namespace:libtorrent::dht
ip_voter	libtorrent/include/libtorrent/ip_voter.hpp	/^	struct TORRENT_EXTRA_EXPORT ip_voter$/;"	s	namespace:libtorrent
iphlpapi	libtorrent/include/libtorrent/aux_/win_util.hpp	/^	struct iphlpapi {$/;"	s	namespace:libtorrent::aux
ipv4	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<address_v4> ipv4;$/;"	m	struct:libtorrent::tracker_request
ipv4_hash	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^struct ipv4_hash$/;"	s	namespace:libtorrent::dht
ipv4_peer	libtorrent/include/libtorrent/torrent_peer.hpp	/^	struct TORRENT_EXTRA_EXPORT ipv4_peer : torrent_peer$/;"	s	namespace:libtorrent
ipv4_peer_entry	libtorrent/include/libtorrent/peer.hpp	/^	struct ipv4_peer_entry$/;"	s	namespace:libtorrent
ipv4_peer_type	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^			ipv4_peer_type,$/;"	e	enum:libtorrent::torrent_peer_allocator_interface::peer_type_t
ipv6	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<address_v6> ipv6;$/;"	m	struct:libtorrent::tracker_request
ipv6_hash	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^struct ipv6_hash$/;"	s	namespace:libtorrent::dht
ipv6_peer	libtorrent/include/libtorrent/torrent_peer.hpp	/^	struct TORRENT_EXTRA_EXPORT ipv6_peer : torrent_peer$/;"	s	namespace:libtorrent
ipv6_peer_entry	libtorrent/include/libtorrent/peer.hpp	/^	struct ipv6_peer_entry$/;"	s	namespace:libtorrent
ipv6_peer_type	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^			ipv6_peer_type,$/;"	e	enum:libtorrent::torrent_peer_allocator_interface::peer_type_t
ipx_count	libtorrent/include/libtorrent/aux_/route.h	/^	int	ipx_count;$/;"	m	struct:route_cb
irrelevant	libowfat/dns/dns_transmit.c	/^static int irrelevant(const struct dns_transmit *d,const char *buf,unsigned int len)$/;"	f	file:
is_aborted	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_aborted() const { return m_abort; }$/;"	f	class:libtorrent::torrent
is_absolute_path	src/client_test.cpp	/^bool is_absolute_path(std::string const& f)$/;"	f
is_absolute_path	src/test.cpp	/^bool is_absolute_path(std::string const &f)$/;"	f
is_absolute_path	src/torrent.cpp	/^bool is_absolute_path(std::string const &f)$/;"	f
is_auto_managed	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_auto_managed() const { return m_auto_managed; }$/;"	f	class:libtorrent::torrent
is_closed	libtorrent/include/libtorrent/udp_socket.hpp	/^		bool is_closed() const { return m_abort; }$/;"	f	class:libtorrent::udp_socket
is_connecting	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool is_connecting() const { return m_connecting; }$/;"	f	class:libtorrent::peer_connection
is_deleted	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_deleted() const { return m_deleted; }$/;"	f	class:libtorrent::torrent
is_dht_running	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool is_dht_running() const { return (m_dht.get() != nullptr); }$/;"	f	struct:libtorrent::aux::final
is_digit	libtorrent/include/libtorrent/string_util.hpp	/^	inline bool is_digit(char c)$/;"	f	namespace:libtorrent
is_downloading	libtorrent/include/libtorrent/piece_picker.hpp	/^		bool is_downloading(piece_index_t index) const$/;"	f	class:libtorrent::piece_picker
is_error_code_enum	libtorrent/include/libtorrent/bdecode.hpp	/^	template<> struct is_error_code_enum<libtorrent::bdecode_errors::error_code_enum>$/;"	s	namespace:boost::system
is_error_code_enum	libtorrent/include/libtorrent/error_code.hpp	/^	template<> struct is_error_code_enum<libtorrent::errors::error_code_enum>$/;"	s	namespace:boost::system
is_error_code_enum	libtorrent/include/libtorrent/error_code.hpp	/^	template<> struct is_error_code_enum<libtorrent::errors::http_errors>$/;"	s	namespace:boost::system
is_error_code_enum	libtorrent/include/libtorrent/gzip.hpp	/^struct is_error_code_enum<libtorrent::gzip_errors::error_code_enum>$/;"	s	namespace:boost::system
is_error_code_enum	libtorrent/include/libtorrent/i2p_stream.hpp	/^struct is_error_code_enum<libtorrent::i2p_error::i2p_error_code>$/;"	s	namespace:boost::system
is_error_code_enum	libtorrent/include/libtorrent/natpmp.hpp	/^	template<> struct is_error_code_enum<libtorrent::errors::pcp_errors>$/;"	s	namespace:boost::system
is_error_code_enum	libtorrent/include/libtorrent/socks5_stream.hpp	/^	template<> struct is_error_code_enum<libtorrent::socks_error::socks_error_code>$/;"	s	namespace:boost::system
is_error_code_enum	libtorrent/include/libtorrent/upnp.hpp	/^	template<> struct is_error_code_enum<libtorrent::upnp_errors::error_code_enum>$/;"	s	namespace:boost::system
is_error_condition_enum	libtorrent/include/libtorrent/gzip.hpp	/^struct is_error_condition_enum<libtorrent::gzip_errors::error_code_enum>$/;"	s	namespace:boost::system
is_finished	libtorrent/include/libtorrent/peer_list.hpp	/^		bool is_finished = false;$/;"	m	struct:libtorrent::torrent_state
is_finished	libtorrent/include/libtorrent/piece_picker.hpp	/^		bool is_finished() const$/;"	f	class:libtorrent::piece_picker
is_finished	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool is_finished = false;$/;"	m	struct:libtorrent::torrent_status
is_i2p	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_i2p() const { return m_torrent_file && m_torrent_file->is_i2p(); }$/;"	f	class:libtorrent::torrent
is_i2p	libtorrent/include/libtorrent/torrent_info.hpp	/^		bool is_i2p() const { return (m_flags & i2p) != 0; }$/;"	f	class:libtorrent::torrent_info
is_i2p_addr	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool is_i2p_addr:1;$/;"	m	struct:libtorrent::torrent_peer
is_interesting	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool is_interesting() const { return m_interesting; }$/;"	f	class:libtorrent::peer_connection
is_loaded	libtorrent/include/libtorrent/torrent_info.hpp	/^		bool is_loaded() const { return m_piece_hashes || !m_merkle_tree.empty(); }$/;"	f	class:libtorrent::torrent_info
is_loaded	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER is_loaded = false;$/;"	m	struct:libtorrent::torrent_status
is_merkle_torrent	libtorrent/include/libtorrent/torrent_info.hpp	/^		bool is_merkle_torrent() const { return !m_merkle_tree.empty(); }$/;"	f	class:libtorrent::torrent_info
is_mutable	libtorrent/include/libtorrent/kademlia/item.hpp	/^	bool is_mutable() const { return m_mutable; }$/;"	f	class:libtorrent::dht::item
is_not_thread	libtorrent/include/libtorrent/debug.hpp	/^		bool is_not_thread() const$/;"	f	struct:libtorrent::single_threaded
is_online	include/client.h	/^    char is_online;$/;"	m	struct:client
is_open	libtorrent/include/libtorrent/i2p_stream.hpp	/^	bool is_open() const$/;"	f	class:libtorrent::i2p_connection
is_open	libtorrent/include/libtorrent/proxy_base.hpp	/^	bool is_open() const { return m_sock.is_open(); }$/;"	f	class:libtorrent::proxy_base
is_open	libtorrent/include/libtorrent/ssl_stream.hpp	/^	bool is_open() const$/;"	f	class:libtorrent::ssl_stream
is_open	libtorrent/include/libtorrent/udp_socket.hpp	/^		bool is_open() const { return m_abort == false; }$/;"	f	class:libtorrent::udp_socket
is_open	libtorrent/include/libtorrent/utp_stream.hpp	/^	bool is_open() const { return m_open; }$/;"	f	struct:libtorrent::utp_stream
is_paused	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool is_paused() const { return m_paused; }$/;"	f	struct:libtorrent::aux::final
is_paused	libtorrent/include/libtorrent/peer_list.hpp	/^		bool is_paused = false;$/;"	m	struct:libtorrent::torrent_state
is_peer_interested	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool is_peer_interested() const { return m_peer_interested; }$/;"	f	class:libtorrent::peer_connection
is_predictive_piece	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_predictive_piece(piece_index_t index) const$/;"	f	class:libtorrent::torrent
is_recv_plaintext	libtorrent/include/libtorrent/pe_crypto.hpp	/^		bool is_recv_plaintext() const$/;"	f	struct:libtorrent::encryption_handler
is_resume_file	src/client_test.cpp	/^bool is_resume_file(std::string const& s)$/;"	f
is_resume_file	src/test.cpp	/^bool is_resume_file(std::string const & s)$/;"	f
is_resume_file	src/torrent.cpp	/^bool is_resume_file(std::string const & s)$/;"	f
is_seeding	libtorrent/include/libtorrent/piece_picker.hpp	/^		bool is_seeding() const { return m_num_have == num_pieces(); }$/;"	f	class:libtorrent::piece_picker
is_seeding	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool is_seeding = false;$/;"	m	struct:libtorrent::torrent_status
is_send_plaintext	libtorrent/include/libtorrent/pe_crypto.hpp	/^		bool is_send_plaintext() const$/;"	f	struct:libtorrent::encryption_handler
is_sequential_download	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_sequential_download() const$/;"	f	class:libtorrent::torrent
is_set	libowfat/isset.h	30;"	d
is_set	libowfat/libowfat/isset.h	30;"	d
is_set_	libowfat/isset.h	33;"	d
is_set_	libowfat/libowfat/isset.h	33;"	d
is_set__	libowfat/isset.h	34;"	d
is_set__	libowfat/libowfat/isset.h	34;"	d
is_set___	libowfat/isset.h	35;"	d
is_set___	libowfat/libowfat/isset.h	35;"	d
is_single_thread	libtorrent/include/libtorrent/debug.hpp	/^		bool is_single_thread() const$/;"	f	struct:libtorrent::single_threaded
is_single_thread	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_single_thread() const { return single_threaded::is_single_thread(); }$/;"	f	class:libtorrent::torrent
is_ssl_torrent	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_ssl_torrent() const { return m_ssl_torrent; }$/;"	f	class:libtorrent::torrent
is_torrent_paused	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_torrent_paused() const { return m_paused; }$/;"	f	class:libtorrent::torrent
is_unreserved	src/scan_urlencoded_query.c	/^static const unsigned char is_unreserved[256] = {$/;"	v	file:
is_upload_only	libtorrent/include/libtorrent/torrent.hpp	/^		bool is_upload_only() const { return is_finished() || upload_mode(); }$/;"	f	class:libtorrent::torrent
is_v4	libtorrent/include/libtorrent/broadcast_socket.hpp	/^	bool is_v4(Endpoint const& ep)$/;"	f	namespace:libtorrent
is_v6	libtorrent/include/libtorrent/broadcast_socket.hpp	/^	bool is_v6(Endpoint const& ep)$/;"	f	namespace:libtorrent
is_v6_addr	libtorrent/include/libtorrent/torrent_handle.hpp	/^		bool is_v6_addr:1;$/;"	m	struct:libtorrent::block_info
is_v6_addr	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool is_v6_addr:1;$/;"	m	struct:libtorrent::torrent_peer
is_valid	libtorrent/include/libtorrent/file_storage.hpp	/^		bool is_valid() const { return m_piece_length > 0; }$/;"	f	class:libtorrent::file_storage
is_valid	libtorrent/include/libtorrent/session_handle.hpp	/^		bool is_valid() const { return !m_impl.expired(); }$/;"	f	struct:libtorrent::session_handle
is_valid	libtorrent/include/libtorrent/torrent_info.hpp	/^		bool is_valid() const { return m_files.is_valid(); }$/;"	f	class:libtorrent::torrent_info
is_working	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool is_working() const { return fails == 0; }$/;"	f	struct:libtorrent::announce_endpoint
isdigit	libowfat/scan/scan_double.c	/^static inline int isdigit(int c) { return (c>='0' && c<='9'); }$/;"	f	file:
ishttp	libowfat/test/readhttp.c	/^int ishttp(stralloc* sa) {$/;"	f
iso_count	libtorrent/include/libtorrent/aux_/route.h	/^	int	iso_count;$/;"	m	struct:route_cb
issafe	libowfat/textcode/fmt_urlencoded.c	/^static inline int issafe(unsigned char c) {$/;"	f	file:
it	libowfat/buffer/buffer_0.c	/^static buffer it = BUFFER_INIT_READ(b0read,0,buffer_0_space,sizeof buffer_0_space);$/;"	v	file:
it	libowfat/buffer/buffer_0small.c	/^static buffer it = BUFFER_INIT_READ(b0read,0,buffer_0_space,sizeof buffer_0_space);$/;"	v	file:
it	libowfat/buffer/buffer_1.c	/^static buffer it = BUFFER_INIT(write,1,buffer_1_space,sizeof buffer_1_space);$/;"	v	file:
it	libowfat/buffer/buffer_1small.c	/^static buffer it = BUFFER_INIT(write,1,buffer_1_space,sizeof buffer_1_space);$/;"	v	file:
it	libowfat/buffer/buffer_2.c	/^static buffer it = BUFFER_INIT(write,2,buffer_2_space,sizeof buffer_2_space);$/;"	v	file:
item	libtorrent/include/libtorrent/kademlia/item.hpp	/^	item() {}$/;"	f	class:libtorrent::dht::item
item	libtorrent/include/libtorrent/kademlia/item.hpp	/^class TORRENT_EXTRA_EXPORT item$/;"	c	namespace:libtorrent::dht
item_lifetime	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int item_lifetime = 0;$/;"	m	struct:libtorrent::dht::dht_settings
iterate	libtorrent/include/libtorrent/linked_list.hpp	/^		list_iterator<T> iterate() const$/;"	f	struct:libtorrent::linked_list
iterate	libtorrent/include/libtorrent/tailqueue.hpp	/^		tailqueue_iterator<T> iterate()$/;"	f	struct:libtorrent::tailqueue
iterate	libtorrent/include/libtorrent/tailqueue.hpp	/^		tailqueue_iterator<const T> iterate() const$/;"	f	struct:libtorrent::tailqueue
iterate_all_torrents	src/trackerlogic.c	/^void iterate_all_torrents( int (*for_each)( ot_torrent* torrent, uintptr_t data ), uintptr_t data ) {$/;"	f
iterator_range	libtorrent/include/libtorrent/aux_/range.hpp	/^	struct iterator_range$/;"	s	namespace:libtorrent::aux
job	libtorrent/include/libtorrent/block_cache.hpp	/^		job_action_t job;$/;"	m	struct:libtorrent::piece_log_t
job_action_t	libtorrent/include/libtorrent/disk_io_job.hpp	/^	enum class job_action_t : std::uint8_t$/;"	c	namespace:libtorrent
job_names	libtorrent/include/libtorrent/block_cache.hpp	/^		static std::array<char const*, 7> const job_names;$/;"	m	class:libtorrent::piece_log_t::std
job_posted	libtorrent/include/libtorrent/disk_io_job.hpp	/^		mutable bool job_posted = false;$/;"	m	struct:libtorrent::disk_io_job
job_queue	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			explicit job_queue(disk_io_thread& owner) : m_owner(owner) {}$/;"	f	struct:libtorrent::final::job_queue
job_queue	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		struct job_queue : pool_thread_interface$/;"	s	struct:libtorrent::final
jobs	libtorrent/include/libtorrent/block_cache.hpp	/^		tailqueue<disk_io_job> jobs;$/;"	m	struct:libtorrent::cached_piece_entry
jobs_in_use	libtorrent/include/libtorrent/disk_job_pool.hpp	/^		int jobs_in_use() const { return m_jobs_in_use; }$/;"	f	struct:libtorrent::disk_job_pool
keep_alive	include/trackerlogic.h	/^  int      keep_alive;$/;"	m	struct:ot_workstruct
keepalive	libowfat/test/httpd.c	/^  int keepalive;$/;"	m	struct:http_data	file:
kernel32	libtorrent/include/libtorrent/aux_/win_util.hpp	/^	struct kernel32 {$/;"	s	namespace:libtorrent::aux
kernelwantread	libowfat/io_internal.h	/^  unsigned int kernelwantread:1;	\/* did we tell the kernel we want to read\/write? *\/$/;"	m	struct:__anon40
kernelwantwrite	libowfat/io_internal.h	/^  unsigned int kernelwantwrite:1;$/;"	m	struct:__anon40
key	include/scan_urlencoded_query.h	/^  char *key;$/;"	m	struct:__anon18
key	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::uint32_t key;$/;"	m	struct:libtorrent::tracker_request
key_desc_t	libtorrent/include/libtorrent/kademlia/msg.hpp	/^struct key_desc_t$/;"	s	namespace:libtorrent::dht
key_not_found	libtorrent/include/libtorrent/i2p_stream.hpp	/^			key_not_found,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
keywords_announce	src/ot_http.c	/^static ot_keywords keywords_announce[] = { { "port", 1 }, { "left", 2 }, { "event", 3 }, { "numwant", 4 }, { "compact", 5 }, { "compact6", 5 }, { "info_hash", 6 },$/;"	v	file:
keywords_announce_event	src/ot_http.c	/^static ot_keywords keywords_announce_event[] = { { "completed", 1 }, { "stopped", 2 }, { NULL, -3 } };$/;"	v	file:
khash	libowfat/cdb.h	/^  uint32 khash; \/* initialized if loop is nonzero *\/$/;"	m	struct:cdb
khash	libowfat/libowfat/cdb.h	/^  uint32 khash; \/* initialized if loop is nonzero *\/$/;"	m	struct:cdb
kind	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		kind_t kind;$/;"	m	struct:libtorrent::cached_piece_info
kind	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::uint8_t kind;$/;"	m	struct:libtorrent::tracker_request
kind_t	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		enum kind_t { read_cache = 0, write_cache = 1, volatile_read_cache = 2 };$/;"	g	struct:libtorrent::cached_piece_info
kind_t	libtorrent/include/libtorrent/tracker_manager.hpp	/^		enum kind_t$/;"	g	struct:libtorrent::tracker_request
kpos	libowfat/cdb.h	/^  uint32 kpos; \/* initialized if loop is nonzero *\/$/;"	m	struct:cdb
kpos	libowfat/libowfat/cdb.h	/^  uint32 kpos; \/* initialized if loop is nonzero *\/$/;"	m	struct:cdb
l	libowfat/buffer/errmsg_puts.c	/^static int l;$/;"	v	file:
l	libowfat/ent.c	/^unsigned long l;$/;"	v
l	libowfat/io.h	/^  unsigned int h,l; \/* high, low *\/$/;"	m	struct:iomux
l	libowfat/libowfat/io.h	/^  unsigned int h,l; \/* high, low *\/$/;"	m	struct:iomux
label	libtorrent/include/libtorrent/peer_class.hpp	/^		std::string label;$/;"	m	struct:libtorrent::peer_class
label	libtorrent/include/libtorrent/peer_class.hpp	/^		std::string label;$/;"	m	struct:libtorrent::peer_class_info
last	libtorrent/include/libtorrent/ip_filter.hpp	/^	Addr last;$/;"	m	struct:libtorrent::ip_range
last	libtorrent/include/libtorrent/span.hpp	/^		span<T> last(difference_type const n) const$/;"	f	struct:libtorrent::span
last	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* last() const { TORRENT_ASSERT(m_size > 0); return m_last; }$/;"	f	struct:libtorrent::tailqueue
last_active	libtorrent/include/libtorrent/alert_types.hpp	/^		int last_active;$/;"	m	struct:libtorrent::dht_routing_bucket
last_active	libtorrent/include/libtorrent/peer_info.hpp	/^		time_duration last_active;$/;"	m	struct:libtorrent::peer_info
last_child	libtorrent/include/libtorrent/kademlia/msg.hpp	/^		last_child = 4,$/;"	e	enum:libtorrent::dht::key_desc_t::__anon64
last_connected	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint16_t last_connected;$/;"	m	struct:libtorrent::torrent_peer
last_download	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t last_download = 0;$/;"	m	struct:libtorrent::add_torrent_params
last_download	libtorrent/include/libtorrent/torrent_status.hpp	/^		time_point last_download;$/;"	m	struct:libtorrent::torrent_status
last_error	libtorrent/include/libtorrent/announce_entry.hpp	/^		error_code last_error;$/;"	m	struct:libtorrent::announce_endpoint
last_fullscrape	src/ot_http.c	/^typedef struct { ot_ip6 ip; ot_time last_fullscrape; } ot_scrape_log;$/;"	m	struct:__anon3	file:
last_job	libtorrent/include/libtorrent/block_cache.hpp	/^			last_job$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
last_optimistically_unchoked	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint16_t last_optimistically_unchoked;$/;"	m	struct:libtorrent::torrent_peer
last_payload_downloaded	libtorrent/include/libtorrent/stat.hpp	/^		int last_payload_downloaded() const$/;"	f	class:libtorrent::stat
last_payload_uploaded	libtorrent/include/libtorrent/stat.hpp	/^		int last_payload_uploaded() const$/;"	f	class:libtorrent::stat
last_piece	libtorrent/include/libtorrent/file_storage.hpp	/^		piece_index_t last_piece() const$/;"	f	class:libtorrent::file_storage
last_piece	libtorrent/include/libtorrent/piece_picker.hpp	/^		bool last_piece;$/;"	m	struct:libtorrent::piece_count
last_piece	libtorrent/include/libtorrent/torrent_info.hpp	/^		piece_index_t last_piece() const { return m_files.last_piece(); }$/;"	f	class:libtorrent::torrent_info
last_protocol_downloaded	libtorrent/include/libtorrent/stat.hpp	/^		int last_protocol_downloaded() const$/;"	f	class:libtorrent::stat
last_protocol_uploaded	libtorrent/include/libtorrent/stat.hpp	/^		int last_protocol_uploaded() const$/;"	f	class:libtorrent::stat
last_queried	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	time_point last_queried = min_time();$/;"	m	struct:libtorrent::dht::node_entry
last_received	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point last_received() const { return m_last_receive; }$/;"	f	class:libtorrent::peer_connection
last_request	libtorrent/include/libtorrent/peer_info.hpp	/^		time_duration last_request;$/;"	m	struct:libtorrent::peer_info
last_requested	libtorrent/include/libtorrent/torrent.hpp	/^		time_point last_requested;$/;"	m	struct:libtorrent::time_critical_piece
last_scrape	libtorrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER last_scrape = 0;$/;"	m	struct:libtorrent::torrent_status
last_seen	libtorrent/include/libtorrent/resolver.hpp	/^		time_point last_seen;$/;"	m	struct:libtorrent::final::dns_cache_entry
last_seen_complete	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t last_seen_complete = 0;$/;"	m	struct:libtorrent::add_torrent_params
last_seen_complete	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::time_t last_seen_complete() const { return m_last_seen_complete; }$/;"	f	class:libtorrent::peer_connection
last_seen_complete	libtorrent/include/libtorrent/torrent.hpp	/^		time_t last_seen_complete() const { return m_last_seen_complete; }$/;"	f	class:libtorrent::torrent
last_seen_complete	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::time_t last_seen_complete = 0;$/;"	m	struct:libtorrent::torrent_status
last_time	include/client.h	/^    time_t last_time;$/;"	m	struct:client
last_upload	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t last_upload = 0;$/;"	m	struct:libtorrent::add_torrent_params
last_upload	libtorrent/include/libtorrent/torrent_status.hpp	/^		time_point last_upload;$/;"	m	struct:libtorrent::torrent_status
last_use	libtorrent/include/libtorrent/disk_interface.hpp	/^		time_point last_use;$/;"	m	struct:libtorrent::open_file_state
last_use	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		time_point last_use;$/;"	m	struct:libtorrent::cached_piece_info
lazy_bitfields	libtorrent/include/libtorrent/settings_pack.hpp	/^			lazy_bitfields TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
lazy_dict_entry	libtorrent/include/libtorrent/lazy_entry.hpp	/^	struct TORRENT_DEPRECATED lazy_dict_entry$/;"	s	namespace:libtorrent
lazy_entry	libtorrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry() : m_size(0), m_type(none_t)$/;"	f	struct:libtorrent::lazy_entry
lazy_entry	libtorrent/include/libtorrent/lazy_entry.hpp	/^	struct TORRENT_DEPRECATED_EXPORT lazy_entry$/;"	s	namespace:libtorrent
left	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t left;$/;"	m	struct:libtorrent::tracker_request
len	libowfat/iarray.h	/^  size_t elemsize,elemperpage,bytesperpage,len;$/;"	m	struct:__anon31
len	libowfat/libowfat/iarray.h	/^  size_t elemsize,elemperpage,bytesperpage,len;$/;"	m	struct:__anon37
len	libowfat/libowfat/stralloc.h	/^  size_t len;$/;"	m	struct:stralloc
len	libowfat/stralloc.h	/^  size_t len;$/;"	m	struct:stralloc
len	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^			std::uint16_t len;$/;"	m	struct:libtorrent::heterogeneous_queue::header_t
len	libtorrent/include/libtorrent/kademlia/types.hpp	/^		static constexpr int len = 32;$/;"	m	struct:libtorrent::dht::public_key
len	libtorrent/include/libtorrent/kademlia/types.hpp	/^		static constexpr int len = 64;$/;"	m	struct:libtorrent::dht::secret_key
len	libtorrent/include/libtorrent/kademlia/types.hpp	/^		static constexpr int len = 64;$/;"	m	struct:libtorrent::dht::signature
len	libtorrent/include/libtorrent/lazy_entry.hpp	/^		int len;$/;"	m	struct:libtorrent::pascal_string
length	libtorrent/include/libtorrent/peer_request.hpp	/^		int length;$/;"	m	struct:libtorrent::peer_request
length	libtorrent/include/libtorrent/sha512.hpp	/^		std::uint64_t length;$/;"	m	struct:libtorrent::sha512_ctx
length	libtorrent/include/libtorrent/web_peer_connection.hpp	/^			int length;$/;"	m	struct:libtorrent::web_peer_connection::file_request_t
lenientConversion	libtorrent/include/libtorrent/ConvertUTF.h	/^	lenientConversion$/;"	e	enum:__anon48
letter	libowfat/ent.c	/^struct letter {$/;"	s	file:
letters	libowfat/ent.c	/^struct letters {$/;"	s	file:
level	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^		int level(Protocol const&) const { return SOL_SOCKET; }$/;"	f	struct:libtorrent::aux::bind_to_device
level	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		int level(Protocol const&) const { return IPPROTO_TCP; }$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
level	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		int level(Protocol const&) const { return IPPROTO_TCP; }$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
level	libtorrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_IP; }$/;"	f	struct:libtorrent::dont_fragment
level	libtorrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_IP; }$/;"	f	struct:libtorrent::type_of_service
level	libtorrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_IPV6; }$/;"	f	struct:libtorrent::traffic_class
level	libtorrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_IPV6; }$/;"	f	struct:libtorrent::v6_protection_level
level	libtorrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_TCP; }$/;"	f	struct:libtorrent::tcp_notsent_lowat
level	libtorrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return SOL_NETLINK; }$/;"	f	struct:libtorrent::no_enobufs
level	libtorrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return SOL_SOCKET; }$/;"	f	struct:libtorrent::exclusive_address_use
libobj	Makefile	/^libobj = $/;"	m
library_name	libtorrent/include/libtorrent/aux_/win_util.hpp	/^		static constexpr char const* library_name = "advapi32.dll";$/;"	m	struct:libtorrent::aux::advapi32
library_name	libtorrent/include/libtorrent/aux_/win_util.hpp	/^		static constexpr char const* library_name = "iphlpapi.dll";$/;"	m	struct:libtorrent::aux::iphlpapi
library_name	libtorrent/include/libtorrent/aux_/win_util.hpp	/^		static constexpr char const* library_name = "kernel32.dll";$/;"	m	struct:libtorrent::aux::kernel32
libtorrent	libtorrent/include/libtorrent/add_torrent_params.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/address.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/alert.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/alert_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/alert_types.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/announce_entry.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/assert.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/aligned_storage.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/aligned_union.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/alloca.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/array.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/block_cache_reference.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/byteswap.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/cpuid.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/deque.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/dev_random.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/escape_string.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/ffs.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/file_progress.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/generate_peer_id.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/has_block.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/instantiate_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/io.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/ip_notifier.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/lsd.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/merkle.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/noexcept_movable.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/numeric_cast.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/openssl.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/path.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/portmap.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/range.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/session_call.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/set_socket_buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/storage_piece_set.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/storage_utils.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/suggest_piece.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/throw.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/time.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/torrent_impl.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/unique_ptr.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/vector.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/aux_/win_util.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/bandwidth_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/bandwidth_socket.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/bdecode.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/bencode.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/bitfield.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/block_cache.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/bloom_filter.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/broadcast_socket.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/chained_buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/choker.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/close_reason.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/config.hpp	/^namespace libtorrent {}$/;"	n
libtorrent	libtorrent/include/libtorrent/copy_ptr.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/crc32c.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/create_torrent.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/deadline_timer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/debug.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/disk_interface.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/disk_io_job.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/disk_io_thread.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/disk_job_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/disk_observer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/download_priority.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/ed25519.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/entry.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/enum_net.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/error.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/error_code.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/extensions.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/extensions/smart_ban.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/extensions/ut_metadata.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/extensions/ut_pex.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/file.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/file_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/file_storage.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/fingerprint.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/flags.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/fwd.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/gzip.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/hasher.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/hasher512.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/hex.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/http_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/http_parser.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/http_seed_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/http_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/http_tracker_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/i2p_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/identify_client.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/index_range.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/invariant_check.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/io.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/io_service.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/io_service_fwd.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/ip_filter.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/ip_voter.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/announce_flags.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dht_state.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dht_state.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/direct_request.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/ed25519.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/io.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/item.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/msg.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/node.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/node.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/node_id.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/observer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/refresh.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^namespace libtorrent { class entry; }$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^namespace libtorrent { namespace dht$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/kademlia/types.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	libtorrent/include/libtorrent/lazy_entry.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/link.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/linked_list.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/lsd.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/magnet_uri.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/natpmp.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/netlink.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/operations.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/optional.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/packet_buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/packet_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/parse_url.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/part_file.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/pe_crypto.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_class.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_class_set.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_connection_interface.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_id.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_info.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_list.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/peer_request.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/performance_counters.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/pex_flags.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/piece_block.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/piece_block_progress.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/piece_picker.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/platform_util.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/portmap.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/proxy_base.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/random.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/read_resume_data.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/receive_buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/request_blocks.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/resolve_links.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/resolver.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/resolver_interface.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/session.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/session_handle.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/session_settings.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/session_stats.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/session_status.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/session_types.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/settings_pack.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/sha1.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/sha1_hash.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/sha512.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/sliding_average.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/socket.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/socket_io.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/socks5_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/span.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/ssl_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/stack_allocator.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/stat.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/stat_cache.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/storage.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/storage_defs.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/string_util.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/string_view.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/tailqueue.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/time.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/timestamp_history.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/torrent.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/torrent_flags.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/torrent_handle.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/torrent_info.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/torrent_peer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/torrent_status.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/tracker_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/udp_socket.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/union_endpoint.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/units.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	libtorrent/include/libtorrent/upnp.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/utf8.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/utp_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/vector_utils.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/version.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/web_connection_base.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/web_peer_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/write_resume_data.hpp	/^namespace libtorrent {$/;"	n
libtorrent	libtorrent/include/libtorrent/xml_parse.hpp	/^namespace libtorrent {$/;"	n
limit	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^			time_point limit;$/;"	m	struct:libtorrent::dht::dos_blocker::node_ban_entry
limit_exceeded	libtorrent/include/libtorrent/bdecode.hpp	/^		limit_exceeded,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
limit_exceeded	libtorrent/include/libtorrent/error_code.hpp	/^			limit_exceeded,$/;"	e	enum:libtorrent::errors::error_code_enum
limiter_down_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			limiter_down_bytes,$/;"	e	enum:libtorrent::counters::stats_gauge_t
limiter_down_queue	libtorrent/include/libtorrent/performance_counters.hpp	/^			limiter_down_queue,$/;"	e	enum:libtorrent::counters::stats_gauge_t
limiter_up_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			limiter_up_bytes,$/;"	e	enum:libtorrent::counters::stats_gauge_t
limiter_up_queue	libtorrent/include/libtorrent/performance_counters.hpp	/^			limiter_up_queue,$/;"	e	enum:libtorrent::counters::stats_gauge_t
limits_t	libtorrent/include/libtorrent/bdecode.hpp	/^	enum limits_t$/;"	g	namespace:libtorrent::detail
link	libtorrent/include/libtorrent/link.hpp	/^		link() : index(-1) {}$/;"	f	struct:libtorrent::link
link	libtorrent/include/libtorrent/link.hpp	/^	struct link$/;"	s	namespace:libtorrent
link_t	libtorrent/include/libtorrent/resolve_links.hpp	/^		struct TORRENT_EXTRA_EXPORT link_t$/;"	s	struct:libtorrent::resolve_links
linked_list	libtorrent/include/libtorrent/linked_list.hpp	/^		linked_list(): m_first(nullptr), m_last(nullptr), m_size(0) {}$/;"	f	struct:libtorrent::linked_list
linked_list	libtorrent/include/libtorrent/linked_list.hpp	/^	struct linked_list$/;"	s	namespace:libtorrent
links	libtorrent/include/libtorrent/disk_io_job.hpp	/^			aux::vector<std::string, file_index_t>* links;$/;"	m	union:libtorrent::disk_io_job::un
list	libtorrent/include/libtorrent/bdecode.hpp	/^	{ none, dict, list, string, integer, end };$/;"	m	struct:libtorrent::detail::bdecode_token	typeref:enum:libtorrent::detail::bdecode_token::
list	libtorrent/include/libtorrent/lazy_entry.hpp	/^			lazy_entry* list;$/;"	m	union:libtorrent::lazy_entry::data_t
list_at	libtorrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry const* list_at(int i) const$/;"	f	struct:libtorrent::lazy_entry
list_at	libtorrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry* list_at(int i)$/;"	f	struct:libtorrent::lazy_entry
list_dir	src/client_test.cpp	/^std::vector<std::string> list_dir(std::string path$/;"	f
list_iterator	libtorrent/include/libtorrent/linked_list.hpp	/^		explicit list_iterator(T* cur)$/;"	f	struct:libtorrent::list_iterator
list_iterator	libtorrent/include/libtorrent/linked_list.hpp	/^	struct list_iterator$/;"	s	namespace:libtorrent
list_node	libtorrent/include/libtorrent/linked_list.hpp	/^		list_node() : prev(nullptr), next(nullptr) {}$/;"	f	struct:libtorrent::list_node
list_node	libtorrent/include/libtorrent/linked_list.hpp	/^	struct list_node$/;"	s	namespace:libtorrent
list_peers	libtorrent/include/libtorrent/torrent_status.hpp	/^		int list_peers = 0;$/;"	m	struct:libtorrent::torrent_status
list_seeds	libtorrent/include/libtorrent/torrent_status.hpp	/^		int list_seeds = 0;$/;"	m	struct:libtorrent::torrent_status
list_size	libtorrent/include/libtorrent/lazy_entry.hpp	/^		int list_size() const$/;"	f	struct:libtorrent::lazy_entry
list_t	libtorrent/include/libtorrent/bdecode.hpp	/^		list_t,$/;"	e	enum:bdecode_node::type_t
list_t	libtorrent/include/libtorrent/entry.hpp	/^			list_t,$/;"	e	enum:libtorrent::entry::data_type
list_t	libtorrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
liste	libowfat/ent.c	/^  struct letter liste[256];$/;"	m	struct:letters	typeref:struct:letters::letter	file:
listen	libtorrent/include/libtorrent/alert_types.hpp	/^			listen TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
listen_endpoint_t	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			listen_endpoint_t(address const& adr, int p, std::string dev, transport s$/;"	f	struct:libtorrent::aux::listen_endpoint_t
listen_endpoint_t	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		struct TORRENT_EXTRA_EXPORT listen_endpoint_t$/;"	s	namespace:libtorrent::aux
listen_interface_t	libtorrent/include/libtorrent/string_util.hpp	/^	struct listen_interface_t$/;"	s	namespace:libtorrent
listen_interfaces	libtorrent/include/libtorrent/settings_pack.hpp	/^			listen_interfaces,$/;"	e	enum:libtorrent::settings_pack::string_types
listen_no_system_port	libtorrent/include/libtorrent/session_handle.hpp	/^			listen_no_system_port TORRENT_DEPRECATED_ENUM = 0x02$/;"	e	enum:libtorrent::session_handle::listen_on_flags_t
listen_on_flags_t	libtorrent/include/libtorrent/session_handle.hpp	/^		enum listen_on_flags_t$/;"	g	struct:libtorrent::session_handle
listen_port	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::uint16_t listen_port;$/;"	m	struct:libtorrent::tracker_request
listen_port_mapping	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^	struct listen_port_mapping$/;"	s	namespace:libtorrent::aux
listen_queue_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			listen_queue_size,$/;"	e	enum:libtorrent::settings_pack::int_types
listen_reuse_address	libtorrent/include/libtorrent/session_handle.hpp	/^			listen_reuse_address TORRENT_DEPRECATED_ENUM = 0x01,$/;"	e	enum:libtorrent::session_handle::listen_on_flags_t
listen_socket_handle	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		listen_socket_handle(std::shared_ptr<listen_socket_t> s) \/\/ NOLINT$/;"	f	struct:libtorrent::aux::listen_socket_handle
listen_socket_handle	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^	struct TORRENT_EXTRA_EXPORT listen_socket_handle$/;"	s	namespace:libtorrent::aux
listen_socket_t	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^	struct TORRENT_EXTRA_EXPORT listen_socket_t : utp_socket_interface$/;"	s	namespace:libtorrent::aux
listen_system_port_fallback	libtorrent/include/libtorrent/settings_pack.hpp	/^			listen_system_port_fallback,$/;"	e	enum:libtorrent::settings_pack::bool_types
listened	libowfat/io_internal.h	/^  unsigned int listened:1;$/;"	m	struct:__anon40
literals	libtorrent/include/libtorrent/string_view.hpp	/^inline namespace literals {$/;"	n	namespace:libtorrent
live_allocations	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		int live_allocations() const { return m_live_allocations; }$/;"	f	struct:libtorrent::final
live_bytes	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		int live_bytes() const { return m_live_bytes; }$/;"	f	struct:libtorrent::final
live_nodes	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	bucket_t live_nodes;$/;"	m	struct:libtorrent::dht::routing_table_node
livesync_bind_mcast	src/ot_livesync.c	/^void livesync_bind_mcast( ot_ip6 ip, uint16_t port) {$/;"	f
livesync_bind_mcast	src/proxy.c	/^void livesync_bind_mcast( ot_ip6 ip, uint16_t port) {$/;"	f
livesync_deinit	include/ot_livesync.h	65;"	d
livesync_deinit	src/ot_livesync.c	/^void livesync_deinit() {$/;"	f
livesync_handle_peersync	src/ot_livesync.c	/^static void livesync_handle_peersync( struct ot_workstruct *ws ) {$/;"	f	file:
livesync_handle_peersync	src/proxy.c	/^static void livesync_handle_peersync( ssize_t datalen ) {$/;"	f	file:
livesync_init	include/ot_livesync.h	66;"	d
livesync_init	src/ot_livesync.c	/^void livesync_init( ) {$/;"	f
livesync_issue_peersync	src/ot_livesync.c	/^static void livesync_issue_peersync( ) {$/;"	f	file:
livesync_issue_peersync	src/proxy.c	/^static void livesync_issue_peersync( ) {$/;"	f	file:
livesync_proxytell	src/proxy.c	/^static void livesync_proxytell( uint8_t prefix, uint8_t *info_hash, uint8_t *peer ) {$/;"	f	file:
livesync_tell	src/ot_livesync.c	/^void livesync_tell( struct ot_workstruct *ws ) {$/;"	f
livesync_ticker	include/ot_livesync.h	67;"	d
livesync_ticker	src/ot_livesync.c	/^void livesync_ticker( ) {$/;"	f
livesync_ticker	src/proxy.c	/^void livesync_ticker( ) {$/;"	f
livesync_worker	src/ot_livesync.c	/^static void * livesync_worker( void * args ) {$/;"	f	file:
livesync_worker	src/proxy.c	/^static void * livesync_worker( void * args ) {$/;"	f	file:
load	libtorrent/include/libtorrent/torrent_info.hpp	/^		void load(char const*, int, error_code&) {}$/;"	f	class:libtorrent::torrent_info
load_balancing	libtorrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER std::int64_t load_balancing;$/;"	m	struct:libtorrent::peer_info
load_file	src/bt.cpp	/^std::vector<char> load_file(std::string const &filename)$/;"	f
load_file	src/client_test.cpp	/^bool load_file(std::string const& filename, std::vector<char>& v$/;"	f
load_state	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void load_state(bdecode_node const&) {}$/;"	f	struct:libtorrent::plugin
load_state	src/opentracker.c	/^void load_state(const char * const state_filename ) {$/;"	f
load_torrent_limits	libtorrent/include/libtorrent/torrent_info.hpp	/^	struct load_torrent_limits$/;"	s	namespace:libtorrent
local	libtorrent/include/libtorrent/string_util.hpp	/^		bool local;$/;"	m	struct:libtorrent::listen_interface_t
local_connection	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t local_connection = 5_bit;$/;"	m	struct:libtorrent::peer_info
local_download_rate_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			local_download_rate_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
local_endpoint	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> local_endpoint;$/;"	m	struct:libtorrent::tracker_alert
local_endpoint	libtorrent/include/libtorrent/announce_entry.hpp	/^		tcp::endpoint local_endpoint;$/;"	m	struct:libtorrent::announce_endpoint
local_endpoint	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		tcp::endpoint local_endpoint;$/;"	m	struct:libtorrent::aux::listen_socket_t
local_endpoint	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		udp::endpoint local_endpoint() { return sock.local_endpoint(); }$/;"	f	struct:libtorrent::aux::session_udp_socket
local_endpoint	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::string const& local_endpoint() const { return m_i2p_local_endpoint; }$/;"	f	class:libtorrent::i2p_connection::std
local_endpoint	libtorrent/include/libtorrent/peer_info.hpp	/^		tcp::endpoint local_endpoint;$/;"	m	struct:libtorrent::peer_info
local_endpoint	libtorrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type local_endpoint() const$/;"	f	class:libtorrent::proxy_base
local_endpoint	libtorrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type local_endpoint(error_code& ec) const$/;"	f	class:libtorrent::proxy_base
local_endpoint	libtorrent/include/libtorrent/ssl_stream.hpp	/^	endpoint_type local_endpoint() const$/;"	f	class:libtorrent::ssl_stream
local_endpoint	libtorrent/include/libtorrent/ssl_stream.hpp	/^	endpoint_type local_endpoint(error_code& ec) const$/;"	f	class:libtorrent::ssl_stream
local_endpoint	libtorrent/include/libtorrent/udp_socket.hpp	/^		udp::endpoint local_endpoint() const$/;"	f	class:libtorrent::udp_socket
local_endpoint	libtorrent/include/libtorrent/udp_socket.hpp	/^		udp::endpoint local_endpoint(error_code& ec) const$/;"	f	class:libtorrent::udp_socket
local_endpoint	libtorrent/include/libtorrent/utp_stream.hpp	/^	endpoint_type local_endpoint() const$/;"	f	struct:libtorrent::utp_stream
local_ep	libtorrent/include/libtorrent/upnp.hpp	/^		tcp::endpoint local_ep;$/;"	m	struct:libtorrent::final::global_mapping_t
local_ep	libtorrent/include/libtorrent/upnp.hpp	/^		tcp::endpoint local_ep;$/;"	m	struct:libtorrent::final::mapping_t
local_network	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		static constexpr listen_socket_flags_t local_network = 1_bit;$/;"	m	struct:libtorrent::aux::listen_socket_t
local_port	libtorrent/include/libtorrent/natpmp.hpp	/^		int local_port = 0;$/;"	m	struct:libtorrent::natpmp::mapping_t
local_port	libtorrent/include/libtorrent/udp_socket.hpp	/^		int local_port() const { return m_bind_port; }$/;"	f	class:libtorrent::udp_socket
local_service_announce_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			local_service_announce_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
local_upload_rate_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			local_upload_rate_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
localip	libowfat/dns.h	/^  char localip[16];$/;"	m	struct:dns_transmit
localip	libowfat/libowfat/dns.h	/^  char localip[16];$/;"	m	struct:dns_transmit
lock_disk_cache	libtorrent/include/libtorrent/settings_pack.hpp	/^			lock_disk_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
lock_files	libtorrent/include/libtorrent/settings_pack.hpp	/^			lock_files TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
locked	libtorrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t TORRENT_DEPRECATED locked = 6_bit;$/;"	m	namespace:libtorrent::file_open_mode
locked	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t locked:1;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
log_async	libtorrent/include/libtorrent/debug.hpp	/^	inline int log_async()$/;"	f	namespace:libtorrent
log_msg	src/log.c	/^void log_msg(const char *fmt, ...)$/;"	f
login_flag	include/client.h	/^    int login_flag;$/;"	m	struct:client
loglist_add_network	src/ot_accesslist.c	/^void loglist_add_network( const ot_net *net ) {$/;"	f
loglist_check_address	src/ot_accesslist.c	/^int loglist_check_address( const ot_ip6 address ) {$/;"	f
loglist_reset	src/ot_accesslist.c	/^void loglist_reset( ) {$/;"	f
lookup	libowfat/ent.c	/^char* lookup(char* ds,size_t ofs,const char* t) {$/;"	f
lookup	libowfat/textcode/scan_html.c	/^static const char* lookup(size_t ofs,const char* t) {$/;"	f	file:
loop	libowfat/cdb.h	/^  uint32 loop; \/* number of hash slots searched under this key *\/$/;"	m	struct:cdb
loop	libowfat/libowfat/cdb.h	/^  uint32 loop; \/* number of hash slots searched under this key *\/$/;"	m	struct:cdb
loop_counter	libtorrent/include/libtorrent/peer_list.hpp	/^		int loop_counter = 0;$/;"	m	struct:libtorrent::torrent_state
loss_multiplier	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int loss_multiplier() const { return m_sett.get_int(settings_pack::utp_loss_multiplier); }$/;"	f	struct:libtorrent::utp_socket_manager
low_pass_download_rate	libtorrent/include/libtorrent/stat.hpp	/^		int low_pass_download_rate() const$/;"	f	class:libtorrent::stat
low_pass_rate	libtorrent/include/libtorrent/stat.hpp	/^		std::int32_t low_pass_rate() const { return m_5_sec_average; }$/;"	f	class:libtorrent::stat_channel
low_pass_upload_rate	libtorrent/include/libtorrent/stat.hpp	/^		int low_pass_upload_rate() const$/;"	f	class:libtorrent::stat
low_prio_disk	libtorrent/include/libtorrent/settings_pack.hpp	/^			low_prio_disk TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
lowercase	libtorrent/include/libtorrent/aux_/escape_string.hpp	/^		constexpr encode_string_flags_t lowercase = 0_bit;$/;"	m	namespace:libtorrent::string
lowest_layer	libtorrent/include/libtorrent/proxy_base.hpp	/^	lowest_layer_type& lowest_layer()$/;"	f	class:libtorrent::proxy_base
lowest_layer	libtorrent/include/libtorrent/ssl_stream.hpp	/^	lowest_layer_type& lowest_layer()$/;"	f	class:libtorrent::ssl_stream
lowest_layer	libtorrent/include/libtorrent/utp_stream.hpp	/^	lowest_layer_type& lowest_layer() { return *this; }$/;"	f	struct:libtorrent::utp_stream
lru_file_entry	libtorrent/include/libtorrent/file_pool.hpp	/^		struct lru_file_entry$/;"	s	struct:libtorrent::file_pool
lsd	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<struct lsd> lsd;$/;"	m	struct:libtorrent::aux::listen_socket_t
lsd	libtorrent/include/libtorrent/lsd.hpp	/^struct lsd : std::enable_shared_from_this<lsd>$/;"	s	namespace:libtorrent
lsd	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t lsd = 3_bit;$/;"	m	struct:libtorrent::peer_info
lsd_callback	libtorrent/include/libtorrent/aux_/lsd.hpp	/^	struct TORRENT_EXTRA_EXPORT lsd_callback$/;"	s	namespace:libtorrent::aux
lt	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^	bool lt(std::weak_ptr<peer_connection> const& a$/;"	f	struct:libtorrent::peer_connection_handle
m	libowfat/ent.c	/^size_t n,m;$/;"	v
m_5_sec_average	libtorrent/include/libtorrent/stat.hpp	/^		std::int32_t m_5_sec_average;$/;"	m	class:libtorrent::stat_channel
m_abort	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_abort = false;$/;"	m	struct:libtorrent::aux::final
m_abort	libtorrent/include/libtorrent/bandwidth_manager.hpp	/^	bool m_abort;$/;"	m	struct:libtorrent::bandwidth_manager
m_abort	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		bool m_abort;$/;"	m	class:libtorrent::broadcast_socket
m_abort	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		bool m_abort;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_abort	libtorrent/include/libtorrent/http_connection.hpp	/^	bool m_abort;$/;"	m	struct:libtorrent::http_connection
m_abort	libtorrent/include/libtorrent/natpmp.hpp	/^	bool m_abort = false;$/;"	m	struct:libtorrent::natpmp
m_abort	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_abort:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_abort	libtorrent/include/libtorrent/tracker_manager.hpp	/^		bool m_abort = false;$/;"	m	class:libtorrent::final
m_abort	libtorrent/include/libtorrent/tracker_manager.hpp	/^		bool m_abort = false;$/;"	m	struct:libtorrent::timeout_handler
m_abort	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		bool m_abort;$/;"	m	class:libtorrent::udp_tracker_connection
m_abort_handler_storage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::handler_storage<100> m_abort_handler_storage;$/;"	m	struct:libtorrent::aux::final
m_abort_handler_storage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::handler_storage<56> m_abort_handler_storage;$/;"	m	struct:libtorrent::aux::final
m_abort_handler_storage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::handler_storage<88> m_abort_handler_storage;$/;"	m	struct:libtorrent::aux::final
m_accept_fast	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::vector<piece_index_t> m_accept_fast;$/;"	m	class:libtorrent::peer_connection
m_accept_fast_piece_cnt	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<std::uint16_t> m_accept_fast_piece_cnt;$/;"	m	class:libtorrent::peer_connection
m_access_list	libtorrent/include/libtorrent/ip_filter.hpp	/^		std::set<range> m_access_list;$/;"	m	class:libtorrent::detail::filter_impl
m_active_torrent	include/torrent_view.hpp	/^	mutable int m_active_torrent; \/\/ index into m_filtered_handles$/;"	m	struct:torrent_view
m_add_torrent_params	libtorrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<add_torrent_params> m_add_torrent_params;$/;"	m	class:libtorrent::torrent
m_added_time	libtorrent/include/libtorrent/torrent.hpp	/^		std::time_t m_added_time;$/;"	m	class:libtorrent::torrent
m_addr	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	} m_addr;$/;"	m	struct:libtorrent::dht::observer	typeref:union:libtorrent::dht::observer::addr_t
m_addresses	libtorrent/include/libtorrent/ip_voter.hpp	/^		address m_addresses[2][2];$/;"	m	struct:libtorrent::external_ip
m_alert_mask	libtorrent/include/libtorrent/alert_manager.hpp	/^		std::atomic<alert_category_t> m_alert_mask;$/;"	m	class:libtorrent::alert_manager
m_alert_pointer_pos	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable int m_alert_pointer_pos = 0;$/;"	m	struct:libtorrent::aux::final
m_alert_pointers	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable aux::vector<alert*> m_alert_pointers;$/;"	m	struct:libtorrent::aux::final
m_alerts	libtorrent/include/libtorrent/alert_manager.hpp	/^		aux::array<heterogeneous_queue<alert>, 2> m_alerts;$/;"	m	class:libtorrent::alert_manager
m_alerts	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable alert_manager m_alerts;$/;"	m	struct:libtorrent::aux::final
m_algorithm	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	std::shared_ptr<traversal_algorithm> const m_algorithm;$/;"	m	class:libtorrent::dht::observer::std
m_all_handles	include/torrent_view.hpp	/^	std::unordered_map<lt::torrent_handle, lt::torrent_status> m_all_handles;$/;"	m	struct:torrent_view
m_alloc	libtorrent/include/libtorrent/alert_types.hpp	/^		std::reference_wrapper<aux::stack_allocator const> m_alloc;$/;"	m	namespace:libtorrent
m_alloc	libtorrent/include/libtorrent/alert_types.hpp	/^		std::reference_wrapper<aux::stack_allocator const> m_alloc;$/;"	m	struct:libtorrent::torrent_alert
m_allocate_files	libtorrent/include/libtorrent/storage.hpp	/^		bool m_allocate_files;$/;"	m	class:libtorrent::default_storage
m_allocations	libtorrent/include/libtorrent/alert_manager.hpp	/^		aux::array<aux::stack_allocator, 2> m_allocations;$/;"	m	class:libtorrent::alert_manager
m_allocator	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^		buffer_allocator_interface* m_allocator;$/;"	m	struct:libtorrent::disk_buffer_holder
m_allowed_fast	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::vector<piece_index_t> m_allowed_fast;$/;"	m	class:libtorrent::peer_connection
m_armed	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^		bool m_armed = true;$/;"	m	struct:libtorrent::aux::scope_end_impl
m_attempts	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		int m_attempts;$/;"	m	class:libtorrent::udp_tracker_connection
m_auth	libtorrent/include/libtorrent/http_connection.hpp	/^	std::string m_auth;$/;"	m	struct:libtorrent::http_connection
m_auto_manage_time_scaler	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_auto_manage_time_scaler = 0;$/;"	m	struct:libtorrent::aux::final
m_auto_scrape_time_scaler	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_auto_scrape_time_scaler = 180;$/;"	m	struct:libtorrent::aux::final
m_availability	libtorrent/include/libtorrent/aux_/suggest_piece.hpp	/^	sliding_average<int, 30> m_availability;$/;"	m	struct:libtorrent::aux::suggest_piece
m_average_deviation	libtorrent/include/libtorrent/sliding_average.hpp	/^	Int m_average_deviation = 0;$/;"	m	struct:libtorrent::sliding_average
m_average_piece_time	libtorrent/include/libtorrent/torrent.hpp	/^		std::int32_t m_average_piece_time = 0;$/;"	m	class:libtorrent::torrent
m_ban_nodes	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		node_ban_entry m_ban_nodes[num_ban_nodes];$/;"	m	struct:libtorrent::dht::dos_blocker
m_base	libtorrent/include/libtorrent/timestamp_history.hpp	/^	std::uint32_t m_base = 0;$/;"	m	struct:libtorrent::timestamp_history
m_basic_auth	libtorrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_basic_auth;$/;"	m	class:libtorrent::web_connection_base
m_became_finished	libtorrent/include/libtorrent/torrent.hpp	/^		time_point32 m_became_finished = aux::time_now32();$/;"	m	class:libtorrent::torrent
m_became_seed	libtorrent/include/libtorrent/torrent.hpp	/^		time_point32 m_became_seed = aux::time_now32();$/;"	m	class:libtorrent::torrent
m_became_uninterested	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_became_uninterested = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_became_uninteresting	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_became_uninteresting = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_begin	libtorrent/include/libtorrent/buffer.hpp	/^	char* m_begin = nullptr;$/;"	m	class:libtorrent::buffer
m_begin	libtorrent/include/libtorrent/lazy_entry.hpp	/^		char const* m_begin = nullptr;$/;"	m	struct:libtorrent::lazy_entry
m_bind_addr	libtorrent/include/libtorrent/http_connection.hpp	/^	boost::optional<address> m_bind_addr;$/;"	m	struct:libtorrent::http_connection
m_bind_port	libtorrent/include/libtorrent/udp_socket.hpp	/^		std::uint16_t m_bind_port;$/;"	m	class:libtorrent::udp_socket
m_bit_idx	libtorrent/include/libtorrent/flags.hpp	/^	int m_bit_idx;$/;"	m	struct:libtorrent::bit_t
m_block_info	libtorrent/include/libtorrent/piece_picker.hpp	/^		aux::vector<block_info> m_block_info;$/;"	m	class:libtorrent::piece_picker
m_block_info_storage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<block_info> m_block_info_storage;$/;"	m	struct:libtorrent::aux::final
m_block_timeout	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		int m_block_timeout;$/;"	m	struct:libtorrent::dht::dos_blocker
m_blocked_jobs	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		tailqueue<disk_io_job> m_blocked_jobs;$/;"	m	struct:libtorrent::aux::disk_job_fence
m_blocker	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dos_blocker m_blocker;$/;"	m	struct:libtorrent::dht::final
m_blocks_in_last_piece	libtorrent/include/libtorrent/piece_picker.hpp	/^		std::uint16_t m_blocks_in_last_piece = 0;$/;"	m	class:libtorrent::piece_picker
m_blocks_in_use_idx	include/session_view.hpp	/^	int const m_blocks_in_use_idx = lt::find_metric_idx("disk.disk_blocks_in_use");$/;"	m	struct:session_view
m_blocks_per_piece	libtorrent/include/libtorrent/piece_picker.hpp	/^		std::uint16_t m_blocks_per_piece = 0;$/;"	m	class:libtorrent::piece_picker
m_blocks_written_idx	include/session_view.hpp	/^	int const m_blocks_written_idx = lt::find_metric_idx("disk.num_blocks_written");$/;"	m	struct:session_view
m_body_start	libtorrent/include/libtorrent/web_connection_base.hpp	/^		int m_body_start;$/;"	m	class:libtorrent::web_connection_base
m_body_start_pos	libtorrent/include/libtorrent/http_parser.hpp	/^		int m_body_start_pos = 0;$/;"	m	class:libtorrent::http_parser
m_bools	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		std::bitset<settings_pack::num_bool_settings> m_bools;$/;"	m	struct:libtorrent::aux::session_settings_single_thread
m_bools	libtorrent/include/libtorrent/settings_pack.hpp	/^		std::vector<std::pair<std::uint16_t, bool>> m_bools;$/;"	m	namespace:libtorrent
m_boost_connections	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_boost_connections = 0;$/;"	m	struct:libtorrent::aux::final
m_bottled	libtorrent/include/libtorrent/http_connection.hpp	/^	bool m_bottled;$/;"	m	struct:libtorrent::http_connection
m_branch_factor	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int8_t m_branch_factor = 3;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_broadcast_timer	libtorrent/include/libtorrent/lsd.hpp	/^	deadline_timer m_broadcast_timer;$/;"	m	struct:libtorrent::lsd
m_broadcast_timer	libtorrent/include/libtorrent/upnp.hpp	/^	deadline_timer m_broadcast_timer;$/;"	m	struct:libtorrent::final
m_bucket_size	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	int const m_bucket_size;$/;"	m	class:libtorrent::dht::routing_table
m_buckets	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	table_t m_buckets;$/;"	m	class:libtorrent::dht::routing_table
m_buf	libtorrent/include/libtorrent/bitfield.hpp	/^		aux::unique_ptr<std::uint32_t[]> m_buf;$/;"	m	struct:libtorrent::bitfield
m_buf	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^		char* m_buf;$/;"	m	struct:libtorrent::disk_buffer_holder
m_buffer	libtorrent/include/libtorrent/bdecode.hpp	/^	char const* m_buffer = nullptr;$/;"	m	struct:bdecode_node
m_buffer	libtorrent/include/libtorrent/http_stream.hpp	/^	std::vector<char> m_buffer;$/;"	m	class:libtorrent::http_stream
m_buffer	libtorrent/include/libtorrent/i2p_stream.hpp	/^	aux::vector<char> m_buffer;$/;"	m	class:libtorrent::i2p_stream
m_buffer	libtorrent/include/libtorrent/socks5_stream.hpp	/^	std::vector<char> m_buffer;$/;"	m	class:libtorrent::socks5_stream
m_buffer_size	libtorrent/include/libtorrent/bdecode.hpp	/^	int m_buffer_size = 0;$/;"	m	struct:bdecode_node
m_buffers_in_use	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		std::set<char*> m_buffers_in_use;$/;"	m	struct:libtorrent::disk_buffer_pool
m_cache	libtorrent/include/libtorrent/resolver.hpp	/^	std::unordered_map<std::string, dns_cache_entry> m_cache;$/;"	m	struct:libtorrent::final
m_cache_check_state	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int m_cache_check_state = cache_check_idle;$/;"	m	struct:libtorrent::final
m_cache_hit_idx	include/session_view.hpp	/^	int const m_cache_hit_idx = lt::find_metric_idx("disk.num_blocks_cache_hits");$/;"	m	struct:session_view
m_cache_mutex	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		mutable std::mutex m_cache_mutex;$/;"	m	struct:libtorrent::final
m_cache_mutex	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		static std::mutex m_cache_mutex;$/;"	m	class:libtorrent::udp_tracker_connection
m_cached_pieces	libtorrent/include/libtorrent/aux_/storage_piece_set.hpp	/^		list_t m_cached_pieces;$/;"	m	struct:libtorrent::aux::storage_piece_set
m_callback	libtorrent/include/libtorrent/lsd.hpp	/^	aux::lsd_callback& m_callback;$/;"	m	struct:libtorrent::lsd
m_callback	libtorrent/include/libtorrent/natpmp.hpp	/^	aux::portmap_callback& m_callback;$/;"	m	struct:libtorrent::natpmp
m_callback	libtorrent/include/libtorrent/upnp.hpp	/^	aux::portmap_callback& m_callback;$/;"	m	struct:libtorrent::final
m_called	libtorrent/include/libtorrent/http_connection.hpp	/^	bool m_called;$/;"	m	struct:libtorrent::http_connection
m_candidate_cache	libtorrent/include/libtorrent/peer_list.hpp	/^		std::vector<torrent_peer*> m_candidate_cache;$/;"	m	struct:libtorrent::peer_list
m_capacity	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		int m_capacity = 0;$/;"	m	struct:libtorrent::heterogeneous_queue
m_capacity	libtorrent/include/libtorrent/packet_buffer.hpp	/^		std::uint32_t m_capacity = 0;$/;"	m	class:libtorrent::packet_buffer
m_cb	libtorrent/include/libtorrent/kademlia/direct_request.hpp	/^	message_callback m_cb;$/;"	m	struct:libtorrent::dht::direct_traversal
m_cb	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		incoming_utp_callback_t m_cb;$/;"	m	struct:libtorrent::utp_socket_manager
m_channel	libtorrent/include/libtorrent/bandwidth_manager.hpp	/^	int m_channel;$/;"	m	struct:libtorrent::bandwidth_manager
m_channel_state	libtorrent/include/libtorrent/peer_connection.hpp	/^		bandwidth_state_flags_t m_channel_state[2];$/;"	m	class:libtorrent::peer_connection
m_choked	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_choked:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_chunk_header_size	libtorrent/include/libtorrent/http_parser.hpp	/^		int m_chunk_header_size = 0;$/;"	m	class:libtorrent::http_parser
m_chunk_pos	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		std::int64_t m_chunk_pos;$/;"	m	class:libtorrent::http_seed_connection
m_chunk_pos	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		int m_chunk_pos;$/;"	m	class:libtorrent::web_peer_connection
m_chunked_encoding	libtorrent/include/libtorrent/http_parser.hpp	/^		bool m_chunked_encoding = false;$/;"	m	class:libtorrent::http_parser
m_chunked_ranges	libtorrent/include/libtorrent/http_parser.hpp	/^		std::vector<std::pair<std::int64_t, std::int64_t>> m_chunked_ranges;$/;"	m	class:libtorrent::http_parser
m_class	libtorrent/include/libtorrent/peer_class_set.hpp	/^		aux::array<peer_class_t, 15> m_class;$/;"	m	struct:libtorrent::peer_class_set
m_classes	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			peer_class_pool m_classes;$/;"	m	struct:libtorrent::aux::final
m_client	src/test.c	/^struct client m_client;$/;"	v	typeref:struct:client
m_close_file_timer	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			deadline_timer m_close_file_timer;$/;"	m	struct:libtorrent::aux::final
m_closing	libtorrent/include/libtorrent/upnp.hpp	/^	bool m_closing = false;$/;"	m	struct:libtorrent::final
m_cnt	include/session_view.hpp	/^	std::vector<std::int64_t> m_cnt[2];$/;"	m	struct:session_view
m_cnt	libtorrent/include/libtorrent/debug.hpp	/^		int& m_cnt;$/;"	m	struct:libtorrent::increment_guard
m_collections	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::string> m_collections;$/;"	m	struct:libtorrent::create_torrent
m_collections	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<std::pair<char const*, int>> m_collections;$/;"	m	class:libtorrent::torrent_info
m_command	libtorrent/include/libtorrent/i2p_stream.hpp	/^	command_t m_command;$/;"	m	class:libtorrent::i2p_stream
m_command	libtorrent/include/libtorrent/socks5_stream.hpp	/^	int m_command;$/;"	m	class:libtorrent::socks5_stream
m_comment	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::string m_comment;$/;"	m	struct:libtorrent::create_torrent
m_comment	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::string m_comment;$/;"	m	class:libtorrent::torrent_info
m_complete	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint32_t m_complete:24;$/;"	m	struct:libtorrent::torrent_hot_members
m_completed_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		jobqueue_t m_completed_jobs;$/;"	m	struct:libtorrent::final
m_completed_jobs_mutex	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		std::mutex m_completed_jobs_mutex;$/;"	m	struct:libtorrent::final
m_completed_time	libtorrent/include/libtorrent/torrent.hpp	/^		std::time_t m_completed_time;$/;"	m	class:libtorrent::torrent
m_completion_timeout	libtorrent/include/libtorrent/http_connection.hpp	/^	time_duration m_completion_timeout;$/;"	m	struct:libtorrent::http_connection
m_completion_timeout	libtorrent/include/libtorrent/tracker_manager.hpp	/^		int m_completion_timeout = 0;$/;"	m	struct:libtorrent::timeout_handler
m_condition	libtorrent/include/libtorrent/alert_manager.hpp	/^		std::condition_variable_any m_condition;$/;"	m	class:libtorrent::alert_manager
m_connect	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_connect = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_connect_boost_counter	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint8_t m_connect_boost_counter;$/;"	m	class:libtorrent::torrent
m_connect_handler	libtorrent/include/libtorrent/http_connection.hpp	/^	http_connect_handler m_connect_handler;$/;"	m	struct:libtorrent::http_connection
m_connect_handler	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::function<void(error_code const&)> m_connect_handler;$/;"	m	struct:libtorrent::utp_stream
m_connecting	libtorrent/include/libtorrent/http_connection.hpp	/^	bool m_connecting;$/;"	m	struct:libtorrent::http_connection
m_connecting	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_connecting:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_connection	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^	std::weak_ptr<peer_connection> m_connection;$/;"	m	struct:libtorrent::peer_connection_handle
m_connection_buffer	libtorrent/include/libtorrent/receive_buffer.hpp	/^	receive_buffer& m_connection_buffer;$/;"	m	struct:libtorrent::crypto_receive_buffer
m_connection_cache	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		static std::map<address, connection_cache_entry> m_connection_cache;$/;"	m	class:libtorrent::udp_tracker_connection
m_connection_close	libtorrent/include/libtorrent/http_parser.hpp	/^		bool m_connection_close = false;$/;"	m	class:libtorrent::http_parser
m_connections	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			connection_map m_connections;$/;"	m	struct:libtorrent::aux::final
m_connections	libtorrent/include/libtorrent/torrent.hpp	/^		aux::vector<peer_connection*> m_connections;$/;"	m	struct:libtorrent::torrent_hot_members
m_connections_initialized	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_connections_initialized:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_content_length	libtorrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_content_length = -1;$/;"	m	class:libtorrent::http_parser
m_context	libtorrent/include/libtorrent/hasher.hpp	/^		CC_SHA1_CTX m_context;$/;"	m	class:libtorrent::hasher
m_context	libtorrent/include/libtorrent/hasher.hpp	/^		SHA_CTX m_context;$/;"	m	class:libtorrent::hasher
m_context	libtorrent/include/libtorrent/hasher.hpp	/^		aux::crypt_hash<CALG_SHA1, PROV_RSA_FULL> m_context;$/;"	m	class:libtorrent::hasher
m_context	libtorrent/include/libtorrent/hasher.hpp	/^		gcry_md_hd_t m_context;$/;"	m	class:libtorrent::hasher
m_context	libtorrent/include/libtorrent/hasher.hpp	/^		sha1_ctx m_context;$/;"	m	class:libtorrent::hasher
m_context	libtorrent/include/libtorrent/hasher512.hpp	/^		CC_SHA512_CTX m_context;$/;"	m	class:libtorrent::hasher512
m_context	libtorrent/include/libtorrent/hasher512.hpp	/^		SHA512_CTX m_context;$/;"	m	class:libtorrent::hasher512
m_context	libtorrent/include/libtorrent/hasher512.hpp	/^		aux::crypt_hash<CALG_SHA_512, PROV_RSA_AES> m_context;$/;"	m	class:libtorrent::hasher512
m_context	libtorrent/include/libtorrent/hasher512.hpp	/^		gcry_md_hd_t m_context;$/;"	m	class:libtorrent::hasher512
m_context	libtorrent/include/libtorrent/hasher512.hpp	/^		sha512_ctx m_context;$/;"	m	class:libtorrent::hasher512
m_cookie	libtorrent/include/libtorrent/lsd.hpp	/^	int m_cookie;$/;"	m	struct:libtorrent::lsd
m_counter	libtorrent/include/libtorrent/stat.hpp	/^		std::int32_t m_counter;$/;"	m	class:libtorrent::stat_channel
m_counters	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		counters& m_counters;$/;"	m	struct:libtorrent::dht::final
m_counters	libtorrent/include/libtorrent/kademlia/node.hpp	/^	counters& m_counters;$/;"	m	class:libtorrent::dht::node
m_counters	libtorrent/include/libtorrent/peer_connection.hpp	/^		counters& m_counters;$/;"	m	class:libtorrent::peer_connection
m_counters	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		counters& m_counters;$/;"	m	struct:libtorrent::utp_socket_manager
m_created	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_created;$/;"	m	struct:libtorrent::aux::final
m_created_by	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::string m_created_by;$/;"	m	struct:libtorrent::create_torrent
m_created_by	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::string m_created_by;$/;"	m	class:libtorrent::torrent_info
m_creation_date	libtorrent/include/libtorrent/create_torrent.hpp	/^		time_t m_creation_date;$/;"	m	struct:libtorrent::create_torrent
m_creation_date	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::time_t m_creation_date = 0;$/;"	m	class:libtorrent::torrent_info
m_critical_resolver	libtorrent/include/libtorrent/resolver.hpp	/^	tcp::resolver m_critical_resolver;$/;"	m	struct:libtorrent::final
m_cur_chunk_end	libtorrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_cur_chunk_end = -1;$/;"	m	class:libtorrent::http_parser
m_current	libtorrent/include/libtorrent/linked_list.hpp	/^		T* m_current;$/;"	m	struct:libtorrent::list_iterator
m_current	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* m_current;$/;"	m	struct:libtorrent::tailqueue_iterator
m_data	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		>::type m_data;$/;"	m	struct:libtorrent::aux::socket_type
m_data	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^	item m_data;$/;"	m	class:libtorrent::dht::get_item
m_data	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	item m_data;$/;"	m	struct:libtorrent::dht::put_data
m_data	libtorrent/include/libtorrent/lazy_entry.hpp	/^		} m_data;$/;"	m	struct:libtorrent::lazy_entry	typeref:union:libtorrent::lazy_entry::data_t
m_data_callback	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^	data_callback m_data_callback;$/;"	m	class:libtorrent::dht::get_item
m_data_callback	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	data_callback m_data_callback;$/;"	m	struct:libtorrent::dht::get_peers
m_data_callback	libtorrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^	data_callback m_data_callback;$/;"	m	class:libtorrent::dht::final
m_dec_handler	libtorrent/include/libtorrent/pe_crypto.hpp	/^		std::shared_ptr<crypto_plugin> m_dec_handler;$/;"	m	struct:libtorrent::encryption_handler
m_decrypt	libtorrent/include/libtorrent/pe_crypto.hpp	/^		bool m_decrypt;$/;"	m	struct:libtorrent::rc4_handler
m_deferred_disconnect	libtorrent/include/libtorrent/torrent.hpp	/^		aux::deferred_handler m_deferred_disconnect;$/;"	m	class:libtorrent::torrent
m_deferred_file_priorities	libtorrent/include/libtorrent/torrent.hpp	/^		std::map<file_index_t, download_priority_t> m_deferred_file_priorities;$/;"	m	class:libtorrent::torrent
m_deferred_handler_storage	libtorrent/include/libtorrent/torrent.hpp	/^		aux::handler_storage<64> m_deferred_handler_storage;$/;"	m	class:libtorrent::torrent
m_deferred_handler_storage	libtorrent/include/libtorrent/torrent.hpp	/^		aux::handler_storage<96> m_deferred_handler_storage;$/;"	m	class:libtorrent::torrent
m_deferred_submit_disk_jobs	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_deferred_submit_disk_jobs = false;$/;"	m	struct:libtorrent::aux::final
m_depth	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	mutable int m_depth;$/;"	m	class:libtorrent::dht::routing_table
m_desired_queue_size	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::uint16_t m_desired_queue_size = 4;$/;"	m	class:libtorrent::peer_connection
m_dest	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_dest;$/;"	m	class:libtorrent::i2p_stream
m_destructed	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_destructed = false;$/;"	m	class:libtorrent::peer_connection
m_device	libtorrent/include/libtorrent/upnp.hpp	/^	std::string m_device;$/;"	m	struct:libtorrent::final
m_devices	libtorrent/include/libtorrent/upnp.hpp	/^	std::set<rootdevice> m_devices;$/;"	m	struct:libtorrent::final
m_dh_local_key	libtorrent/include/libtorrent/pe_crypto.hpp	/^		key_t m_dh_local_key;$/;"	m	class:libtorrent::dh_key_exchange
m_dh_local_secret	libtorrent/include/libtorrent/pe_crypto.hpp	/^		key_t m_dh_local_secret;$/;"	m	class:libtorrent::dh_key_exchange
m_dh_shared_secret	libtorrent/include/libtorrent/pe_crypto.hpp	/^		key_t m_dh_shared_secret;$/;"	m	class:libtorrent::dh_key_exchange
m_dht	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::shared_ptr<dht::dht_tracker> m_dht;$/;"	m	struct:libtorrent::aux::final
m_dht_announce_timer	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			deadline_timer m_dht_announce_timer;$/;"	m	struct:libtorrent::aux::final
m_dht_interval_update_torrents	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_dht_interval_update_torrents = 0;$/;"	m	struct:libtorrent::aux::final
m_dht_nodes	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<udp::endpoint> m_dht_nodes;$/;"	m	struct:libtorrent::aux::final
m_dht_router_nodes	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<udp::endpoint> m_dht_router_nodes;$/;"	m	struct:libtorrent::aux::final
m_dht_settings	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			dht::settings m_dht_settings;$/;"	m	struct:libtorrent::aux::final
m_dht_start_time	libtorrent/include/libtorrent/torrent.hpp	/^		time_point m_dht_start_time;$/;"	m	class:libtorrent::torrent
m_dht_state	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			dht::dht_state m_dht_state;$/;"	m	struct:libtorrent::aux::final
m_dht_storage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::unique_ptr<dht::dht_storage_interface> m_dht_storage;$/;"	m	struct:libtorrent::aux::final
m_dht_storage_constructor	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			dht::dht_storage_constructor_type m_dht_storage_constructor$/;"	m	struct:libtorrent::aux::final
m_dht_torrents	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::deque<std::weak_ptr<torrent>> m_dht_torrents;$/;"	m	struct:libtorrent::aux::final
m_dirty	libtorrent/include/libtorrent/piece_picker.hpp	/^		mutable bool m_dirty = false;$/;"	m	class:libtorrent::piece_picker
m_dirty_metadata	libtorrent/include/libtorrent/part_file.hpp	/^		bool m_dirty_metadata = false;$/;"	m	struct:libtorrent::part_file
m_disabled	libtorrent/include/libtorrent/lsd.hpp	/^	bool m_disabled = false;$/;"	m	struct:libtorrent::lsd
m_disabled	libtorrent/include/libtorrent/natpmp.hpp	/^	bool m_disabled = false;$/;"	m	struct:libtorrent::natpmp
m_disabled	libtorrent/include/libtorrent/upnp.hpp	/^	bool m_disabled = false;$/;"	m	struct:libtorrent::final
m_disconnect_started	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_disconnect_started = false;$/;"	m	class:libtorrent::peer_connection
m_disconnect_time_scaler	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_disconnect_time_scaler = 90;$/;"	m	struct:libtorrent::aux::final
m_disconnecting	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_disconnecting:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_disk_cache	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		block_cache m_disk_cache;$/;"	m	struct:libtorrent::final
m_disk_io	libtorrent/include/libtorrent/disk_interface.hpp	/^		disk_interface* m_disk_io = nullptr;$/;"	m	struct:libtorrent::storage_holder
m_disk_read_failures	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::uint8_t m_disk_read_failures = 0;$/;"	m	class:libtorrent::peer_connection
m_disk_thread	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			disk_io_thread m_disk_thread;$/;"	m	struct:libtorrent::aux::final
m_disk_thread	libtorrent/include/libtorrent/peer_connection.hpp	/^		disk_interface& m_disk_thread;$/;"	m	class:libtorrent::peer_connection
m_done	libtorrent/include/libtorrent/file.hpp	/^		bool m_done;$/;"	m	class:libtorrent::directory
m_done	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^	bool m_done;$/;"	m	struct:libtorrent::dht::find_data
m_done	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	bool m_done = false;$/;"	m	struct:libtorrent::dht::put_data
m_done	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	bool m_done = false;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_download_connect_attempts	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_download_connect_attempts = 0;$/;"	m	struct:libtorrent::aux::final
m_download_queue	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::vector<torrent*, queue_position_t> m_download_queue;$/;"	m	struct:libtorrent::aux::final
m_download_queue	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<pending_block> m_download_queue;$/;"	m	class:libtorrent::peer_connection
m_download_quota	libtorrent/include/libtorrent/http_connection.hpp	/^	int m_download_quota;$/;"	m	struct:libtorrent::http_connection
m_download_rate	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bandwidth_manager m_download_rate;$/;"	m	struct:libtorrent::aux::final
m_download_rate_peak	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_download_rate_peak = 0;$/;"	m	class:libtorrent::peer_connection
m_downloaded_at_last_round	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t m_downloaded_at_last_round = 0;$/;"	m	class:libtorrent::peer_connection
m_downloaded_last_second	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::int32_t m_downloaded_last_second = 0;$/;"	m	class:libtorrent::peer_connection
m_downloads	libtorrent/include/libtorrent/piece_picker.hpp	/^			, download_queue_t> m_downloads;$/;"	m	class:libtorrent::piece_picker
m_drained_event	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		socket_vector_t m_drained_event;$/;"	m	struct:libtorrent::utp_socket_manager
m_dropped	libtorrent/include/libtorrent/alert_manager.hpp	/^		std::bitset<num_alert_types> m_dropped;$/;"	m	class:libtorrent::alert_manager
m_dst_name	libtorrent/include/libtorrent/http_stream.hpp	/^	std::string m_dst_name;$/;"	m	class:libtorrent::http_stream
m_dst_name	libtorrent/include/libtorrent/socks5_stream.hpp	/^	std::string m_dst_name;$/;"	m	class:libtorrent::socks5_stream
m_encrypt	libtorrent/include/libtorrent/pe_crypto.hpp	/^		bool m_encrypt;$/;"	m	struct:libtorrent::rc4_handler
m_endgame_mode	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_endgame_mode:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_endpoints	libtorrent/include/libtorrent/http_connection.hpp	/^	aux::vector<tcp::endpoint> m_endpoints;$/;"	m	struct:libtorrent::http_connection
m_endpoints	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::vector<tcp::endpoint> m_endpoints;$/;"	m	class:libtorrent::udp_tracker_connection
m_error	libtorrent/include/libtorrent/torrent.hpp	/^		error_code m_error;$/;"	m	class:libtorrent::torrent
m_error_file	libtorrent/include/libtorrent/torrent.hpp	/^		file_index_t m_error_file;$/;"	m	class:libtorrent::torrent
m_errors	libtorrent/include/libtorrent/stat_cache.hpp	/^		std::vector<error_code> m_errors;$/;"	m	struct:libtorrent::stat_cache
m_est_reciprocation_rate	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_est_reciprocation_rate;$/;"	m	class:libtorrent::peer_connection
m_exceeded_max_size	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		bool m_exceeded_max_size;$/;"	m	struct:libtorrent::disk_buffer_pool
m_extension_outstanding_bytes	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_extension_outstanding_bytes = 0;$/;"	m	class:libtorrent::peer_connection
m_extensions	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::list<std::shared_ptr<peer_plugin>> m_extensions;$/;"	m	class:libtorrent::peer_connection
m_extensions	libtorrent/include/libtorrent/torrent.hpp	/^		std::list<std::shared_ptr<torrent_plugin>> m_extensions;$/;"	m	class:libtorrent::torrent
m_external_address	libtorrent/include/libtorrent/ip_voter.hpp	/^		address m_external_address;$/;"	m	struct:libtorrent::ip_voter
m_external_address_voters	libtorrent/include/libtorrent/ip_voter.hpp	/^		bloom_filter<32> m_external_address_voters;$/;"	m	struct:libtorrent::ip_voter
m_external_addresses	libtorrent/include/libtorrent/ip_voter.hpp	/^		std::vector<external_ip_t> m_external_addresses;$/;"	m	struct:libtorrent::ip_voter
m_external_auth	libtorrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_external_auth;$/;"	m	class:libtorrent::web_connection_base
m_external_ip	libtorrent/include/libtorrent/natpmp.hpp	/^	address m_external_ip;$/;"	m	struct:libtorrent::natpmp
m_extra_headers	libtorrent/include/libtorrent/web_connection_base.hpp	/^		web_seed_entry::headers_t m_extra_headers;$/;"	m	class:libtorrent::web_connection_base
m_f	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				ext_function_t m_f;$/;"	m	struct:libtorrent::aux::final::session_plugin_wrapper
m_failed_bytes_idx	include/session_view.hpp	/^	int const m_failed_bytes_idx = lt::find_metric_idx("net.recv_failed_bytes");$/;"	m	struct:session_view
m_fd	libtorrent/include/libtorrent/aux_/dev_random.hpp	/^		int m_fd;$/;"	m	struct:libtorrent::aux::dev_random
m_fd	libtorrent/include/libtorrent/file.hpp	/^		WIN32_FIND_DATAW m_fd;$/;"	m	class:libtorrent::directory
m_file	libtorrent/include/libtorrent/part_file.hpp	/^		std::shared_ptr<file> m_file;$/;"	m	struct:libtorrent::part_file
m_file_created	libtorrent/include/libtorrent/storage.hpp	/^		mutable typed_bitfield<file_index_t> m_file_created;$/;"	m	class:libtorrent::default_storage
m_file_created_mutex	libtorrent/include/libtorrent/storage.hpp	/^		mutable std::mutex m_file_created_mutex;$/;"	m	class:libtorrent::default_storage
m_file_handle	libtorrent/include/libtorrent/file.hpp	/^		handle_type m_file_handle;$/;"	m	struct:libtorrent::file
m_file_hashes	libtorrent/include/libtorrent/file_storage.hpp	/^		aux::vector<char const*, file_index_t> m_file_hashes;$/;"	m	class:libtorrent::file_storage
m_file_idx	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_file_idx;$/;"	m	struct:libtorrent::final
m_file_priority	libtorrent/include/libtorrent/storage.hpp	/^		aux::vector<download_priority_t, file_index_t> m_file_priority;$/;"	m	class:libtorrent::default_storage
m_file_priority	libtorrent/include/libtorrent/torrent.hpp	/^		aux::vector<download_priority_t, file_index_t> m_file_priority;$/;"	m	class:libtorrent::torrent
m_file_progress	libtorrent/include/libtorrent/aux_/file_progress.hpp	/^		vector<std::int64_t, file_index_t> m_file_progress;$/;"	m	struct:libtorrent::aux::file_progress
m_file_progress	libtorrent/include/libtorrent/torrent.hpp	/^		aux::file_progress m_file_progress;$/;"	m	class:libtorrent::torrent
m_file_requests	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		std::deque<file_request_t> m_file_requests;$/;"	m	class:libtorrent::web_peer_connection
m_file_sizes	libtorrent/include/libtorrent/aux_/file_progress.hpp	/^		vector<std::int64_t, file_index_t> m_file_sizes;$/;"	m	struct:libtorrent::aux::file_progress
m_file_sizes	libtorrent/include/libtorrent/resolve_links.hpp	/^		std::unordered_multimap<std::int64_t, file_index_t> m_file_sizes;$/;"	m	struct:libtorrent::resolve_links
m_filehashes	libtorrent/include/libtorrent/create_torrent.hpp	/^		aux::vector<sha1_hash, file_index_t> m_filehashes;$/;"	m	struct:libtorrent::create_torrent
m_files	libtorrent/include/libtorrent/create_torrent.hpp	/^		file_storage& m_files;$/;"	m	struct:libtorrent::create_torrent
m_files	libtorrent/include/libtorrent/file_pool.hpp	/^		std::map<std::pair<storage_index_t, file_index_t>, lru_file_entry> m_files;$/;"	m	struct:libtorrent::file_pool
m_files	libtorrent/include/libtorrent/file_storage.hpp	/^		aux::vector<internal_file_entry, file_index_t> m_files;$/;"	m	class:libtorrent::file_storage
m_files	libtorrent/include/libtorrent/storage.hpp	/^		file_storage const& m_files;$/;"	m	struct:libtorrent::storage_interface
m_files	libtorrent/include/libtorrent/torrent_info.hpp	/^		file_storage m_files;$/;"	m	class:libtorrent::torrent_info
m_filter	libtorrent/include/libtorrent/ip_filter.hpp	/^	detail::filter_impl<std::uint16_t> m_filter;$/;"	m	class:libtorrent::port_filter
m_filter4	libtorrent/include/libtorrent/ip_filter.hpp	/^	detail::filter_impl<address_v4::bytes_type> m_filter4;$/;"	m	struct:libtorrent::ip_filter
m_filter6	libtorrent/include/libtorrent/ip_filter.hpp	/^	detail::filter_impl<address_v6::bytes_type> m_filter6;$/;"	m	struct:libtorrent::ip_filter
m_filter_handler	libtorrent/include/libtorrent/http_connection.hpp	/^	http_filter_handler m_filter_handler;$/;"	m	struct:libtorrent::http_connection
m_filtered_handles	include/torrent_view.hpp	/^	std::vector<lt::torrent_status const*> m_filtered_handles;$/;"	m	struct:torrent_view
m_filtered_pad_blocks	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_filtered_pad_blocks = 0;$/;"	m	class:libtorrent::piece_picker
m_finished	libtorrent/include/libtorrent/http_parser.hpp	/^		bool m_finished = false;$/;"	m	class:libtorrent::http_parser
m_finished	libtorrent/include/libtorrent/peer_list.hpp	/^		std::uint32_t m_finished:1;$/;"	m	struct:libtorrent::peer_list
m_first	libtorrent/include/libtorrent/linked_list.hpp	/^		T* m_first;$/;"	m	struct:libtorrent::linked_list
m_first	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* m_first;$/;"	m	struct:libtorrent::tailqueue
m_first_request	libtorrent/include/libtorrent/web_connection_base.hpp	/^		bool m_first_request;$/;"	m	class:libtorrent::web_connection_base
m_flags	libtorrent/include/libtorrent/http_parser.hpp	/^		int m_flags;$/;"	m	class:libtorrent::http_parser
m_flags	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::uint8_t m_flags = 0;$/;"	m	class:libtorrent::torrent_info
m_free_block_infos	libtorrent/include/libtorrent/piece_picker.hpp	/^		std::vector<std::uint16_t> m_free_block_infos;$/;"	m	class:libtorrent::piece_picker
m_free_list	libtorrent/include/libtorrent/peer_class.hpp	/^		std::vector<peer_class_t> m_free_list;$/;"	m	struct:libtorrent::peer_class_pool
m_free_slots	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<storage_index_t> m_free_slots;$/;"	m	struct:libtorrent::final
m_free_slots	libtorrent/include/libtorrent/part_file.hpp	/^		std::vector<slot_index_t> m_free_slots;$/;"	m	struct:libtorrent::part_file
m_fun	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^		Fun m_fun;$/;"	m	struct:libtorrent::aux::scope_end_impl
m_generation	libtorrent/include/libtorrent/alert_manager.hpp	/^		int m_generation = 0;$/;"	m	class:libtorrent::alert_manager
m_generic_io_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		job_queue m_generic_io_jobs;$/;"	m	struct:libtorrent::final
m_generic_threads	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		disk_io_thread_pool m_generic_threads;$/;"	m	struct:libtorrent::final
m_get_foreign_node	libtorrent/include/libtorrent/kademlia/node.hpp	/^	get_foreign_node_t m_get_foreign_node;$/;"	m	class:libtorrent::dht::node
m_ghost_size	libtorrent/include/libtorrent/block_cache.hpp	/^		int m_ghost_size;$/;"	m	struct:libtorrent::block_cache
m_graceful_pause_mode	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_graceful_pause_mode:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_handle	libtorrent/include/libtorrent/file.hpp	/^		DIR* m_handle;$/;"	m	class:libtorrent::directory
m_handle	libtorrent/include/libtorrent/file.hpp	/^		HANDLE m_handle;$/;"	m	class:libtorrent::directory
m_handler	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^	Handler m_handler;$/;"	m	struct:libtorrent::aux::handler_wrapper
m_handler	libtorrent/include/libtorrent/http_connection.hpp	/^	http_handler m_handler;$/;"	m	struct:libtorrent::http_connection
m_has_fence	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		int m_has_fence = 0;$/;"	m	struct:libtorrent::aux::disk_job_fence
m_hash	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		HCRYPTHASH m_hash;$/;"	m	struct:libtorrent::aux::crypt_hash
m_hash_io_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		job_queue m_hash_io_jobs;$/;"	m	struct:libtorrent::final
m_hash_threads	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		disk_io_thread_pool m_hash_threads;$/;"	m	struct:libtorrent::final
m_have_all	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_have_all:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_have_filtered_pad_blocks	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_have_filtered_pad_blocks = 0;$/;"	m	class:libtorrent::piece_picker
m_have_pad_blocks	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_have_pad_blocks = 0;$/;"	m	class:libtorrent::piece_picker
m_have_piece	libtorrent/include/libtorrent/peer_connection.hpp	/^		typed_bitfield<piece_index_t> m_have_piece;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_have_pieces	libtorrent/include/libtorrent/aux_/file_progress.hpp	/^		typed_bitfield<piece_index_t> m_have_pieces;$/;"	m	struct:libtorrent::aux::file_progress
m_header	libtorrent/include/libtorrent/http_parser.hpp	/^		std::multimap<std::string, std::string> m_header;$/;"	m	class:libtorrent::http_parser
m_header_size	libtorrent/include/libtorrent/part_file.hpp	/^		int const m_header_size;$/;"	m	struct:libtorrent::part_file
m_height	include/torrent_view.hpp	/^	int m_height;$/;"	m	struct:torrent_view
m_history	libtorrent/include/libtorrent/timestamp_history.hpp	/^	std::array<std::uint32_t, history_size> m_history;$/;"	m	struct:libtorrent::timestamp_history
m_host	libtorrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_host;$/;"	m	class:libtorrent::web_connection_base
m_host_resolver	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			resolver m_host_resolver;$/;"	m	struct:libtorrent::aux::final
m_host_resolver	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		udp::resolver m_host_resolver;$/;"	m	struct:libtorrent::dht::final
m_host_resolver	libtorrent/include/libtorrent/tracker_manager.hpp	/^		resolver_interface& m_host_resolver;$/;"	m	class:libtorrent::final
m_hostname	libtorrent/include/libtorrent/http_connection.hpp	/^	std::string m_hostname;$/;"	m	struct:libtorrent::http_connection
m_hostname	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_hostname;$/;"	m	class:libtorrent::i2p_connection
m_hostname	libtorrent/include/libtorrent/proxy_base.hpp	/^	std::string m_hostname; \/\/ proxy host$/;"	m	class:libtorrent::proxy_base
m_hostname	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::string m_hostname;$/;"	m	class:libtorrent::udp_tracker_connection
m_http_conns	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<std::shared_ptr<http_tracker_connection>> m_http_conns;$/;"	m	class:libtorrent::final
m_http_seeds	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::string> m_http_seeds;$/;"	m	struct:libtorrent::create_torrent
m_i2p_conn	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			i2p_connection m_i2p_conn;$/;"	m	struct:libtorrent::aux::final
m_i2p_conn	libtorrent/include/libtorrent/http_connection.hpp	/^	i2p_connection* m_i2p_conn;$/;"	m	struct:libtorrent::http_connection
m_i2p_listen_socket	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::shared_ptr<socket_type> m_i2p_listen_socket;$/;"	m	struct:libtorrent::aux::final
m_i2p_local_endpoint	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_i2p_local_endpoint;$/;"	m	class:libtorrent::i2p_connection
m_id	libtorrent/include/libtorrent/debug.hpp	/^		mutable std::thread::id m_id;$/;"	m	struct:libtorrent::single_threaded
m_id	libtorrent/include/libtorrent/i2p_stream.hpp	/^	char const* m_id;$/;"	m	class:libtorrent::i2p_stream
m_id	libtorrent/include/libtorrent/kademlia/node.hpp	/^	node_id m_id;$/;"	m	class:libtorrent::dht::node
m_id	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	node_id m_id;$/;"	m	struct:libtorrent::dht::observer
m_id	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	node_id m_id; \/\/ our own node id$/;"	m	class:libtorrent::dht::routing_table
m_id	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::uint32_t m_id;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_idle_timer	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		deadline_timer m_idle_timer;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_idx	libtorrent/include/libtorrent/disk_interface.hpp	/^			, m_idx(rhs.m_idx)$/;"	f	struct:libtorrent::storage_holder
m_idx	libtorrent/include/libtorrent/index_range.hpp	/^	Index m_idx;$/;"	m	struct:libtorrent::index_iter
m_idx	libtorrent/include/libtorrent/stack_allocator.hpp	/^		int m_idx;$/;"	m	namespace:libtorrent::aux
m_ignore_stats	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_ignore_stats:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_immutable	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^	bool m_immutable;$/;"	m	class:libtorrent::dht::get_item
m_impl	libtorrent/include/libtorrent/session.hpp	/^		std::shared_ptr<aux::session_impl> m_impl;$/;"	m	class:libtorrent::session
m_impl	libtorrent/include/libtorrent/session.hpp	/^		std::shared_ptr<aux::session_impl> m_impl;$/;"	m	class:libtorrent::session_proxy
m_impl	libtorrent/include/libtorrent/session_handle.hpp	/^		std::weak_ptr<aux::session_impl> m_impl;$/;"	m	struct:libtorrent::session_handle
m_impl	libtorrent/include/libtorrent/utp_stream.hpp	/^	utp_socket_impl* m_impl;$/;"	m	struct:libtorrent::utp_stream
m_in_constructor	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	bool m_in_constructor = true;$/;"	m	struct:libtorrent::dht::observer
m_in_constructor	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_in_constructor = true;$/;"	m	class:libtorrent::peer_connection
m_in_flight	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^	bool m_in_flight = false;$/;"	m	struct:libtorrent::aux::deferred_handler
m_in_flight	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^	bool& m_in_flight;$/;"	m	struct:libtorrent::aux::handler_wrapper
m_in_use	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		int m_in_use;$/;"	m	struct:libtorrent::disk_buffer_pool
m_in_use	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	bool m_in_use = true;$/;"	m	struct:libtorrent::dht::observer
m_in_use	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_in_use = 1337;$/;"	m	class:libtorrent::peer_connection
m_in_use	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		bool m_in_use = true;$/;"	m	struct:libtorrent::final
m_inactivity_timer	libtorrent/include/libtorrent/torrent.hpp	/^		deadline_timer m_inactivity_timer;$/;"	m	class:libtorrent::torrent
m_include_mtime	libtorrent/include/libtorrent/create_torrent.hpp	/^		bool m_include_mtime:1;$/;"	m	struct:libtorrent::create_torrent
m_include_symlinks	libtorrent/include/libtorrent/create_torrent.hpp	/^		bool m_include_symlinks:1;$/;"	m	struct:libtorrent::create_torrent
m_incoming_close_reason	libtorrent/include/libtorrent/utp_stream.hpp	/^	close_reason_t m_incoming_close_reason = close_reason_t::none;$/;"	m	struct:libtorrent::utp_stream
m_incoming_sockets	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::set<std::shared_ptr<socket_type>> m_incoming_sockets;$/;"	m	struct:libtorrent::aux::final
m_index	libtorrent/include/libtorrent/timestamp_history.hpp	/^	std::uint16_t m_index = 0;$/;"	m	struct:libtorrent::timestamp_history
m_info_dict	libtorrent/include/libtorrent/create_torrent.hpp	/^		entry m_info_dict;$/;"	m	struct:libtorrent::create_torrent
m_info_dict	libtorrent/include/libtorrent/torrent_info.hpp	/^		mutable bdecode_node m_info_dict;$/;"	m	class:libtorrent::torrent_info
m_info_hash	libtorrent/include/libtorrent/torrent.hpp	/^		sha1_hash m_info_hash;$/;"	m	class:libtorrent::torrent
m_info_hash	libtorrent/include/libtorrent/torrent_info.hpp	/^		sha1_hash m_info_hash;$/;"	m	class:libtorrent::torrent_info
m_info_section	libtorrent/include/libtorrent/torrent_info.hpp	/^		boost::shared_array<char> m_info_section;$/;"	m	class:libtorrent::torrent_info
m_info_section_size	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::int32_t m_info_section_size = 0;$/;"	m	class:libtorrent::torrent_info
m_initialized	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_initialized = false;$/;"	m	class:libtorrent::peer_connection
m_interesting	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_interesting:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_interface_idx	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_interface_idx;$/;"	m	namespace:libtorrent
m_interface_index	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable std::uint8_t m_interface_index = 0;$/;"	m	struct:libtorrent::aux::final
m_ints	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		std::array<int, settings_pack::num_int_settings> m_ints;$/;"	m	struct:libtorrent::aux::session_settings_single_thread
m_ints	libtorrent/include/libtorrent/settings_pack.hpp	/^		std::vector<std::pair<std::uint16_t, int>> m_ints;$/;"	m	namespace:libtorrent
m_invoke_count	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int8_t m_invoke_count = 0;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_io_service	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			io_service& m_io_service;$/;"	m	struct:libtorrent::aux::final
m_io_service	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		io_service& m_io_service;$/;"	m	struct:libtorrent::aux::socket_type
m_io_service	libtorrent/include/libtorrent/i2p_stream.hpp	/^	io_service& m_io_service;$/;"	m	class:libtorrent::i2p_connection
m_io_service	libtorrent/include/libtorrent/session.hpp	/^		std::shared_ptr<io_service> m_io_service;$/;"	m	class:libtorrent::session
m_io_service	libtorrent/include/libtorrent/session.hpp	/^		std::shared_ptr<io_service> m_io_service;$/;"	m	class:libtorrent::session_proxy
m_io_service	libtorrent/include/libtorrent/upnp.hpp	/^	io_service& m_io_service;$/;"	m	struct:libtorrent::final
m_io_service	libtorrent/include/libtorrent/utp_stream.hpp	/^	io_service& m_io_service;$/;"	m	struct:libtorrent::utp_stream
m_ios	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		io_service& m_ios;$/;"	m	struct:libtorrent::disk_buffer_pool
m_ios	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		io_service& m_ios;$/;"	m	struct:libtorrent::final
m_ios	libtorrent/include/libtorrent/peer_connection.hpp	/^		io_service& m_ios;$/;"	m	class:libtorrent::peer_connection
m_ios	libtorrent/include/libtorrent/resolver.hpp	/^	io_service& m_ios;$/;"	m	struct:libtorrent::final
m_ios	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		io_service& m_ios;$/;"	m	struct:libtorrent::utp_socket_manager
m_ip4s	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	std::unordered_multiset<address_v4::bytes_type, ipv4_hash> m_ip4s;$/;"	m	struct:libtorrent::dht::ip_set
m_ip6s	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	std::unordered_multiset<address_v6::bytes_type, ipv6_hash> m_ip6s;$/;"	m	struct:libtorrent::dht::ip_set
m_ip_filter	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::shared_ptr<ip_filter> m_ip_filter;$/;"	m	struct:libtorrent::aux::final
m_ip_filter	libtorrent/include/libtorrent/torrent.hpp	/^		std::shared_ptr<const ip_filter> m_ip_filter;$/;"	m	class:libtorrent::torrent
m_ip_notifier	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::unique_ptr<ip_change_notifier> m_ip_notifier;$/;"	m	struct:libtorrent::aux::final
m_ips	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	ip_set m_ips;$/;"	m	class:libtorrent::dht::routing_table
m_iterating_connections	libtorrent/include/libtorrent/torrent.hpp	/^		mutable int m_iterating_connections = 0;$/;"	m	class:libtorrent::torrent
m_job_completions_in_flight	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		bool m_job_completions_in_flight = false;$/;"	m	struct:libtorrent::final
m_job_cond	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			std::condition_variable m_job_cond;$/;"	m	struct:libtorrent::final::job_queue
m_job_mutex	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		mutable std::mutex m_job_mutex;$/;"	m	struct:libtorrent::final
m_job_mutex	libtorrent/include/libtorrent/disk_job_pool.hpp	/^		std::mutex m_job_mutex;$/;"	m	struct:libtorrent::disk_job_pool
m_job_pool	libtorrent/include/libtorrent/disk_job_pool.hpp	/^		boost::pool<> m_job_pool;$/;"	m	struct:libtorrent::disk_job_pool
m_jobs_aborted	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		std::atomic_flag m_jobs_aborted = ATOMIC_FLAG_INIT;$/;"	m	struct:libtorrent::final
m_jobs_in_use	libtorrent/include/libtorrent/disk_job_pool.hpp	/^		int m_jobs_in_use;$/;"	m	struct:libtorrent::disk_job_pool
m_key_refresh_timer	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		deadline_timer m_key_refresh_timer;$/;"	m	struct:libtorrent::dht::final
m_last	libtorrent/include/libtorrent/linked_list.hpp	/^		T* m_last;$/;"	m	struct:libtorrent::linked_list
m_last	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* m_last;$/;"	m	struct:libtorrent::tailqueue
m_last_auto_manage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_last_auto_manage;$/;"	m	struct:libtorrent::aux::final
m_last_cache_expiry	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		time_point m_last_cache_expiry = min_time();$/;"	m	struct:libtorrent::final
m_last_cache_op	libtorrent/include/libtorrent/block_cache.hpp	/^		int m_last_cache_op;$/;"	m	struct:libtorrent::block_cache
m_last_choke	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_last_choke;$/;"	m	struct:libtorrent::aux::final
m_last_choke	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		time_point m_last_choke;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
m_last_choke	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_choke = min_time();$/;"	m	class:libtorrent::peer_connection
m_last_incoming_request	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_incoming_request = min_time();$/;"	m	class:libtorrent::peer_connection
m_last_index	libtorrent/include/libtorrent/bdecode.hpp	/^	mutable int m_last_index = -1;$/;"	m	struct:bdecode_node
m_last_piece	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_piece = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_receive	libtorrent/include/libtorrent/http_connection.hpp	/^	time_point m_last_receive;$/;"	m	struct:libtorrent::http_connection
m_last_receive	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_receive = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_request	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_request = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_rotate	libtorrent/include/libtorrent/ip_voter.hpp	/^		time_point m_last_rotate;$/;"	m	struct:libtorrent::ip_voter
m_last_second_tick	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_last_second_tick;$/;"	m	struct:libtorrent::aux::final
m_last_seen_complete	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_t m_last_seen_complete = 0;$/;"	m	class:libtorrent::peer_connection
m_last_seen_complete	libtorrent/include/libtorrent/torrent.hpp	/^		std::time_t m_last_seen_complete = 0;$/;"	m	class:libtorrent::torrent
m_last_self_refresh	libtorrent/include/libtorrent/kademlia/node.hpp	/^	time_point m_last_self_refresh;$/;"	m	class:libtorrent::dht::node
m_last_self_refresh	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	mutable time_point m_last_self_refresh;$/;"	m	class:libtorrent::dht::routing_table
m_last_sent	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_sent = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_sent_payload	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_sent_payload = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_socket	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		utp_socket_impl* m_last_socket = nullptr;$/;"	m	struct:libtorrent::utp_socket_manager
m_last_tick	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_last_tick;$/;"	m	struct:libtorrent::aux::final
m_last_tick	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		time_point m_last_tick;$/;"	m	struct:libtorrent::dht::final
m_last_token	libtorrent/include/libtorrent/bdecode.hpp	/^	mutable int m_last_token = -1;$/;"	m	struct:bdecode_node
m_last_tracker_tick	libtorrent/include/libtorrent/kademlia/node.hpp	/^	time_point m_last_tracker_tick;$/;"	m	class:libtorrent::dht::node
m_last_unchoke	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_unchoke = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_unchoked	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_unchoked = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_working_tracker	libtorrent/include/libtorrent/torrent.hpp	/^		std::int8_t m_last_working_tracker = -1;$/;"	m	class:libtorrent::torrent
m_len	libtorrent/include/libtorrent/lazy_entry.hpp	/^		std::uint32_t m_len = 0;$/;"	m	struct:libtorrent::lazy_entry
m_len	libtorrent/include/libtorrent/span.hpp	/^			: m_ptr(&arr[0]), m_len(N) {}$/;"	f	struct:libtorrent::span
m_len	libtorrent/include/libtorrent/span.hpp	/^			: m_ptr(v.data()), m_len(v.size()) {}$/;"	f	struct:libtorrent::span
m_len	libtorrent/include/libtorrent/span.hpp	/^		difference_type m_len;$/;"	m	struct:libtorrent::span
m_len	libtorrent/include/libtorrent/span.hpp	/^		span(T* p, difference_type const l) noexcept : m_ptr(p), m_len(l) \/\/ NOLINT$/;"	f	struct:libtorrent::span
m_limit	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^	std::int32_t m_limit;$/;"	m	struct:libtorrent::bandwidth_channel
m_limit	libtorrent/include/libtorrent/packet_pool.hpp	/^		const std::size_t m_limit;$/;"	m	struct:libtorrent::packet_slab
m_limiter_down_queue_idx	include/session_view.hpp	/^	int const m_limiter_down_queue_idx = lt::find_metric_idx("net.limiter_down_queue");$/;"	m	struct:session_view
m_limiter_timer	libtorrent/include/libtorrent/http_connection.hpp	/^	deadline_timer m_limiter_timer;$/;"	m	struct:libtorrent::http_connection
m_limiter_timer_active	libtorrent/include/libtorrent/http_connection.hpp	/^	bool m_limiter_timer_active;$/;"	m	struct:libtorrent::http_connection
m_limiter_up_queue_idx	include/session_view.hpp	/^	int const m_limiter_up_queue_idx = lt::find_metric_idx("net.limiter_up_queue");$/;"	m	struct:session_view
m_links	libtorrent/include/libtorrent/resolve_links.hpp	/^		aux::vector<link_t, file_index_t> m_links;$/;"	m	struct:libtorrent::resolve_links
m_links	libtorrent/include/libtorrent/torrent.hpp	/^			m_links;$/;"	m	class:libtorrent::torrent
m_listen_address	libtorrent/include/libtorrent/lsd.hpp	/^	address m_listen_address;$/;"	m	struct:libtorrent::lsd
m_listen_address	libtorrent/include/libtorrent/upnp.hpp	/^	address_v4 m_listen_address;$/;"	m	struct:libtorrent::final
m_listen_interfaces	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<listen_interface_t> m_listen_interfaces;$/;"	m	struct:libtorrent::aux::final
m_listen_socket	libtorrent/include/libtorrent/udp_socket.hpp	/^		aux::listen_socket_handle m_listen_socket;$/;"	m	class:libtorrent::udp_socket
m_listen_sockets	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<std::shared_ptr<listen_socket_t>> m_listen_sockets;$/;"	m	struct:libtorrent::aux::final
m_live_allocations	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		int m_live_allocations = 0;$/;"	m	struct:libtorrent::final
m_live_bytes	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		int m_live_bytes = 0;$/;"	m	struct:libtorrent::final
m_local	libtorrent/include/libtorrent/peer_connection.hpp	/^		tcp::endpoint m_local;$/;"	m	class:libtorrent::peer_connection
m_locked_peer	libtorrent/include/libtorrent/peer_list.hpp	/^		torrent_peer* m_locked_peer;$/;"	m	struct:libtorrent::peer_list
m_log	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dht_observer* m_log;$/;"	m	struct:libtorrent::dht::final
m_log	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	dht_logger* m_log;$/;"	m	class:libtorrent::dht::routing_table
m_log	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	dht_logger* m_log;$/;"	m	class:libtorrent::dht::rpc_manager
m_low_prio_io	libtorrent/include/libtorrent/file_pool.hpp	/^		bool m_low_prio_io = false;$/;"	m	struct:libtorrent::file_pool
m_low_watermark	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		int m_low_watermark;$/;"	m	struct:libtorrent::disk_buffer_pool
m_lru	libtorrent/include/libtorrent/block_cache.hpp	/^		linked_list<cached_piece_entry> m_lru[cached_piece_entry::num_lrus];$/;"	m	struct:libtorrent::block_cache
m_lsd_announce_timer	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			deadline_timer m_lsd_announce_timer;$/;"	m	struct:libtorrent::aux::final
m_magic	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		int m_magic;$/;"	m	struct:libtorrent::disk_buffer_pool
m_magic	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int m_magic = 0x1337;$/;"	m	struct:libtorrent::final
m_magic	libtorrent/include/libtorrent/i2p_stream.hpp	/^	int m_magic;$/;"	m	class:libtorrent::i2p_stream
m_magic	libtorrent/include/libtorrent/udp_socket.hpp	/^		int m_magic;$/;"	m	class:libtorrent::udp_socket
m_man	libtorrent/include/libtorrent/tracker_manager.hpp	/^		tracker_manager& m_man;$/;"	m	struct:libtorrent::tracker_connection
m_map_timer	libtorrent/include/libtorrent/upnp.hpp	/^	deadline_timer m_map_timer;$/;"	m	struct:libtorrent::final
m_mapped_files	libtorrent/include/libtorrent/storage.hpp	/^		std::unique_ptr<file_storage> m_mapped_files;$/;"	m	class:libtorrent::default_storage
m_mappings	libtorrent/include/libtorrent/natpmp.hpp	/^	aux::vector<mapping_t, port_mapping_t> m_mappings;$/;"	m	struct:libtorrent::natpmp
m_mappings	libtorrent/include/libtorrent/upnp.hpp	/^	aux::vector<global_mapping_t, port_mapping_t> m_mappings;$/;"	m	struct:libtorrent::final
m_max_bottled_buffer_size	libtorrent/include/libtorrent/http_connection.hpp	/^	int m_max_bottled_buffer_size;$/;"	m	struct:libtorrent::http_connection
m_max_connections	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint32_t m_max_connections:24;$/;"	m	struct:libtorrent::torrent_hot_members
m_max_failcount	libtorrent/include/libtorrent/peer_list.hpp	/^		int m_max_failcount = 3;$/;"	m	struct:libtorrent::peer_list
m_max_out_request_queue	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_max_out_request_queue;$/;"	m	class:libtorrent::peer_connection
m_max_pieces	libtorrent/include/libtorrent/part_file.hpp	/^		int const m_max_pieces;$/;"	m	struct:libtorrent::part_file
m_max_size	libtorrent/include/libtorrent/resolver.hpp	/^	int m_max_size;$/;"	m	struct:libtorrent::final
m_max_threads	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::atomic<int> m_max_threads;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_max_use	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		int m_max_use;$/;"	m	struct:libtorrent::disk_buffer_pool
m_max_volatile_blocks	libtorrent/include/libtorrent/block_cache.hpp	/^		int m_max_volatile_blocks;$/;"	m	struct:libtorrent::block_cache
m_mean	libtorrent/include/libtorrent/sliding_average.hpp	/^	Int m_mean = 0;$/;"	m	struct:libtorrent::sliding_average
m_merkle_first_leaf	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::int32_t m_merkle_first_leaf = 0;$/;"	m	class:libtorrent::torrent_info
m_merkle_torrent	libtorrent/include/libtorrent/create_torrent.hpp	/^		bool m_merkle_torrent:1;$/;"	m	struct:libtorrent::create_torrent
m_merkle_tree	libtorrent/include/libtorrent/create_torrent.hpp	/^		mutable aux::vector<sha1_hash> m_merkle_tree;$/;"	m	struct:libtorrent::create_torrent
m_merkle_tree	libtorrent/include/libtorrent/torrent_info.hpp	/^		aux::vector<sha1_hash> m_merkle_tree;$/;"	m	class:libtorrent::torrent_info
m_message_rate_limit	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		int m_message_rate_limit;$/;"	m	struct:libtorrent::dht::dos_blocker
m_method	libtorrent/include/libtorrent/http_parser.hpp	/^		std::string m_method;$/;"	m	class:libtorrent::http_parser
m_mfu_ghost_idx	include/session_view.hpp	/^	int const m_mfu_ghost_idx = lt::find_metric_idx("disk.arc_mfu_ghost_size");$/;"	m	struct:session_view
m_mfu_size_idx	include/session_view.hpp	/^	int const m_mfu_size_idx = lt::find_metric_idx("disk.arc_mfu_size");$/;"	m	struct:session_view
m_min_idle_threads	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::atomic<int> m_min_idle_threads;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_model	libtorrent/include/libtorrent/upnp.hpp	/^	std::string m_model;$/;"	m	struct:libtorrent::final
m_mru_ghost_idx	include/session_view.hpp	/^	int const m_mru_ghost_idx = lt::find_metric_idx("disk.arc_mru_ghost_size");$/;"	m	struct:session_view
m_mru_size_idx	include/session_view.hpp	/^	int const m_mru_size_idx = lt::find_metric_idx("disk.arc_mru_size");$/;"	m	struct:session_view
m_msg	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		bdecode_node m_msg;$/;"	m	struct:libtorrent::dht::final
m_msg_idx	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_msg_idx;$/;"	m	struct:libtorrent::final
m_mtime	libtorrent/include/libtorrent/file_storage.hpp	/^		aux::vector<std::time_t, file_index_t> m_mtime;$/;"	m	class:libtorrent::file_storage
m_mtu_ceiling_slab	libtorrent/include/libtorrent/packet_pool.hpp	/^		packet_slab m_mtu_ceiling_slab;$/;"	m	struct:libtorrent::packet_pool
m_mtu_floor_slab	libtorrent/include/libtorrent/packet_pool.hpp	/^		packet_slab m_mtu_floor_slab;$/;"	m	struct:libtorrent::packet_pool
m_mtu_idx	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int m_mtu_idx = 0;$/;"	m	struct:libtorrent::utp_socket_manager
m_multicast_endpoint	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		udp::endpoint m_multicast_endpoint;$/;"	m	class:libtorrent::broadcast_socket
m_multicast_socket	libtorrent/include/libtorrent/upnp.hpp	/^	udp::socket m_multicast_socket;$/;"	m	struct:libtorrent::final
m_multifile	libtorrent/include/libtorrent/create_torrent.hpp	/^		bool m_multifile:1;$/;"	m	struct:libtorrent::create_torrent
m_mutable	libtorrent/include/libtorrent/kademlia/item.hpp	/^	bool m_mutable = false;$/;"	m	class:libtorrent::dht::item
m_mutex	libtorrent/include/libtorrent/alert_manager.hpp	/^		mutable std::recursive_mutex m_mutex;$/;"	m	class:libtorrent::alert_manager
m_mutex	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::aux::disk_job_fence
m_mutex	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::aux::session_settings
m_mutex	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::mutex m_mutex;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_mutex	libtorrent/include/libtorrent/file_pool.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::file_pool
m_mutex	libtorrent/include/libtorrent/kademlia/node.hpp	/^	std::mutex m_mutex;$/;"	m	class:libtorrent::dht::node
m_mutex	libtorrent/include/libtorrent/part_file.hpp	/^		std::mutex m_mutex;$/;"	m	struct:libtorrent::part_file
m_mutex	libtorrent/include/libtorrent/performance_counters.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::counters
m_mutex	libtorrent/include/libtorrent/stat_cache.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::stat_cache
m_name	libtorrent/include/libtorrent/file.hpp	/^		std::string m_name;$/;"	m	class:libtorrent::directory
m_name	libtorrent/include/libtorrent/file_storage.hpp	/^		std::string m_name;$/;"	m	class:libtorrent::file_storage
m_name	libtorrent/include/libtorrent/part_file.hpp	/^		std::string const m_name;$/;"	m	class:libtorrent::part_file::std
m_name	libtorrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<std::string> m_name;$/;"	m	class:libtorrent::torrent
m_name_idx	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_name_idx;$/;"	m	struct:libtorrent::final
m_name_idx	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_name_idx;$/;"	m	struct:libtorrent::torrent_alert
m_name_lookup	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::list<std::pair<std::string, name_lookup_handler>> m_name_lookup;$/;"	m	class:libtorrent::i2p_connection
m_name_lookup	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_name_lookup;$/;"	m	class:libtorrent::i2p_stream
m_nat_endpoint	libtorrent/include/libtorrent/natpmp.hpp	/^	udp::endpoint m_nat_endpoint;$/;"	m	struct:libtorrent::natpmp
m_need_auto_manage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_need_auto_manage = false;$/;"	m	struct:libtorrent::aux::final
m_need_tick	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<std::pair<time_point, std::weak_ptr<storage_interface>>> m_need_tick;$/;"	m	struct:libtorrent::final
m_need_tick	libtorrent/include/libtorrent/storage.hpp	/^		bool m_need_tick = false;$/;"	m	struct:libtorrent::storage_interface
m_need_tick_mutex	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		std::mutex m_need_tick_mutex;$/;"	m	struct:libtorrent::final
m_need_uncork	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_need_uncork = false;$/;"	m	struct:libtorrent::cork
m_netmask	libtorrent/include/libtorrent/lsd.hpp	/^	address m_netmask;$/;"	m	struct:libtorrent::lsd
m_netmask	libtorrent/include/libtorrent/upnp.hpp	/^	address_v4 m_netmask;$/;"	m	struct:libtorrent::final
m_new_connection	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int m_new_connection = -1;$/;"	m	struct:libtorrent::utp_socket_manager
m_next_close_oldest_file	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		time_point m_next_close_oldest_file = min_time();$/;"	m	struct:libtorrent::final
m_next_dht_torrent	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_map::iterator m_next_dht_torrent;$/;"	m	struct:libtorrent::aux::final
m_next_downloading_connect_torrent	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_next_downloading_connect_torrent = 0;$/;"	m	struct:libtorrent::aux::final
m_next_ep	libtorrent/include/libtorrent/http_connection.hpp	/^	int m_next_ep;$/;"	m	struct:libtorrent::http_connection
m_next_finished_connect_torrent	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_next_finished_connect_torrent = 0;$/;"	m	struct:libtorrent::aux::final
m_next_lsd_torrent	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_map::iterator m_next_lsd_torrent;$/;"	m	struct:libtorrent::aux::final
m_next_port	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable int m_next_port = 0;$/;"	m	struct:libtorrent::aux::final
m_next_scrape_torrent	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_next_scrape_torrent = 0;$/;"	m	struct:libtorrent::aux::final
m_nl_family	libtorrent/include/libtorrent/netlink.hpp	/^		int m_nl_family;$/;"	m	class:libtorrent::netlink
m_no_connect	libtorrent/include/libtorrent/http_stream.hpp	/^	bool m_no_connect;$/;"	m	class:libtorrent::http_stream
m_node	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	node& m_node;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_nodes	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::pair<std::string, int>> m_nodes;$/;"	m	struct:libtorrent::create_torrent
m_nodes	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		tracker_nodes_t m_nodes;$/;"	m	struct:libtorrent::dht::final
m_nodes	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<std::pair<std::string, int>> m_nodes;$/;"	m	class:libtorrent::torrent_info
m_nodes_callback	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^	nodes_callback m_nodes_callback;$/;"	m	struct:libtorrent::dht::find_data
m_noseeds	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	bool m_noseeds;$/;"	m	struct:libtorrent::dht::get_peers
m_notify	libtorrent/include/libtorrent/alert_manager.hpp	/^		std::function<void()> m_notify;$/;"	m	class:libtorrent::alert_manager
m_num_blocks_read_idx	include/session_view.hpp	/^	int const m_num_blocks_read_idx = lt::find_metric_idx("disk.num_blocks_read");$/;"	m	struct:session_view
m_num_connect_candidates	libtorrent/include/libtorrent/peer_list.hpp	/^		int m_num_connect_candidates = 0;$/;"	m	struct:libtorrent::peer_list
m_num_connecting	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint16_t m_num_connecting = 0;$/;"	m	class:libtorrent::torrent
m_num_connecting_seeds	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint16_t m_num_connecting_seeds = 0;$/;"	m	class:libtorrent::torrent
m_num_filtered	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_num_filtered = 0;$/;"	m	class:libtorrent::piece_picker
m_num_have	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_num_have = 0;$/;"	m	class:libtorrent::piece_picker
m_num_have_filtered	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_num_have_filtered = 0;$/;"	m	class:libtorrent::piece_picker
m_num_idle_threads	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::atomic<int> m_num_idle_threads;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_num_invalid_requests	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_num_invalid_requests = 0;$/;"	m	class:libtorrent::peer_connection
m_num_items	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		int m_num_items = 0;$/;"	m	struct:libtorrent::heterogeneous_queue
m_num_pad_blocks	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_num_pad_blocks = 0;$/;"	m	class:libtorrent::piece_picker
m_num_passed	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_num_passed = 0;$/;"	m	class:libtorrent::piece_picker
m_num_peers_idx	include/session_view.hpp	/^	int const m_num_peers_idx = lt::find_metric_idx("peer.num_peers_connected");$/;"	m	struct:session_view
m_num_pieces	libtorrent/include/libtorrent/aux_/storage_piece_set.hpp	/^		int m_num_pieces = 0;$/;"	m	struct:libtorrent::aux::storage_piece_set
m_num_pieces	libtorrent/include/libtorrent/file_storage.hpp	/^		int m_num_pieces;$/;"	m	class:libtorrent::file_storage
m_num_pieces	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_num_pieces;$/;"	m	class:libtorrent::peer_connection
m_num_responses	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		int m_num_responses;$/;"	m	class:libtorrent::web_peer_connection
m_num_running_threads	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int m_num_running_threads = 0;$/;"	m	struct:libtorrent::final
m_num_samples	libtorrent/include/libtorrent/sliding_average.hpp	/^	int m_num_samples = 0;$/;"	m	struct:libtorrent::sliding_average
m_num_samples	libtorrent/include/libtorrent/timestamp_history.hpp	/^	std::uint16_t m_num_samples = not_initialized;$/;"	m	struct:libtorrent::timestamp_history
m_num_seeds	libtorrent/include/libtorrent/peer_list.hpp	/^		std::uint32_t m_num_seeds:31;$/;"	m	struct:libtorrent::peer_list
m_num_seeds	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint16_t m_num_seeds = 0;$/;"	m	class:libtorrent::torrent
m_num_verified	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint32_t m_num_verified = 0;$/;"	m	class:libtorrent::torrent
m_number	libtorrent/include/libtorrent/sha1_hash.hpp	/^		std::array<std::uint32_t, number_size> m_number;$/;"	m	class:libtorrent::digest32
m_obfuscated	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	bool m_obfuscated;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
m_obfuscated_torrents	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_map m_obfuscated_torrents;$/;"	m	struct:libtorrent::aux::final
m_observer	libtorrent/include/libtorrent/kademlia/node.hpp	/^	dht_observer* m_observer;$/;"	m	class:libtorrent::dht::node
m_observers	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		std::vector<std::weak_ptr<disk_observer>> m_observers;$/;"	m	struct:libtorrent::disk_buffer_pool
m_on_receive	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		receive_handler_t m_on_receive;$/;"	m	class:libtorrent::broadcast_socket
m_open	libtorrent/include/libtorrent/utp_stream.hpp	/^	bool m_open;$/;"	m	struct:libtorrent::utp_stream
m_optimistic_unchoke_time_scaler	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_optimistic_unchoke_time_scaler = 0;$/;"	m	struct:libtorrent::aux::final
m_orig_files	libtorrent/include/libtorrent/torrent_info.hpp	/^		copy_ptr<const file_storage> m_orig_files;$/;"	m	class:libtorrent::torrent_info
m_our_id	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	node_id m_our_id;$/;"	m	class:libtorrent::dht::rpc_manager
m_outgoing_interfaces	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<std::string> m_outgoing_interfaces;$/;"	m	struct:libtorrent::aux::final
m_outgoing_pids	libtorrent/include/libtorrent/torrent.hpp	/^		std::set<peer_id> m_outgoing_pids;$/;"	m	class:libtorrent::torrent
m_outstanding_bytes	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_outstanding_bytes = 0;$/;"	m	class:libtorrent::peer_connection
m_outstanding_check_files	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_outstanding_check_files = false;$/;"	m	class:libtorrent::torrent
m_outstanding_operations	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		int m_outstanding_operations;$/;"	m	class:libtorrent::broadcast_socket
m_outstanding_router_lookups	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_outstanding_router_lookups = 0;$/;"	m	struct:libtorrent::aux::final
m_outstanding_timer_wait	libtorrent/include/libtorrent/tracker_manager.hpp	/^		int m_outstanding_timer_wait = 0;$/;"	m	struct:libtorrent::timeout_handler
m_outstanding_writing_bytes	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_outstanding_writing_bytes = 0;$/;"	m	class:libtorrent::peer_connection
m_owned_collections	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<std::string> m_owned_collections;$/;"	m	class:libtorrent::torrent_info
m_owned_similar_torrents	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<sha1_hash> m_owned_similar_torrents;$/;"	m	class:libtorrent::torrent_info
m_owner	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			disk_io_thread& m_owner;$/;"	m	struct:libtorrent::final::job_queue
m_packet_pool	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		packet_pool m_packet_pool;$/;"	m	struct:libtorrent::utp_socket_manager
m_packet_size	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int m_packet_size = 0;$/;"	m	struct:libtorrent::crypto_receive_buffer
m_packet_size	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int m_packet_size = 0;$/;"	m	struct:libtorrent::receive_buffer
m_pad_blocks	libtorrent/include/libtorrent/piece_picker.hpp	/^		bitfield m_pad_blocks;$/;"	m	class:libtorrent::piece_picker
m_padding_blocks	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint16_t m_padding_blocks = 0;$/;"	m	class:libtorrent::torrent
m_pads_in_piece	libtorrent/include/libtorrent/piece_picker.hpp	/^		std::unordered_map<piece_index_t, int> m_pads_in_piece;$/;"	m	class:libtorrent::piece_picker
m_parser	libtorrent/include/libtorrent/http_connection.hpp	/^	http_parser m_parser;$/;"	m	struct:libtorrent::http_connection
m_parser	libtorrent/include/libtorrent/web_connection_base.hpp	/^		http_parser m_parser;$/;"	m	class:libtorrent::web_connection_base
m_part_file	libtorrent/include/libtorrent/storage.hpp	/^		std::unique_ptr<part_file> m_part_file;$/;"	m	class:libtorrent::default_storage
m_part_file_name	libtorrent/include/libtorrent/storage.hpp	/^		std::string m_part_file_name;$/;"	m	class:libtorrent::default_storage
m_partial_chunk_header	libtorrent/include/libtorrent/http_parser.hpp	/^		int m_partial_chunk_header = 0;$/;"	m	class:libtorrent::http_parser
m_partial_chunk_header	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		int m_partial_chunk_header;$/;"	m	class:libtorrent::http_seed_connection
m_partial_chunk_header	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		int m_partial_chunk_header;$/;"	m	class:libtorrent::web_peer_connection
m_password	libtorrent/include/libtorrent/http_stream.hpp	/^	std::string m_password;$/;"	m	class:libtorrent::http_stream
m_password	libtorrent/include/libtorrent/socks5_stream.hpp	/^	std::string m_password;$/;"	m	class:libtorrent::socks5_stream
m_password	libtorrent/include/libtorrent/torrent.hpp	/^		std::string m_password;$/;"	m	class:libtorrent::torrent
m_path	libtorrent/include/libtorrent/http_parser.hpp	/^		std::string m_path;$/;"	m	class:libtorrent::http_parser
m_path	libtorrent/include/libtorrent/part_file.hpp	/^		std::string m_path;$/;"	m	struct:libtorrent::part_file
m_path	libtorrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_path;$/;"	m	class:libtorrent::web_connection_base
m_path_idx	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_path_idx;$/;"	m	struct:libtorrent::final
m_paths	libtorrent/include/libtorrent/file_storage.hpp	/^		aux::vector<std::string> m_paths;$/;"	m	class:libtorrent::file_storage
m_paused	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_paused = false;$/;"	m	struct:libtorrent::aux::final
m_paused	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_paused:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_pc	libtorrent/include/libtorrent/peer_connection.hpp	/^		peer_connection& m_pc;$/;"	m	struct:libtorrent::cork
m_peak_up_rate	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_peak_up_rate = 0;$/;"	m	struct:libtorrent::aux::final
m_peer4_prefixes	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::set<std::uint32_t> m_peer4_prefixes;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_peer6_prefixes	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::set<std::uint64_t> m_peer6_prefixes;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_peer_allocator	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_peer_allocator m_peer_allocator;$/;"	m	struct:libtorrent::aux::final
m_peer_allocator	libtorrent/include/libtorrent/peer_list.hpp	/^		torrent_peer_allocator_interface& m_peer_allocator;$/;"	m	struct:libtorrent::peer_list
m_peer_class_filter	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			ip_filter m_peer_class_filter;$/;"	m	struct:libtorrent::aux::final
m_peer_class_type	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		std::array<std::uint32_t, num_socket_types> m_peer_class_type;$/;"	m	namespace:libtorrent
m_peer_class_type_filter	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			peer_class_type_filter m_peer_class_type_filter;$/;"	m	struct:libtorrent::aux::final
m_peer_class_type_mask	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		std::array<std::uint32_t, num_socket_types> m_peer_class_type_mask;$/;"	m	namespace:libtorrent
m_peer_classes	libtorrent/include/libtorrent/peer_class.hpp	/^		aux::deque<peer_class, peer_class_t> m_peer_classes;$/;"	m	struct:libtorrent::peer_class_pool
m_peer_id	libtorrent/include/libtorrent/peer_connection.hpp	/^		peer_id m_peer_id;$/;"	m	class:libtorrent::peer_connection
m_peer_id	libtorrent/include/libtorrent/torrent.hpp	/^		peer_id m_peer_id;$/;"	m	class:libtorrent::torrent
m_peer_info	libtorrent/include/libtorrent/peer_connection.hpp	/^		torrent_peer* m_peer_info;$/;"	m	class:libtorrent::peer_connection
m_peer_list	libtorrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<peer_list> m_peer_list;$/;"	m	struct:libtorrent::torrent_hot_members
m_peer_ssl_ctx	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			ssl::context m_peer_ssl_ctx;$/;"	m	struct:libtorrent::aux::final
m_peers	libtorrent/include/libtorrent/peer_list.hpp	/^		peers_t m_peers;$/;"	m	struct:libtorrent::peer_list
m_peers_to_disconnect	libtorrent/include/libtorrent/torrent.hpp	/^		std::vector<std::shared_ptr<peer_connection>> m_peers_to_disconnect;$/;"	m	class:libtorrent::torrent
m_pending_auto_manage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_pending_auto_manage = false;$/;"	m	struct:libtorrent::aux::final
m_picker	libtorrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<piece_picker> m_picker;$/;"	m	struct:libtorrent::torrent_hot_members
m_piece	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		aux::vector<char> m_piece;$/;"	m	class:libtorrent::web_peer_connection
m_piece_hash	libtorrent/include/libtorrent/create_torrent.hpp	/^		aux::vector<sha1_hash, piece_index_t> m_piece_hash;$/;"	m	struct:libtorrent::create_torrent
m_piece_hashes	libtorrent/include/libtorrent/torrent_info.hpp	/^		char const* m_piece_hashes = nullptr;$/;"	m	class:libtorrent::torrent_info
m_piece_length	libtorrent/include/libtorrent/file_storage.hpp	/^		int m_piece_length;$/;"	m	class:libtorrent::file_storage
m_piece_map	libtorrent/include/libtorrent/part_file.hpp	/^		std::unordered_map<piece_index_t, slot_index_t> m_piece_map;$/;"	m	struct:libtorrent::part_file
m_piece_map	libtorrent/include/libtorrent/piece_picker.hpp	/^		mutable aux::vector<piece_pos, piece_index_t> m_piece_map;$/;"	m	class:libtorrent::piece_picker
m_piece_size	libtorrent/include/libtorrent/part_file.hpp	/^		int const m_piece_size;$/;"	m	struct:libtorrent::part_file
m_piece_time_deviation	libtorrent/include/libtorrent/torrent.hpp	/^		std::int32_t m_piece_time_deviation = 0;$/;"	m	class:libtorrent::torrent
m_pieces	libtorrent/include/libtorrent/block_cache.hpp	/^		cache_t m_pieces;$/;"	m	struct:libtorrent::block_cache
m_pieces	libtorrent/include/libtorrent/piece_picker.hpp	/^		mutable aux::vector<piece_index_t, prio_index_t> m_pieces;$/;"	m	class:libtorrent::piece_picker
m_pinned_blocks	libtorrent/include/libtorrent/block_cache.hpp	/^		int m_pinned_blocks;$/;"	m	struct:libtorrent::block_cache
m_pinned_idx	include/session_view.hpp	/^	int const m_pinned_idx = lt::find_metric_idx("disk.pinned_blocks");$/;"	m	struct:session_view
m_pk	libtorrent/include/libtorrent/kademlia/item.hpp	/^	public_key m_pk;$/;"	m	class:libtorrent::dht::item
m_pool	libtorrent/include/libtorrent/storage.hpp	/^		file_pool& m_pool;$/;"	m	class:libtorrent::default_storage
m_pool_allocator	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	mutable boost::pool<> m_pool_allocator;$/;"	m	class:libtorrent::dht::rpc_manager
m_pool_mutex	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		mutable std::mutex m_pool_mutex;$/;"	m	struct:libtorrent::disk_buffer_pool
m_port	libtorrent/include/libtorrent/http_connection.hpp	/^	std::uint16_t m_port;$/;"	m	struct:libtorrent::http_connection
m_port	libtorrent/include/libtorrent/i2p_stream.hpp	/^	int m_port;$/;"	m	class:libtorrent::i2p_connection
m_port	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	std::uint16_t m_port = 0;$/;"	m	struct:libtorrent::dht::observer
m_port	libtorrent/include/libtorrent/proxy_base.hpp	/^	int m_port;             \/\/ proxy port$/;"	m	class:libtorrent::proxy_base
m_port	libtorrent/include/libtorrent/web_connection_base.hpp	/^		int m_port;$/;"	m	class:libtorrent::web_connection_base
m_port_filter	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			port_filter m_port_filter;$/;"	m	struct:libtorrent::aux::final
m_position	include/session_view.hpp	/^	int m_position;$/;"	m	struct:session_view
m_posted_stats_header	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_posted_stats_header = false;$/;"	m	struct:libtorrent::aux::final
m_posting_torrent_updates	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_posting_torrent_updates = false;$/;"	m	struct:libtorrent::aux::final
m_predictive_pieces	libtorrent/include/libtorrent/torrent.hpp	/^		std::vector<piece_index_t> m_predictive_pieces;$/;"	m	class:libtorrent::torrent
m_prefer_contiguous_blocks	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_prefer_contiguous_blocks = 0;$/;"	m	class:libtorrent::peer_connection
m_prio_torrents	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::deque<std::pair<std::weak_ptr<torrent>, int>> m_prio_torrents;$/;"	m	struct:libtorrent::aux::final
m_priority	libtorrent/include/libtorrent/http_connection.hpp	/^	int m_priority;$/;"	m	struct:libtorrent::http_connection
m_priority_boundaries	libtorrent/include/libtorrent/piece_picker.hpp	/^		mutable aux::vector<prio_index_t> m_priority_boundaries;$/;"	m	class:libtorrent::piece_picker
m_priority_pieces	libtorrent/include/libtorrent/aux_/suggest_piece.hpp	/^	vector<piece_index_t, int> m_priority_pieces;$/;"	m	struct:libtorrent::aux::suggest_piece
m_private	libtorrent/include/libtorrent/create_torrent.hpp	/^		bool m_private:1;$/;"	m	struct:libtorrent::create_torrent
m_proto	libtorrent/include/libtorrent/netlink.hpp	/^			protocol_type m_proto;$/;"	m	class:libtorrent::basic_nl_endpoint
m_protocol	libtorrent/include/libtorrent/http_parser.hpp	/^		std::string m_protocol;$/;"	m	class:libtorrent::http_parser
m_protocol	libtorrent/include/libtorrent/kademlia/node.hpp	/^	protocol_descriptor const& m_protocol;$/;"	m	class:libtorrent::dht::node
m_protocol	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	udp m_protocol; \/\/ protocol this table is for$/;"	m	class:libtorrent::dht::routing_table
m_proxy	libtorrent/include/libtorrent/http_connection.hpp	/^	aux::proxy_settings m_proxy;$/;"	m	struct:libtorrent::http_connection
m_proxy_settings	libtorrent/include/libtorrent/udp_socket.hpp	/^		aux::proxy_settings m_proxy_settings;$/;"	m	class:libtorrent::udp_socket
m_ptr	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^		char* m_ptr;$/;"	m	struct:libtorrent::aux::string_ptr
m_ptr	libtorrent/include/libtorrent/copy_ptr.hpp	/^		std::unique_ptr<T> m_ptr;$/;"	m	struct:libtorrent::copy_ptr
m_ptr	libtorrent/include/libtorrent/span.hpp	/^		T* m_ptr;$/;"	m	struct:libtorrent::span
m_put_callback	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	put_callback m_put_callback;$/;"	m	struct:libtorrent::dht::put_data
m_queue	libtorrent/include/libtorrent/bandwidth_manager.hpp	/^	std::vector<bw_request> m_queue;$/;"	m	struct:libtorrent::bandwidth_manager
m_queue_size_limit	libtorrent/include/libtorrent/alert_manager.hpp	/^		int m_queue_size_limit;$/;"	m	class:libtorrent::alert_manager
m_queued	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::deque<std::shared_ptr<http_tracker_connection>> m_queued;$/;"	m	class:libtorrent::final
m_queued_bytes	libtorrent/include/libtorrent/bandwidth_manager.hpp	/^	std::int64_t m_queued_bytes;$/;"	m	struct:libtorrent::bandwidth_manager
m_queued_bytes_idx	include/session_view.hpp	/^	int const m_queued_bytes_idx = lt::find_metric_idx("disk.queued_write_bytes");$/;"	m	struct:session_view
m_queued_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			jobqueue_t m_queued_jobs;$/;"	m	struct:libtorrent::final::job_queue
m_queued_reads_idx	include/session_view.hpp	/^	int const m_queued_reads_idx = lt::find_metric_idx("disk.num_read_jobs");$/;"	m	struct:session_view
m_queued_time_critical	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_queued_time_critical = 0;$/;"	m	class:libtorrent::peer_connection
m_queued_writes_idx	include/session_view.hpp	/^	int const m_queued_writes_idx = lt::find_metric_idx("disk.num_write_jobs");$/;"	m	struct:session_view
m_quota	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_quota[2];$/;"	m	class:libtorrent::peer_connection
m_quota_left	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^	std::int64_t m_quota_left;$/;"	m	struct:libtorrent::bandwidth_channel
m_range_end	libtorrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_range_end = -1;$/;"	m	class:libtorrent::http_parser
m_range_start	libtorrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_range_start = -1;$/;"	m	class:libtorrent::http_parser
m_rate_limit	libtorrent/include/libtorrent/http_connection.hpp	/^	int m_rate_limit;$/;"	m	struct:libtorrent::http_connection
m_rc4_incoming	libtorrent/include/libtorrent/pe_crypto.hpp	/^		rc4 m_rc4_incoming;$/;"	m	struct:libtorrent::rc4_handler
m_rc4_outgoing	libtorrent/include/libtorrent/pe_crypto.hpp	/^		rc4 m_rc4_outgoing;$/;"	m	struct:libtorrent::rc4_handler
m_read_cache_size	libtorrent/include/libtorrent/block_cache.hpp	/^		std::int32_t m_read_cache_size;$/;"	m	struct:libtorrent::block_cache
m_read_handler	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::function<void(error_code const&, std::size_t)> m_read_handler;$/;"	m	struct:libtorrent::utp_stream
m_read_handler_storage	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::handler_storage<TORRENT_READ_HANDLER_MAX_SIZE> m_read_handler_storage;$/;"	m	class:libtorrent::peer_connection
m_read_jobs	libtorrent/include/libtorrent/disk_job_pool.hpp	/^		int m_read_jobs;$/;"	m	struct:libtorrent::disk_job_pool
m_read_pos	libtorrent/include/libtorrent/http_connection.hpp	/^	int m_read_pos;$/;"	m	struct:libtorrent::http_connection
m_read_time	libtorrent/include/libtorrent/tracker_manager.hpp	/^		time_point m_read_time;$/;"	m	struct:libtorrent::timeout_handler
m_read_timeout	libtorrent/include/libtorrent/tracker_manager.hpp	/^		int m_read_timeout = 0;$/;"	m	struct:libtorrent::timeout_handler
m_reading_bytes	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_reading_bytes = 0;$/;"	m	class:libtorrent::peer_connection
m_reads_cache_idx	include/session_view.hpp	/^	int const m_reads_cache_idx = lt::find_metric_idx("disk.read_cache_blocks");$/;"	m	struct:session_view
m_received_body	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		int m_received_body;$/;"	m	class:libtorrent::web_peer_connection
m_received_in_piece	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_received_in_piece = 0;$/;"	m	class:libtorrent::peer_connection
m_receiving_block	libtorrent/include/libtorrent/peer_connection.hpp	/^		piece_block m_receiving_block = piece_block::invalid;$/;"	m	class:libtorrent::peer_connection
m_recent_extents	libtorrent/include/libtorrent/piece_picker.hpp	/^		mutable std::vector<piece_extent_t> m_recent_extents;$/;"	m	class:libtorrent::piece_picker
m_recv_buffer	libtorrent/include/libtorrent/http_parser.hpp	/^		span<char const> m_recv_buffer;$/;"	m	class:libtorrent::http_parser
m_recv_buffer	libtorrent/include/libtorrent/peer_connection.hpp	/^		receive_buffer m_recv_buffer;$/;"	m	class:libtorrent::peer_connection
m_recv_buffer	libtorrent/include/libtorrent/receive_buffer.hpp	/^	buffer m_recv_buffer;$/;"	m	struct:libtorrent::receive_buffer
m_recv_end	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int m_recv_end = 0;$/;"	m	struct:libtorrent::receive_buffer
m_recv_idx	include/session_view.hpp	/^	int const m_recv_idx = lt::find_metric_idx("net.recv_bytes");$/;"	m	struct:session_view
m_recv_pos	libtorrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_recv_pos = 0;$/;"	m	class:libtorrent::http_parser
m_recv_pos	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int m_recv_pos = (std::numeric_limits<int>::max)();$/;"	m	struct:libtorrent::crypto_receive_buffer
m_recv_pos	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int m_recv_pos = 0;$/;"	m	struct:libtorrent::receive_buffer
m_recv_start	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int m_recv_start = 0;$/;"	m	struct:libtorrent::receive_buffer
m_recvbuffer	libtorrent/include/libtorrent/http_connection.hpp	/^	aux::vector<char> m_recvbuffer;$/;"	m	struct:libtorrent::http_connection
m_redirects	libtorrent/include/libtorrent/http_connection.hpp	/^	int m_redirects;$/;"	m	struct:libtorrent::http_connection
m_ref	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^		aux::block_cache_reference m_ref;$/;"	m	struct:libtorrent::disk_buffer_holder
m_refresh_timer	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		deadline_timer m_refresh_timer;$/;"	m	struct:libtorrent::dht::final
m_refresh_timer	libtorrent/include/libtorrent/natpmp.hpp	/^	deadline_timer m_refresh_timer;$/;"	m	struct:libtorrent::natpmp
m_refresh_timer	libtorrent/include/libtorrent/upnp.hpp	/^	deadline_timer m_refresh_timer;$/;"	m	struct:libtorrent::final
m_remote	libtorrent/include/libtorrent/natpmp.hpp	/^	udp::endpoint m_remote;$/;"	m	struct:libtorrent::natpmp
m_remote	libtorrent/include/libtorrent/peer_connection.hpp	/^		tcp::endpoint m_remote;$/;"	m	class:libtorrent::peer_connection
m_remote_endpoint	libtorrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type m_remote_endpoint;$/;"	m	class:libtorrent::proxy_base
m_req	libtorrent/include/libtorrent/tracker_manager.hpp	/^		const tracker_request m_req;$/;"	m	struct:libtorrent::tracker_connection
m_request_queue	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::vector<pending_block> m_request_queue;$/;"	m	class:libtorrent::peer_connection
m_request_time	libtorrent/include/libtorrent/peer_connection.hpp	/^		sliding_average<int, 20> m_request_time;$/;"	m	class:libtorrent::peer_connection
m_requested	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point m_requested = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_requester	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::weak_ptr<request_callback> m_requester;$/;"	m	struct:libtorrent::tracker_connection
m_requests	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<peer_request> m_requests;$/;"	m	class:libtorrent::peer_connection
m_requests	libtorrent/include/libtorrent/web_connection_base.hpp	/^		std::deque<peer_request> m_requests;$/;"	m	class:libtorrent::web_connection_base
m_resolve_flags	libtorrent/include/libtorrent/http_connection.hpp	/^	resolver_flags m_resolve_flags;$/;"	m	struct:libtorrent::http_connection
m_resolver	libtorrent/include/libtorrent/http_connection.hpp	/^	resolver_interface& m_resolver;$/;"	m	struct:libtorrent::http_connection
m_resolver	libtorrent/include/libtorrent/proxy_base.hpp	/^	tcp::resolver m_resolver;$/;"	m	class:libtorrent::proxy_base
m_resolver	libtorrent/include/libtorrent/resolver.hpp	/^	tcp::resolver m_resolver;$/;"	m	struct:libtorrent::final
m_resolver	libtorrent/include/libtorrent/upnp.hpp	/^	resolver m_resolver;$/;"	m	struct:libtorrent::final
m_response_buffer	libtorrent/include/libtorrent/natpmp.hpp	/^	char m_response_buffer[1100];$/;"	m	struct:libtorrent::natpmp
m_response_left	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		std::int64_t m_response_left;$/;"	m	class:libtorrent::http_seed_connection
m_responses	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int16_t m_responses = 0;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_restrict_mtu	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		std::array<int, 3> m_restrict_mtu;$/;"	m	struct:libtorrent::utp_socket_manager
m_results	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::vector<observer_ptr> m_results;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_retry_count	libtorrent/include/libtorrent/natpmp.hpp	/^	int m_retry_count = 0;$/;"	m	struct:libtorrent::natpmp
m_retry_count	libtorrent/include/libtorrent/upnp.hpp	/^	int m_retry_count = 0;$/;"	m	struct:libtorrent::final
m_root_cert	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::string m_root_cert;$/;"	m	struct:libtorrent::create_torrent
m_root_tokens	libtorrent/include/libtorrent/bdecode.hpp	/^	detail::bdecode_token const* m_root_tokens = nullptr;$/;"	m	class:bdecode_node::detail
m_round_robin	libtorrent/include/libtorrent/peer_list.hpp	/^		int m_round_robin = 0;$/;"	m	struct:libtorrent::peer_list
m_router_nodes	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	std::set<udp::endpoint> m_router_nodes;$/;"	m	class:libtorrent::dht::routing_table
m_rpc	libtorrent/include/libtorrent/kademlia/node.hpp	/^	rpc_manager m_rpc;$/;"	m	class:libtorrent::dht::node
m_running	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		bool m_running;$/;"	m	struct:libtorrent::dht::final
m_running_requests	libtorrent/include/libtorrent/kademlia/node.hpp	/^	std::set<traversal_algorithm*> m_running_requests;$/;"	m	class:libtorrent::dht::node
m_salt	libtorrent/include/libtorrent/kademlia/item.hpp	/^	std::string m_salt;$/;"	m	class:libtorrent::dht::item
m_sam_socket	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::shared_ptr<i2p_stream> m_sam_socket;$/;"	m	class:libtorrent::i2p_connection
m_save_path	libtorrent/include/libtorrent/storage.hpp	/^		std::string m_save_path;$/;"	m	class:libtorrent::default_storage
m_save_path	libtorrent/include/libtorrent/torrent.hpp	/^		std::string m_save_path;$/;"	m	class:libtorrent::torrent
m_save_resume_flags	libtorrent/include/libtorrent/torrent.hpp	/^		resume_data_flags_t m_save_resume_flags;$/;"	m	class:libtorrent::torrent
m_scroll_position	include/torrent_view.hpp	/^	int m_scroll_position;$/;"	m	struct:torrent_view
m_search_id	libtorrent/include/libtorrent/kademlia/node.hpp	/^	std::uint32_t m_search_id = 0;$/;"	m	class:libtorrent::dht::node
m_secret	libtorrent/include/libtorrent/kademlia/node.hpp	/^	std::uint32_t m_secret[2];$/;"	m	class:libtorrent::dht::node
m_seeds	libtorrent/include/libtorrent/piece_picker.hpp	/^		int m_seeds = 0;$/;"	m	class:libtorrent::piece_picker
m_send_barrier	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_send_barrier = INT_MAX;$/;"	m	class:libtorrent::peer_connection
m_send_barriers	libtorrent/include/libtorrent/pe_crypto.hpp	/^		std::list<barrier> m_send_barriers;$/;"	m	struct:libtorrent::encryption_handler
m_send_buf	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		std::vector<char> m_send_buf;$/;"	m	struct:libtorrent::dht::final
m_send_buffer	libtorrent/include/libtorrent/peer_connection.hpp	/^		chained_buffer m_send_buffer;$/;"	m	class:libtorrent::peer_connection
m_send_buffer_blocks	libtorrent/include/libtorrent/block_cache.hpp	/^		std::int32_t m_send_buffer_blocks;$/;"	m	struct:libtorrent::block_cache
m_send_fun	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		send_fun_t m_send_fun;$/;"	m	struct:libtorrent::dht::final
m_send_fun	libtorrent/include/libtorrent/tracker_manager.hpp	/^		send_fun_t m_send_fun;$/;"	m	class:libtorrent::final
m_send_fun	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		send_fun_t m_send_fun;$/;"	m	struct:libtorrent::utp_socket_manager
m_send_fun_hostname	libtorrent/include/libtorrent/tracker_manager.hpp	/^		send_fun_hostname_t m_send_fun_hostname;$/;"	m	class:libtorrent::final
m_send_quota	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		int m_send_quota;$/;"	m	struct:libtorrent::dht::final
m_send_timer	libtorrent/include/libtorrent/natpmp.hpp	/^	deadline_timer m_send_timer;$/;"	m	struct:libtorrent::natpmp
m_sendbuffer	libtorrent/include/libtorrent/http_connection.hpp	/^	std::string m_sendbuffer;$/;"	m	struct:libtorrent::http_connection
m_sent	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	time_point m_sent;$/;"	m	struct:libtorrent::dht::observer
m_sent_idx	include/session_view.hpp	/^	int const m_sent_idx = lt::find_metric_idx("net.sent_bytes");$/;"	m	struct:session_view
m_sequence_number	libtorrent/include/libtorrent/torrent.hpp	/^		queue_position_t m_sequence_number;$/;"	m	class:libtorrent::torrent
m_server_message	libtorrent/include/libtorrent/http_parser.hpp	/^		std::string m_server_message;$/;"	m	class:libtorrent::http_parser
m_server_string	libtorrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_server_string;$/;"	m	class:libtorrent::web_connection_base
m_ses	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			session_interface& m_ses;$/;"	m	struct:libtorrent::aux::tracker_logger
m_ses	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::session_interface& m_ses;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_ses	libtorrent/include/libtorrent/torrent.hpp	/^		aux::session_interface& m_ses;$/;"	m	struct:libtorrent::torrent_hot_members
m_ses	libtorrent/include/libtorrent/tracker_manager.hpp	/^		aux::session_logger& m_ses;$/;"	m	class:libtorrent::final
m_ses_extensions	libtorrent/include/libtorrent/alert_manager.hpp	/^		std::list<std::shared_ptr<plugin>> m_ses_extensions;$/;"	m	class:libtorrent::alert_manager
m_ses_extensions	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::array<std::vector<std::shared_ptr<plugin>>, 4> m_ses_extensions;$/;"	m	struct:libtorrent::aux::final
m_session_id	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_session_id;$/;"	m	class:libtorrent::i2p_connection
m_session_paused	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_session_paused:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_sett	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		aux::session_settings const& m_sett;$/;"	m	class:libtorrent::utp_socket_manager::aux
m_settings	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::session_settings m_settings;$/;"	m	struct:libtorrent::aux::final
m_settings	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		aux::session_settings const& m_settings;$/;"	m	class:libtorrent::final::aux
m_settings	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dht::settings const& m_settings;$/;"	m	class:libtorrent::dht::final::dht
m_settings	libtorrent/include/libtorrent/kademlia/node.hpp	/^	dht::settings const& m_settings;$/;"	m	class:libtorrent::dht::node::dht
m_settings	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	dht::settings const& m_settings;$/;"	m	class:libtorrent::dht::routing_table::dht
m_settings	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	dht_settings const& m_settings;$/;"	m	class:libtorrent::dht::rpc_manager
m_settings	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::session_settings const& m_settings;$/;"	m	class:libtorrent::peer_connection_hot_members::aux
m_settings	libtorrent/include/libtorrent/storage.hpp	/^		aux::session_settings const* m_settings = nullptr;$/;"	m	class:libtorrent::storage_interface::aux
m_settings	libtorrent/include/libtorrent/tracker_manager.hpp	/^		aux::session_settings const& m_settings;$/;"	m	class:libtorrent::final::aux
m_settings	libtorrent/include/libtorrent/upnp.hpp	/^	aux::session_settings const& m_settings;$/;"	m	class:libtorrent::final::aux
m_settings_set	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		bool m_settings_set;$/;"	m	struct:libtorrent::disk_buffer_pool
m_share_mode	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_share_mode:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_sig	libtorrent/include/libtorrent/kademlia/item.hpp	/^	signature m_sig;$/;"	m	class:libtorrent::dht::item
m_similar	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::vector<sha1_hash> m_similar;$/;"	m	struct:libtorrent::create_torrent
m_similar_torrents	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<char const*> m_similar_torrents;$/;"	m	class:libtorrent::torrent_info
m_size	libtorrent/include/libtorrent/bdecode.hpp	/^	mutable int m_size = -1;$/;"	m	struct:bdecode_node
m_size	libtorrent/include/libtorrent/buffer.hpp	/^	difference_type m_size = 0;$/;"	m	class:libtorrent::buffer
m_size	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^		std::size_t m_size;$/;"	m	struct:libtorrent::disk_buffer_holder
m_size	libtorrent/include/libtorrent/file_pool.hpp	/^		int m_size;$/;"	m	struct:libtorrent::file_pool
m_size	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		int m_size = 0;$/;"	m	struct:libtorrent::heterogeneous_queue
m_size	libtorrent/include/libtorrent/lazy_entry.hpp	/^		std::uint32_t m_size:29;$/;"	m	struct:libtorrent::lazy_entry
m_size	libtorrent/include/libtorrent/linked_list.hpp	/^		int m_size;$/;"	m	struct:libtorrent::linked_list
m_size	libtorrent/include/libtorrent/packet_buffer.hpp	/^		int m_size = 0;$/;"	m	class:libtorrent::packet_buffer
m_size	libtorrent/include/libtorrent/peer_class_set.hpp	/^		std::int8_t m_size;$/;"	m	struct:libtorrent::peer_class_set
m_size	libtorrent/include/libtorrent/tailqueue.hpp	/^		int m_size;$/;"	m	struct:libtorrent::tailqueue
m_snubbed	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_snubbed:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_sock	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		std::weak_ptr<listen_socket_t> m_sock;$/;"	m	struct:libtorrent::aux::listen_socket_handle
m_sock	libtorrent/include/libtorrent/http_connection.hpp	/^	aux::socket_type m_sock;$/;"	m	struct:libtorrent::http_connection
m_sock	libtorrent/include/libtorrent/kademlia/node.hpp	/^	aux::listen_socket_handle const m_sock;$/;"	m	class:libtorrent::dht::node::aux
m_sock	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	aux::listen_socket_handle m_sock;$/;"	m	class:libtorrent::dht::rpc_manager
m_sock	libtorrent/include/libtorrent/proxy_base.hpp	/^	tcp::socket m_sock;$/;"	m	class:libtorrent::proxy_base
m_sock	libtorrent/include/libtorrent/ssl_stream.hpp	/^	ssl::stream<Stream> m_sock;$/;"	m	class:libtorrent::ssl_stream
m_sock_man	libtorrent/include/libtorrent/kademlia/node.hpp	/^	socket_manager* m_sock_man;$/;"	m	class:libtorrent::dht::node
m_sock_man	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	socket_manager* m_sock_man;$/;"	m	class:libtorrent::dht::rpc_manager
m_sockaddr	libtorrent/include/libtorrent/netlink.hpp	/^			sockaddr_nl m_sockaddr;$/;"	m	class:libtorrent::basic_nl_endpoint
m_socket	libtorrent/include/libtorrent/lsd.hpp	/^	udp::socket m_socket;$/;"	m	struct:libtorrent::lsd
m_socket	libtorrent/include/libtorrent/natpmp.hpp	/^	udp::socket m_socket;$/;"	m	struct:libtorrent::natpmp
m_socket	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::shared_ptr<aux::socket_type> m_socket;$/;"	m	class:libtorrent::peer_connection
m_socket	libtorrent/include/libtorrent/udp_socket.hpp	/^		udp::socket m_socket;$/;"	m	class:libtorrent::udp_socket
m_socket_is_writing	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool m_socket_is_writing = false;$/;"	m	class:libtorrent::peer_connection
m_sockets	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		std::list<socket_entry> m_sockets;$/;"	m	class:libtorrent::broadcast_socket
m_socks5_connection	libtorrent/include/libtorrent/udp_socket.hpp	/^		std::shared_ptr<socks5> m_socks5_connection;$/;"	m	class:libtorrent::udp_socket
m_sorted_results	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int8_t m_sorted_results = 0;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_source_feed_url	libtorrent/include/libtorrent/torrent.hpp	/^		std::string m_source_feed_url;$/;"	m	class:libtorrent::torrent
m_ssl	libtorrent/include/libtorrent/http_connection.hpp	/^	bool m_ssl;$/;"	m	struct:libtorrent::http_connection
m_ssl	libtorrent/include/libtorrent/web_connection_base.hpp	/^		bool m_ssl;$/;"	m	class:libtorrent::web_connection_base
m_ssl_context	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		void* m_ssl_context;$/;"	m	struct:libtorrent::utp_socket_manager
m_ssl_ctx	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			ssl::context m_ssl_ctx;$/;"	m	struct:libtorrent::aux::final
m_ssl_ctx	libtorrent/include/libtorrent/http_connection.hpp	/^	ssl::context* m_ssl_ctx;$/;"	m	struct:libtorrent::http_connection
m_ssl_ctx	libtorrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<boost::asio::ssl::context> m_ssl_ctx;$/;"	m	class:libtorrent::torrent
m_ssl_ctx	libtorrent/include/libtorrent/upnp.hpp	/^	ssl::context m_ssl_ctx;$/;"	m	struct:libtorrent::final
m_ssl_utp_socket_manager	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			libtorrent::utp_socket_manager m_ssl_utp_socket_manager;$/;"	m	struct:libtorrent::aux::final
m_stalled_sockets	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		socket_vector_t m_stalled_sockets;$/;"	m	struct:libtorrent::utp_socket_manager
m_start_time	libtorrent/include/libtorrent/http_connection.hpp	/^	time_point m_start_time;$/;"	m	struct:libtorrent::http_connection
m_start_time	libtorrent/include/libtorrent/tracker_manager.hpp	/^		time_point m_start_time;$/;"	m	struct:libtorrent::timeout_handler
m_started	libtorrent/include/libtorrent/torrent.hpp	/^		time_point32 m_started = aux::time_now32();$/;"	m	class:libtorrent::torrent
m_started	libtorrent/include/libtorrent/udp_socket.hpp	/^		bool m_started;$/;"	m	class:libtorrent::udp_socket
m_stat	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			stat m_stat;$/;"	m	struct:libtorrent::aux::final
m_stat	libtorrent/include/libtorrent/stat.hpp	/^		stat_channel m_stat[num_channels];$/;"	m	class:libtorrent::stat
m_stat	libtorrent/include/libtorrent/torrent.hpp	/^		libtorrent::stat m_stat;$/;"	m	class:libtorrent::torrent
m_stat_cache	libtorrent/include/libtorrent/stat_cache.hpp	/^		aux::vector<stat_cache_t, file_index_t> m_stat_cache;$/;"	m	struct:libtorrent::stat_cache
m_stat_cache	libtorrent/include/libtorrent/storage.hpp	/^		mutable stat_cache m_stat_cache;$/;"	m	class:libtorrent::default_storage
m_state	libtorrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	m	class:libtorrent::http_parser	typeref:enum:libtorrent::http_parser::__anon55
m_state	libtorrent/include/libtorrent/i2p_stream.hpp	/^	state_t m_state;$/;"	m	class:libtorrent::i2p_connection
m_state	libtorrent/include/libtorrent/i2p_stream.hpp	/^	state_t m_state;$/;"	m	class:libtorrent::i2p_stream
m_state	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dht_state m_state; \/\/ to be used only once$/;"	m	struct:libtorrent::dht::final
m_state	libtorrent/include/libtorrent/torrent.hpp	/^		std::uint32_t m_state:3;$/;"	m	struct:libtorrent::torrent_hot_members
m_state	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		action_t m_state;$/;"	m	class:libtorrent::udp_tracker_connection
m_state_subscription	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_state_subscription:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_statistics	libtorrent/include/libtorrent/peer_connection.hpp	/^		stat m_statistics;$/;"	m	class:libtorrent::peer_connection
m_stats_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^		aux::array<std::atomic<std::int64_t>, num_counters> m_stats_counter;$/;"	m	struct:libtorrent::counters
m_stats_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^		aux::array<std::int64_t, num_counters> m_stats_counter;$/;"	m	struct:libtorrent::counters
m_stats_counters	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			counters m_stats_counters;$/;"	m	struct:libtorrent::aux::final
m_stats_counters	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		counters& m_stats_counters;$/;"	m	struct:libtorrent::final
m_stats_counters	libtorrent/include/libtorrent/torrent.hpp	/^		counters& m_stats_counters;$/;"	m	class:libtorrent::torrent
m_stats_counters	libtorrent/include/libtorrent/tracker_manager.hpp	/^		counters& m_stats_counters;$/;"	m	class:libtorrent::final
m_status_code	libtorrent/include/libtorrent/http_parser.hpp	/^		int m_status_code = -1;$/;"	m	class:libtorrent::http_parser
m_storage	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		std::unique_ptr<char, aux::free_deleter> m_storage;$/;"	m	struct:libtorrent::heterogeneous_queue
m_storage	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dht_storage_interface& m_storage;$/;"	m	struct:libtorrent::dht::final
m_storage	libtorrent/include/libtorrent/kademlia/node.hpp	/^	dht_storage_interface& m_storage;$/;"	m	class:libtorrent::dht::node
m_storage	libtorrent/include/libtorrent/packet_buffer.hpp	/^		aux::unique_ptr<packet_ptr[], index_type> m_storage;$/;"	m	class:libtorrent::packet_buffer
m_storage	libtorrent/include/libtorrent/packet_pool.hpp	/^		std::vector<packet_ptr> m_storage;$/;"	m	struct:libtorrent::packet_slab
m_storage	libtorrent/include/libtorrent/stack_allocator.hpp	/^		vector<char> m_storage;$/;"	m	struct:libtorrent::stack_allocator
m_storage	libtorrent/include/libtorrent/torrent.hpp	/^		storage_holder m_storage;$/;"	m	class:libtorrent::torrent
m_storage	libtorrent/include/libtorrent/utp_stream.hpp	/^		char m_storage[sizeof(T)];$/;"	m	struct:libtorrent::big_endian_int
m_storage_constructor	libtorrent/include/libtorrent/torrent.hpp	/^		storage_constructor_type m_storage_constructor;$/;"	m	class:libtorrent::torrent
m_store	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		session_settings_single_thread m_store;$/;"	m	struct:libtorrent::aux::session_settings
m_strings	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		std::array<std::string, settings_pack::num_string_settings> m_strings;$/;"	m	struct:libtorrent::aux::session_settings_single_thread
m_strings	libtorrent/include/libtorrent/settings_pack.hpp	/^		std::vector<std::pair<std::uint16_t, std::string>> m_strings;$/;"	m	namespace:libtorrent
m_suggest_pieces	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<piece_index_t> m_suggest_pieces;$/;"	m	class:libtorrent::peer_connection
m_suggest_pieces	libtorrent/include/libtorrent/torrent.hpp	/^		aux::suggest_piece m_suggest_pieces;$/;"	m	class:libtorrent::torrent
m_suggested_pieces	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<piece_index_t> m_suggested_pieces;$/;"	m	class:libtorrent::peer_connection
m_superseed_piece	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::array<piece_index_t, 2> m_superseed_piece = {{piece_index_t(-1), piece_index_t(-1)}};$/;"	m	class:libtorrent::peer_connection
m_swarm_last_seen_complete	libtorrent/include/libtorrent/torrent.hpp	/^		std::time_t m_swarm_last_seen_complete = 0;$/;"	m	class:libtorrent::torrent
m_symlinks	libtorrent/include/libtorrent/file_storage.hpp	/^		std::vector<std::string> m_symlinks;$/;"	m	class:libtorrent::file_storage
m_syn_slab	libtorrent/include/libtorrent/packet_pool.hpp	/^		packet_slab m_syn_slab;$/;"	m	struct:libtorrent::packet_pool
m_table	libtorrent/include/libtorrent/kademlia/node.hpp	/^	routing_table m_table;$/;"	m	class:libtorrent::dht::node
m_table	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	routing_table& m_table;$/;"	m	class:libtorrent::dht::rpc_manager
m_target	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	node_id const m_target;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_target	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		udp::endpoint m_target;$/;"	m	class:libtorrent::udp_tracker_connection
m_temp_sockets	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		socket_vector_t m_temp_sockets;$/;"	m	struct:libtorrent::utp_socket_manager
m_thread	libtorrent/include/libtorrent/session.hpp	/^		std::shared_ptr<std::thread> m_thread;$/;"	m	class:libtorrent::session
m_thread	libtorrent/include/libtorrent/session.hpp	/^		std::shared_ptr<std::thread> m_thread;$/;"	m	class:libtorrent::session_proxy
m_thread_iface	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		pool_thread_interface& m_thread_iface;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_threads	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::vector<std::thread> m_threads;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_threads_to_exit	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::atomic<int> m_threads_to_exit;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_tick_handler_storage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::handler_storage<TORRENT_READ_HANDLER_MAX_SIZE> m_tick_handler_storage;$/;"	m	struct:libtorrent::aux::final
m_time_critical_pieces	libtorrent/include/libtorrent/torrent.hpp	/^		std::vector<time_critical_piece> m_time_critical_pieces;$/;"	m	class:libtorrent::torrent
m_timeout	libtorrent/include/libtorrent/resolver.hpp	/^	time_duration m_timeout;$/;"	m	struct:libtorrent::final
m_timeout	libtorrent/include/libtorrent/tracker_manager.hpp	/^		deadline_timer m_timeout;$/;"	m	struct:libtorrent::timeout_handler
m_timeouts	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int16_t m_timeouts = 0;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_timer	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			deadline_timer m_timer;$/;"	m	struct:libtorrent::aux::final
m_timer	libtorrent/include/libtorrent/http_connection.hpp	/^	deadline_timer m_timer;$/;"	m	struct:libtorrent::http_connection
m_timestamp	include/session_view.hpp	/^	std::uint64_t m_timestamp[2];$/;"	m	struct:session_view
m_timestamp	libtorrent/include/libtorrent/alert.hpp	/^		time_point const m_timestamp;$/;"	m	class:libtorrent::alert
m_token	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	std::string m_token;$/;"	m	struct:libtorrent::dht::put_data_observer
m_token_idx	libtorrent/include/libtorrent/bdecode.hpp	/^	int m_token_idx = -1;$/;"	m	struct:bdecode_node
m_tokens	libtorrent/include/libtorrent/bdecode.hpp	/^	aux::noexcept_movable<std::vector<detail::bdecode_token>> m_tokens;$/;"	m	struct:bdecode_node
m_torrent	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::weak_ptr<torrent> m_torrent;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_torrent	libtorrent/include/libtorrent/storage.hpp	/^		std::shared_ptr<void> m_torrent;$/;"	m	struct:libtorrent::storage_interface
m_torrent	libtorrent/include/libtorrent/torrent_handle.hpp	/^		std::weak_ptr<torrent> m_torrent;$/;"	m	struct:libtorrent::torrent_handle
m_torrent_file	libtorrent/include/libtorrent/resolve_links.hpp	/^		std::shared_ptr<torrent_info> m_torrent_file;$/;"	m	struct:libtorrent::resolve_links
m_torrent_file	libtorrent/include/libtorrent/torrent.hpp	/^		std::shared_ptr<torrent_info> m_torrent_file;$/;"	m	struct:libtorrent::torrent_hot_members
m_torrent_filter	include/torrent_view.hpp	/^	int m_torrent_filter;$/;"	m	struct:torrent_view
m_torrent_lists	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				m_torrent_lists;$/;"	m	struct:libtorrent::aux::final
m_torrent_load_thread	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::unique_ptr<work_thread_t> m_torrent_load_thread;$/;"	m	struct:libtorrent::aux::final
m_torrents	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_map m_torrents;$/;"	m	struct:libtorrent::aux::final
m_torrents	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		aux::vector<std::shared_ptr<storage_interface>, storage_index_t> m_torrents;$/;"	m	struct:libtorrent::final
m_total_allocations	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		std::uint64_t m_total_allocations = 0;$/;"	m	struct:libtorrent::final
m_total_bytes	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		std::uint64_t m_total_bytes = 0;$/;"	m	struct:libtorrent::final
m_total_counter	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t m_total_counter;$/;"	m	class:libtorrent::stat_channel
m_total_downloaded	libtorrent/include/libtorrent/torrent.hpp	/^		std::int64_t m_total_downloaded = 0;$/;"	m	class:libtorrent::torrent
m_total_failed_bytes	libtorrent/include/libtorrent/torrent.hpp	/^		std::int32_t m_total_failed_bytes = 0;$/;"	m	class:libtorrent::torrent
m_total_redundant_bytes	libtorrent/include/libtorrent/torrent.hpp	/^		std::int64_t m_total_redundant_bytes = 0;$/;"	m	class:libtorrent::torrent
m_total_size	libtorrent/include/libtorrent/file_storage.hpp	/^		std::int64_t m_total_size;$/;"	m	class:libtorrent::file_storage
m_total_uploaded	libtorrent/include/libtorrent/torrent.hpp	/^		std::int64_t m_total_uploaded = 0;$/;"	m	class:libtorrent::torrent
m_total_votes	libtorrent/include/libtorrent/ip_voter.hpp	/^		int m_total_votes;$/;"	m	struct:libtorrent::ip_voter
m_tracker_connection	libtorrent/include/libtorrent/http_tracker_connection.hpp	/^		std::shared_ptr<http_connection> m_tracker_connection;$/;"	m	class:libtorrent::http_tracker_connection
m_tracker_ip	libtorrent/include/libtorrent/http_tracker_connection.hpp	/^		address m_tracker_ip;$/;"	m	class:libtorrent::http_tracker_connection
m_tracker_manager	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			tracker_manager m_tracker_manager;$/;"	m	struct:libtorrent::aux::final
m_tracker_timer	libtorrent/include/libtorrent/torrent.hpp	/^		deadline_timer m_tracker_timer;$/;"	m	class:libtorrent::torrent
m_trackerid	libtorrent/include/libtorrent/torrent.hpp	/^		std::string m_trackerid;$/;"	m	class:libtorrent::torrent
m_trackers	libtorrent/include/libtorrent/torrent.hpp	/^		aux::vector<announce_entry> m_trackers;$/;"	m	class:libtorrent::torrent
m_transaction_id	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::uint32_t m_transaction_id;$/;"	m	class:libtorrent::udp_tracker_connection
m_transactions	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	std::unordered_multimap<int, observer_ptr> m_transactions;$/;"	m	class:libtorrent::dht::rpc_manager
m_trigger_cache_trim	libtorrent/include/libtorrent/disk_buffer_pool.hpp	/^		std::function<void()> m_trigger_cache_trim;$/;"	m	struct:libtorrent::disk_buffer_pool
m_type	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		int m_type;$/;"	m	struct:libtorrent::aux::socket_type
m_type	libtorrent/include/libtorrent/lazy_entry.hpp	/^		std::uint32_t m_type:3;$/;"	m	struct:libtorrent::lazy_entry
m_udp_conns	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::unordered_map<std::uint32_t, std::shared_ptr<udp_tracker_connection>> m_udp_conns;$/;"	m	class:libtorrent::final
m_unchoke_slots_idx	include/session_view.hpp	/^	int const m_unchoke_slots_idx = lt::find_metric_idx("ses.num_unchoke_slots");$/;"	m	struct:session_view
m_unchoke_time_scaler	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_unchoke_time_scaler = 0;$/;"	m	struct:libtorrent::aux::final
m_unchoked_idx	include/session_view.hpp	/^	int const m_unchoked_idx = lt::find_metric_idx("peer.num_peers_up_unchoked");$/;"	m	struct:session_view
m_undead_peers	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<std::shared_ptr<peer_connection>> m_undead_peers;$/;"	m	struct:libtorrent::aux::final
m_unicast_socket	libtorrent/include/libtorrent/upnp.hpp	/^	udp::socket m_unicast_socket;$/;"	m	struct:libtorrent::final
m_unicast_sockets	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		std::list<socket_entry> m_unicast_sockets;$/;"	m	class:libtorrent::broadcast_socket
m_upload_mode	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_upload_mode:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_upload_mode_time	libtorrent/include/libtorrent/torrent.hpp	/^		time_point32 m_upload_mode_time = aux::time_now32();$/;"	m	class:libtorrent::torrent
m_upload_rate	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bandwidth_manager m_upload_rate;$/;"	m	struct:libtorrent::aux::final
m_upload_rate_peak	libtorrent/include/libtorrent/peer_connection.hpp	/^		int m_upload_rate_peak = 0;$/;"	m	class:libtorrent::peer_connection
m_uploaded_at_last_round	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t m_uploaded_at_last_round = 0;$/;"	m	class:libtorrent::peer_connection
m_uploaded_at_last_unchoke	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t m_uploaded_at_last_unchoke = 0;$/;"	m	class:libtorrent::peer_connection
m_uploaded_last_second	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::int32_t m_uploaded_last_second = 0;$/;"	m	class:libtorrent::peer_connection
m_url	libtorrent/include/libtorrent/http_connection.hpp	/^	std::string m_url;$/;"	m	struct:libtorrent::http_connection
m_url	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		const std::string m_url;$/;"	m	class:libtorrent::http_seed_connection
m_url	libtorrent/include/libtorrent/torrent.hpp	/^		std::string m_url;$/;"	m	class:libtorrent::torrent
m_url	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		std::string m_url;$/;"	m	class:libtorrent::web_peer_connection
m_url_idx	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_url_idx;$/;"	m	struct:libtorrent::final
m_url_idx	libtorrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_url_idx;$/;"	m	struct:libtorrent::tracker_alert
m_url_seeds	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::string> m_url_seeds;$/;"	m	struct:libtorrent::create_torrent
m_urls	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::pair<std::string, int>> m_urls;$/;"	m	struct:libtorrent::create_torrent
m_urls	libtorrent/include/libtorrent/torrent_info.hpp	/^		aux::vector<announce_entry> m_urls;$/;"	m	class:libtorrent::torrent_info
m_use_partfile	libtorrent/include/libtorrent/storage.hpp	/^		aux::vector<bool, file_index_t> m_use_partfile;$/;"	m	class:libtorrent::default_storage
m_user	libtorrent/include/libtorrent/http_stream.hpp	/^	std::string m_user;$/;"	m	class:libtorrent::http_stream
m_user	libtorrent/include/libtorrent/socks5_stream.hpp	/^	std::string m_user;$/;"	m	class:libtorrent::socks5_stream
m_user_agent	libtorrent/include/libtorrent/http_connection.hpp	/^	std::string m_user_agent;$/;"	m	struct:libtorrent::http_connection
m_user_load_torrent	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			user_load_function_t m_user_load_torrent;$/;"	m	struct:libtorrent::aux::final
m_username	libtorrent/include/libtorrent/torrent.hpp	/^		std::string m_username;$/;"	m	class:libtorrent::torrent
m_utp_close_wait	include/session_view.hpp	/^	int const m_utp_close_wait = lt::find_metric_idx("utp.num_utp_close_wait");$/;"	m	struct:session_view
m_utp_connected	include/session_view.hpp	/^	int const m_utp_connected = lt::find_metric_idx("utp.num_utp_connected");$/;"	m	struct:session_view
m_utp_fin_sent	include/session_view.hpp	/^	int const m_utp_fin_sent = lt::find_metric_idx("utp.num_utp_fin_sent");$/;"	m	struct:session_view
m_utp_idle	include/session_view.hpp	/^	int const m_utp_idle = lt::find_metric_idx("utp.num_utp_idle");$/;"	m	struct:session_view
m_utp_socket_manager	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			libtorrent::utp_socket_manager m_utp_socket_manager;$/;"	m	struct:libtorrent::aux::final
m_utp_syn_sent	include/session_view.hpp	/^	int const m_utp_syn_sent = lt::find_metric_idx("utp.num_utp_syn_sent");$/;"	m	struct:session_view
m_uuid	libtorrent/include/libtorrent/torrent.hpp	/^		std::string m_uuid;$/;"	m	class:libtorrent::torrent
m_uuids	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::map<std::string, std::shared_ptr<torrent>> m_uuids;$/;"	m	struct:libtorrent::aux::final
m_val	libtorrent/include/libtorrent/flags.hpp	/^	UnderlyingType m_val;$/;"	m	namespace:libtorrent::flags
m_val	libtorrent/include/libtorrent/units.hpp	/^		UnderlyingType m_val;$/;"	m	struct:libtorrent::aux::strong_typedef
m_valid_external	libtorrent/include/libtorrent/ip_voter.hpp	/^		bool m_valid_external;$/;"	m	struct:libtorrent::ip_voter
m_value	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^		char const* m_value;$/;"	m	struct:libtorrent::aux::bind_to_device
m_value	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		int m_value;$/;"	m	struct:libtorrent::aux::tcp_keepalive_idle
m_value	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		int m_value;$/;"	m	struct:libtorrent::aux::tcp_keepalive_interval
m_value	libtorrent/include/libtorrent/kademlia/item.hpp	/^	entry m_value;$/;"	m	class:libtorrent::dht::item
m_value	libtorrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::dont_fragment
m_value	libtorrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::exclusive_address_use
m_value	libtorrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::no_enobufs
m_value	libtorrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::tcp_notsent_lowat
m_value	libtorrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::traffic_class
m_value	libtorrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::v6_protection_level
m_value	libtorrent/include/libtorrent/socket.hpp	/^		tos_t m_value;$/;"	m	struct:libtorrent::type_of_service
m_verified	libtorrent/include/libtorrent/torrent.hpp	/^		typed_bitfield<piece_index_t> m_verified;$/;"	m	class:libtorrent::torrent
m_verifying	libtorrent/include/libtorrent/torrent.hpp	/^		typed_bitfield<piece_index_t> m_verifying;$/;"	m	class:libtorrent::torrent
m_version	libtorrent/include/libtorrent/natpmp.hpp	/^	protocol_version m_version = version_pcp;$/;"	m	struct:libtorrent::natpmp
m_version	libtorrent/include/libtorrent/socks5_stream.hpp	/^	int m_version;$/;"	m	class:libtorrent::socks5_stream
m_volatile_size	libtorrent/include/libtorrent/block_cache.hpp	/^		std::int32_t m_volatile_size;$/;"	m	struct:libtorrent::block_cache
m_waiting_tracker	libtorrent/include/libtorrent/torrent.hpp	/^		std::int8_t m_waiting_tracker = 0;$/;"	m	class:libtorrent::torrent
m_was_abandoned	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	bool m_was_abandoned = false;$/;"	m	struct:libtorrent::dht::observer
m_was_sent	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	bool m_was_sent = false;$/;"	m	struct:libtorrent::dht::observer
m_was_started	libtorrent/include/libtorrent/torrent.hpp	/^		bool m_was_started = false;$/;"	m	class:libtorrent::torrent
m_wasted_bytes_idx	include/session_view.hpp	/^	int const m_wasted_bytes_idx = lt::find_metric_idx("net.recv_redundant_bytes");$/;"	m	struct:session_view
m_watermark	libtorrent/include/libtorrent/receive_buffer.hpp	/^	sliding_average<std::ptrdiff_t, 20> m_watermark;$/;"	m	struct:libtorrent::receive_buffer
m_web	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		web_seed_t* m_web;$/;"	m	class:libtorrent::http_seed_connection
m_web	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		web_seed_t* m_web;$/;"	m	class:libtorrent::web_peer_connection
m_web_seeds	libtorrent/include/libtorrent/torrent.hpp	/^		std::list<web_seed_t> m_web_seeds;$/;"	m	class:libtorrent::torrent
m_web_seeds	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<web_seed_entry> m_web_seeds;$/;"	m	class:libtorrent::torrent_info
m_width	include/session_view.hpp	/^	int m_width;$/;"	m	struct:session_view
m_width	include/torrent_view.hpp	/^	int m_width;$/;"	m	struct:torrent_view
m_work	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::unique_ptr<io_service::work> m_work;$/;"	m	struct:libtorrent::aux::final
m_work	libtorrent/include/libtorrent/peer_connection.hpp	/^		io_service::work m_work;$/;"	m	class:libtorrent::peer_connection
m_write_cache_size	libtorrent/include/libtorrent/block_cache.hpp	/^		std::int32_t m_write_cache_size;$/;"	m	struct:libtorrent::block_cache
m_write_handler	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::function<void(error_code const&, std::size_t)> m_write_handler;$/;"	m	struct:libtorrent::utp_stream
m_write_handler_storage	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::handler_storage<TORRENT_WRITE_HANDLER_MAX_SIZE> m_write_handler_storage;$/;"	m	class:libtorrent::peer_connection
m_write_jobs	libtorrent/include/libtorrent/disk_job_pool.hpp	/^		int m_write_jobs;$/;"	m	struct:libtorrent::disk_job_pool
m_write_ops_idx	include/session_view.hpp	/^	int const m_write_ops_idx = lt::find_metric_idx("disk.num_write_ops");$/;"	m	struct:session_view
m_write_tokens	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^	std::map<node_id, std::string> m_write_tokens;$/;"	m	struct:libtorrent::dht::find_data
m_writes_cache_idx	include/session_view.hpp	/^	int const m_writes_cache_idx = lt::find_metric_idx("disk.write_cache_blocks");$/;"	m	struct:session_view
m_xor_mask	libtorrent/include/libtorrent/pe_crypto.hpp	/^		sha1_hash m_xor_mask;$/;"	m	class:libtorrent::dh_key_exchange
macrotest_	libowfat/isset.h	32;"	d
macrotest_	libowfat/libowfat/isset.h	32;"	d
macrotest_1	libowfat/isset.h	31;"	d
macrotest_1	libowfat/libowfat/isset.h	31;"	d
magic	libtorrent/include/libtorrent/upnp.hpp	/^		int magic = 1337;$/;"	m	struct:libtorrent::final::rootdevice
main	libowfat/ent.c	/^int main() {$/;"	f
main	libowfat/examples/buffer_getline.c	/^int main() {$/;"	f
main	libowfat/examples/byte.c	/^main()$/;"	f
main	libowfat/examples/str.c	/^main()$/;"	f
main	libowfat/fmt/fmt_8long.c	/^int main() {$/;"	f
main	libowfat/fmt/fmt_8longlong.c	/^int main() {$/;"	f
main	libowfat/fmt/fmt_asn1derlength.c	/^int main() {$/;"	f
main	libowfat/fmt/fmt_asn1dertag.c	/^int main() {$/;"	f
main	libowfat/fmt/fmt_escapecharc.c	/^int main() {$/;"	f
main	libowfat/fmt/fmt_escapecharjson.c	/^int main() {$/;"	f
main	libowfat/fmt/fmt_escapecharquotedprintable.c	/^int main() {$/;"	f
main	libowfat/fmt/fmt_ulong.c	/^int main() {$/;"	f
main	libowfat/fmt/fmt_xlong.c	/^int main() {$/;"	f
main	libowfat/mult/imult16.c	/^int main() {$/;"	f
main	libowfat/mult/imult32.c	/^int main() {$/;"	f
main	libowfat/mult/imult64.c	/^int main() {$/;"	f
main	libowfat/mult/umult16.c	/^int main() {$/;"	f
main	libowfat/mult/umult32.c	/^int main() {$/;"	f
main	libowfat/mult/umult64.c	/^int main() {$/;"	f
main	libowfat/scan/scan_8int.c	/^int main() {$/;"	f
main	libowfat/scan/scan_8long.c	/^int main() {$/;"	f
main	libowfat/scan/scan_8longlong.c	/^int main() {$/;"	f
main	libowfat/scan/scan_8longn.c	/^int main() {$/;"	f
main	libowfat/scan/scan_8short.c	/^int main() {$/;"	f
main	libowfat/scan/scan_asn1derlength.c	/^int main() {$/;"	f
main	libowfat/scan/scan_asn1dertag.c	/^int main() {$/;"	f
main	libowfat/scan/scan_charsetnskip.c	/^int main() {$/;"	f
main	libowfat/scan/scan_fromhex.c	/^int main() {$/;"	f
main	libowfat/scan/scan_int.c	/^int main() {$/;"	f
main	libowfat/scan/scan_long.c	/^int main() {$/;"	f
main	libowfat/scan/scan_longlong.c	/^int main() {$/;"	f
main	libowfat/scan/scan_netstring.c	/^int main() {$/;"	f
main	libowfat/scan/scan_ulonglong.c	/^int main() {$/;"	f
main	libowfat/scan/scan_ulongn.c	/^int main() {$/;"	f
main	libowfat/scan/scan_ushort.c	/^int main() {$/;"	f
main	libowfat/scan/scan_utf8.c	/^int main() {$/;"	f
main	libowfat/scan/scan_utf8_sem.c	/^int main() {$/;"	f
main	libowfat/scan/scan_varint.c	/^int main() {$/;"	f
main	libowfat/scan/scan_whitenskip.c	/^int main() {$/;"	f
main	libowfat/scan/scan_xint.c	/^int main() {$/;"	f
main	libowfat/scan/scan_xlongn.c	/^int main() {$/;"	f
main	libowfat/scan/scan_xshort.c	/^int main() {$/;"	f
main	libowfat/t.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/array.c	/^int main() {$/;"	f
main	libowfat/test/b64decode.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/b64encode.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/buffer_1.c	/^int main() {$/;"	f
main	libowfat/test/buffer_fromsa.c	/^int main() {$/;"	f
main	libowfat/test/buffer_mmap.c	/^int main() {$/;"	f
main	libowfat/test/buffer_tosa.c	/^int main() {$/;"	f
main	libowfat/test/byte_copy.c	/^int main() {$/;"	f
main	libowfat/test/cas.c	/^int main() {$/;"	f
main	libowfat/test/cdbget2.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/cescape.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/client.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/dllink.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/dnsip.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/fdpassing.c	/^int main() {$/;"	f
main	libowfat/test/fmt.c	/^int main() {$/;"	f
main	libowfat/test/fmt_httpdate.c	/^int main() {$/;"	f
main	libowfat/test/fmt_human.c	/^int main() {$/;"	f
main	libowfat/test/fmt_ip6.c	/^int main() {$/;"	f
main	libowfat/test/fmt_iso8691.c	/^int main() {$/;"	f
main	libowfat/test/fmt_long.c	/^int main() {$/;"	f
main	libowfat/test/fmt_longlong.c	/^int main() {$/;"	f
main	libowfat/test/fmt_strm_alloca.c	/^int main() {$/;"	f
main	libowfat/test/httpd.c	/^int main() {$/;"	f
main	libowfat/test/io.c	/^int main()$/;"	f
main	libowfat/test/io2.c	/^int main()$/;"	f
main	libowfat/test/io3.c	/^int main() {$/;"	f
main	libowfat/test/io4.c	/^int main() {$/;"	f
main	libowfat/test/io5.c	/^int main() {$/;"	f
main	libowfat/test/iob.c	/^int main() {$/;"	f
main	libowfat/test/iom.c	/^int main() {$/;"	f
main	libowfat/test/json.c	/^int main() {$/;"	f
main	libowfat/test/marshal.c	/^int main() {$/;"	f
main	libowfat/test/mult.c	/^int main() {$/;"	f
main	libowfat/test/netstring.c	/^int main() {$/;"	f
main	libowfat/test/protobuf.c	/^int main() {$/;"	f
main	libowfat/test/proxy.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/range.c	/^int main() {$/;"	f
main	libowfat/test/readhttp.c	/^int main() {$/;"	f
main	libowfat/test/scan.c	/^int main() {$/;"	f
main	libowfat/test/scan_long.c	/^int main() {$/;"	f
main	libowfat/test/server.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/stralloc_buffer.c	/^int main() {$/;"	f
main	libowfat/test/stralloc_chomp.c	/^int main() {$/;"	f
main	libowfat/test/textcode.c	/^int main() {$/;"	f
main	libowfat/test/uint.c	/^int main() {$/;"	f
main	libowfat/test/unurl.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/urlencode.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/utf8.c	/^int main() {$/;"	f
main	libowfat/test/uudecode.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/test/vd.c	/^int main(int argc,char* argv[]) {$/;"	f
main	libowfat/textcode/fmt_jsonescape.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_base64.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_base64url.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_cescape.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_hexdump.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_html.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_jsonescape.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_ldapescape.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_urlencoded.c	/^int main() {$/;"	f
main	libowfat/textcode/scan_uuencoded.c	/^int main() {$/;"	f
main	libowfat/tryalloca.c	/^int main() {$/;"	f
main	libowfat/trybsdsf.c	/^int main() {$/;"	f
main	libowfat/trydevpoll.c	/^main() {$/;"	f
main	libowfat/tryepoll.c	/^int main() {$/;"	f
main	libowfat/tryip6.c	/^int main() {$/;"	f
main	libowfat/trykqueue.c	/^int main() {$/;"	f
main	libowfat/tryn2i.c	/^int main() {$/;"	f
main	libowfat/trypoll.c	/^int main()$/;"	f
main	libowfat/trypread.c	/^int main() {$/;"	f
main	libowfat/tryscope.c	/^int main() {$/;"	f
main	libowfat/trysendfile.c	/^int main() {$/;"	f
main	libowfat/trysigio.c	/^int main() {$/;"	f
main	libowfat/trysl.c	/^int main() {$/;"	f
main	libowfat/trysocket.c	/^int main() {$/;"	f
main	src/main.c	/^int main(int argc, char *argv[])$/;"	f
main	src/proxy.c	/^int main( int argc, char **argv ) {$/;"	f
main	src/test.c	/^int main(int argc, char *argv[])$/;"	f
mainobj	Makefile	/^mainobj = main.o log.o tools.o socket.o cJSON.o opentracker.o trackerlogic.o scan_urlencoded_query.o ot_mutex.o ot_stats.o ot_vector.o ot_clean.o ot_udp.o ot_iovec.o ot_fullscrape.o ot_accesslist.o ot_http.o ot_livesync.o ot_rijndael.o$/;"	m
major_version	libtorrent/include/libtorrent/fingerprint.hpp	/^		int major_version;$/;"	m	struct:libtorrent::fingerprint
make_absolute_path	src/client_test.cpp	/^std::string make_absolute_path(std::string const& p)$/;"	f
make_absolute_path	src/test.cpp	/^std::string make_absolute_path(std::string const &p)$/;"	f
make_absolute_path	src/torrent.cpp	/^std::string make_absolute_path(std::string const &p)$/;"	f
make_handler	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^	make_handler(Handler handler$/;"	f	namespace:libtorrent::aux
make_invariant_checker	libtorrent/include/libtorrent/invariant_check.hpp	/^	invariant_checker_impl<T> make_invariant_checker(T const& x)$/;"	f	namespace:libtorrent
make_reverse	libtorrent/include/libtorrent/piece_picker.hpp	/^			void make_reverse()$/;"	f	struct:libtorrent::piece_picker::piece_pos
make_tcp	libtorrent/include/libtorrent/socket.hpp	/^	inline tcp::endpoint make_tcp(udp::endpoint const ep)$/;"	f	namespace:libtorrent
make_torrent	src/bt.cpp	/^int make_torrent(char *file_path, char *torrent_path, char *track)$/;"	f
make_udp	libtorrent/include/libtorrent/socket.hpp	/^	inline udp::endpoint make_udp(tcp::endpoint const ep)$/;"	f	namespace:libtorrent
malloc_fn	include/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
map	libowfat/cdb.h	/^  char *map; \/* 0 if no map is available *\/$/;"	m	struct:cdb
map	libowfat/libowfat/cdb.h	/^  char *map; \/* 0 if no map is available *\/$/;"	m	struct:cdb
map_block	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<file_slice> map_block(piece_index_t const piece$/;"	f	class:libtorrent::torrent_info
map_file	libtorrent/include/libtorrent/torrent_info.hpp	/^		peer_request map_file(file_index_t const file, std::int64_t offset, int size) const$/;"	f	class:libtorrent::torrent_info
map_sent	libtorrent/include/libtorrent/natpmp.hpp	/^		bool map_sent = false;$/;"	m	struct:libtorrent::natpmp::mapping_t
maplen	libowfat/io_internal.h	/^  long maplen;$/;"	m	struct:__anon40
mapofs	libowfat/io_internal.h	/^  uint64 mapofs;$/;"	m	struct:__anon40
mapped_files	libtorrent/include/libtorrent/storage_defs.hpp	/^		file_storage const* mapped_files = nullptr; \/\/ optional$/;"	m	struct:libtorrent::storage_params
mapping	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		port_mapping_t mapping = port_mapping_t{-1};$/;"	m	struct:libtorrent::aux::listen_port_mapping
mapping	libtorrent/include/libtorrent/upnp.hpp	/^		aux::vector<mapping_t, port_mapping_t> mapping;$/;"	m	struct:libtorrent::final::rootdevice
mapping_t	libtorrent/include/libtorrent/natpmp.hpp	/^	struct mapping_t : aux::base_mapping$/;"	s	struct:libtorrent::natpmp
mapping_t	libtorrent/include/libtorrent/upnp.hpp	/^	struct mapping_t : aux::base_mapping$/;"	s	struct:libtorrent::final
mappings	libtorrent/include/libtorrent/upnp.hpp	/^		aux::vector<global_mapping_t, port_mapping_t> mappings;$/;"	m	struct:libtorrent::final::upnp_state_t
marked_for_deletion	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t marked_for_deletion:1;$/;"	m	struct:libtorrent::cached_piece_entry
marked_for_eviction	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t marked_for_eviction:1;$/;"	m	struct:libtorrent::cached_piece_entry
marshal	libowfat/ent.c	/^void marshal(struct letters* s) {$/;"	f
marshaled	libowfat/ent.c	/^  uint32_t marshaled;	\/\/ lower 8 bits: char. rest: ofs from start of marshaled blob$/;"	m	struct:letter	file:
marshaled	libowfat/ent.c	/^uint32_t* marshaled;$/;"	v
marshalhelper	libowfat/ent.c	/^void marshalhelper(struct letters* s) {$/;"	f
match	libowfat/cdb/cdb.c	/^static int match(struct cdb *c,const unsigned char *key,unsigned long int len,uint32 pos) {$/;"	f	file:
max	libtorrent/include/libtorrent/aux_/aligned_union.hpp	/^constexpr std::size_t max(std::size_t a)$/;"	f	namespace:libtorrent::aux
max	libtorrent/include/libtorrent/aux_/aligned_union.hpp	/^constexpr std::size_t max(std::size_t a, std::size_t b)$/;"	f	namespace:libtorrent::aux
max	libtorrent/include/libtorrent/aux_/aligned_union.hpp	/^constexpr std::size_t max(std::size_t a, std::size_t b, Vals... v)$/;"	f	namespace:libtorrent::aux
max	libtorrent/include/libtorrent/units.hpp	/^		static constexpr type (max)()$/;"	f	class:std::numeric_limits
max_addr	libtorrent/include/libtorrent/ip_filter.hpp	/^	Addr max_addr()$/;"	f	namespace:libtorrent::detail
max_addr	libtorrent/include/libtorrent/ip_filter.hpp	/^	inline std::uint16_t max_addr<std::uint16_t>()$/;"	f	namespace:libtorrent::detail
max_allowed_in_request_queue	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_allowed_in_request_queue,$/;"	e	enum:libtorrent::settings_pack::int_types
max_bandwidth_channels	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	static constexpr int max_bandwidth_channels = 10;$/;"	m	struct:libtorrent::bw_request
max_blocks_per_piece	libtorrent/include/libtorrent/piece_picker.hpp	/^			max_blocks_per_piece = (1 << 15) - 1$/;"	e	enum:libtorrent::piece_picker::__anon56
max_bool_setting_internal	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_bool_setting_internal$/;"	e	enum:libtorrent::settings_pack::bool_types
max_buffer_size	libtorrent/include/libtorrent/torrent_info.hpp	/^		int max_buffer_size = 6000000;$/;"	m	struct:libtorrent::load_torrent_limits
max_concurrent_http_announces	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_concurrent_http_announces,$/;"	e	enum:libtorrent::settings_pack::int_types
max_connections	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int max_connections = -1;$/;"	m	struct:libtorrent::add_torrent_params
max_connections	libtorrent/include/libtorrent/torrent.hpp	/^		int max_connections() const { return int(m_max_connections); }$/;"	f	class:libtorrent::torrent
max_connections	src/main.c	/^int max_connections = 1024;$/;"	v
max_connections	src/test.c	/^int max_connections = 1024;$/;"	v
max_connections_per_torrent	src/client_test.cpp	/^int max_connections_per_torrent = 50;$/;"	v
max_decode_depth	libtorrent/include/libtorrent/torrent_info.hpp	/^		int max_decode_depth = 100;$/;"	m	struct:libtorrent::load_torrent_limits
max_decode_tokens	libtorrent/include/libtorrent/torrent_info.hpp	/^		int max_decode_tokens = 2000000;$/;"	m	struct:libtorrent::load_torrent_limits
max_dht_items	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_dht_items = 700;$/;"	m	struct:libtorrent::dht::dht_settings
max_fail_count	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_fail_count = 20;$/;"	m	struct:libtorrent::dht::dht_settings
max_failcount	libtorrent/include/libtorrent/peer_list.hpp	/^		int max_failcount = 3;$/;"	m	struct:libtorrent::torrent_state
max_failcount	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_failcount,$/;"	e	enum:libtorrent::settings_pack::int_types
max_header	libtorrent/include/libtorrent/bdecode.hpp	/^		max_header = (1 << 3) - 1$/;"	e	enum:libtorrent::detail::limits_t
max_http_recv_buffer_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_http_recv_buffer_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_infohashes_sample_count	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_infohashes_sample_count = 20;$/;"	m	struct:libtorrent::dht::dht_settings
max_int_setting_internal	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_int_setting_internal$/;"	e	enum:libtorrent::settings_pack::int_types
max_metadata_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_metadata_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_next_item	libtorrent/include/libtorrent/bdecode.hpp	/^		max_next_item = (1 << 29) - 1,$/;"	e	enum:libtorrent::detail::limits_t
max_offset	libtorrent/include/libtorrent/bdecode.hpp	/^		max_offset = (1 << 29) - 1,$/;"	e	enum:libtorrent::detail::limits_t
max_out_request_queue	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_out_request_queue,$/;"	e	enum:libtorrent::settings_pack::int_types
max_paused_peerlist_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_paused_peerlist_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_peer_count	libtorrent/include/libtorrent/piece_picker.hpp	/^			static constexpr std::uint32_t max_peer_count = 0xffff;$/;"	m	struct:libtorrent::piece_picker::piece_pos
max_peer_recv_buffer_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_peer_recv_buffer_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_peerlist_size	libtorrent/include/libtorrent/peer_list.hpp	/^		int max_peerlist_size = 1000;$/;"	m	struct:libtorrent::torrent_state
max_peerlist_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_peerlist_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_peers	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_peers = 500;$/;"	m	struct:libtorrent::dht::dht_settings
max_peers_reply	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_peers_reply = 100;$/;"	m	struct:libtorrent::dht::dht_settings
max_pex_peers	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_pex_peers,$/;"	e	enum:libtorrent::settings_pack::int_types
max_piece_requests	libtorrent/include/libtorrent/performance_counters.hpp	/^			max_piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
max_pieces	libtorrent/include/libtorrent/piece_picker.hpp	/^		enum { max_pieces = (std::numeric_limits<int>::max)() - 1 };$/;"	e	enum:libtorrent::piece_picker::__anon58
max_pieces	libtorrent/include/libtorrent/torrent_info.hpp	/^		int max_pieces = 0x100000;$/;"	m	struct:libtorrent::load_torrent_limits
max_queued_disk_bytes	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_queued_disk_bytes,$/;"	e	enum:libtorrent::settings_pack::int_types
max_refcount	libtorrent/include/libtorrent/block_cache.hpp	/^		static constexpr int max_refcount = (1 << 29) - 1;$/;"	m	struct:libtorrent::cached_block_entry
max_rejects	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_rejects,$/;"	e	enum:libtorrent::settings_pack::int_types
max_retry_port_bind	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_retry_port_bind,$/;"	e	enum:libtorrent::settings_pack::int_types
max_size	include/client.h	/^    int max_size;$/;"	m	struct:client
max_string_setting_internal	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_string_setting_internal$/;"	e	enum:libtorrent::settings_pack::string_types
max_suggest_pieces	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_suggest_pieces,$/;"	e	enum:libtorrent::settings_pack::int_types
max_threads	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		int max_threads() const { return m_max_threads; }$/;"	f	struct:libtorrent::disk_io_thread_pool
max_time	libtorrent/include/libtorrent/time.hpp	/^	inline time_point max_time() { return (time_point::max)(); }$/;"	f	namespace:libtorrent
max_torrent_search_reply	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_torrent_search_reply = 20;$/;"	m	struct:libtorrent::dht::dht_settings
max_torrents	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_torrents = 2000;$/;"	m	struct:libtorrent::dht::dht_settings
max_uploads	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int max_uploads = -1;$/;"	m	struct:libtorrent::add_torrent_params
max_uploads	libtorrent/include/libtorrent/torrent.hpp	/^		int max_uploads() const { return int(m_max_uploads); }$/;"	f	class:libtorrent::torrent
max_web_seed_connections	libtorrent/include/libtorrent/settings_pack.hpp	/^			max_web_seed_connections,$/;"	e	enum:libtorrent::settings_pack::int_types
maxint	libowfat/scan/scan_int.c	/^static const unsigned int maxint = ((unsigned int)-1)>>1;$/;"	v	file:
maxlong	libowfat/scan/scan_longlong.c	/^static const unsigned long maxlong = ((unsigned long)-1)>>1;$/;"	v	file:
maxlong	libowfat/scan/scan_longn.c	/^static const unsigned long maxlong = ((unsigned long)-1)>>1;$/;"	v	file:
maxshort	libowfat/scan/scan_short.c	/^static const unsigned short maxshort = ((unsigned short)-1)>>1;$/;"	v	file:
mb	libowfat/CAS.h	126;"	d
mb	libowfat/CAS.h	138;"	d
mb	libowfat/CAS.h	149;"	d
mean	libtorrent/include/libtorrent/sliding_average.hpp	/^	Int mean() const { return m_num_samples > 0 ? (m_mean + 32) \/ 64 : 0; }$/;"	f	struct:libtorrent::sliding_average
medium	libtorrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	e	enum:libtorrent::partial_piece_info::state_t
memtoll	src/tools.c	/^long long memtoll(const char *p, int *err)$/;"	f
merge_resume_http_seeds	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER merge_resume_http_seeds = 18_bit;$/;"	m	namespace:libtorrent::torrent_flags
merge_resume_trackers	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER merge_resume_trackers = 16_bit;$/;"	m	namespace:libtorrent::torrent_flags
merge_sync	sync_daemon.pl	/^sub merge_sync {$/;"	s
merkle	libtorrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t merkle = 1_bit;$/;"	m	struct:libtorrent::create_torrent
merkle_tree	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<sha1_hash>> merkle_tree;$/;"	m	struct:libtorrent::add_torrent_params
merkle_tree	libtorrent/include/libtorrent/create_torrent.hpp	/^		std::vector<sha1_hash> const& merkle_tree() const { return m_merkle_tree; }$/;"	f	class:libtorrent::create_torrent::std
merkle_tree	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<sha1_hash> const& merkle_tree() const { return m_merkle_tree; }$/;"	f	class:libtorrent::torrent_info::std
message	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::string message;$/;"	m	struct:libtorrent::announce_endpoint
message	libtorrent/include/libtorrent/http_parser.hpp	/^		std::string const& message() const { return m_server_message; }$/;"	f	class:libtorrent::http_parser::std
message	libtorrent/include/libtorrent/kademlia/msg.hpp	/^	bdecode_node const& message;$/;"	m	struct:libtorrent::dht::msg
message_direction_t	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^		enum message_direction_t$/;"	g	struct:libtorrent::dht::dht_logger
message_too_big	libtorrent/include/libtorrent/close_reason.hpp	/^		message_too_big,$/;"	m	class:libtorrent::close_reason_t
message_type	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		enum message_type$/;"	g	class:libtorrent::bt_peer_connection
metadata	libtorrent/include/libtorrent/torrent_info.hpp	/^		boost::shared_array<char> metadata() const$/;"	f	class:libtorrent::torrent_info
metadata_size	libtorrent/include/libtorrent/torrent_info.hpp	/^		int metadata_size() const { return m_info_section_size; }$/;"	f	class:libtorrent::torrent_info
metadata_too_big	libtorrent/include/libtorrent/close_reason.hpp	/^		metadata_too_big,$/;"	m	class:libtorrent::close_reason_t
metadata_too_large	libtorrent/include/libtorrent/error_code.hpp	/^			metadata_too_large,$/;"	e	enum:libtorrent::errors::error_code_enum
method	libtorrent/include/libtorrent/http_parser.hpp	/^		std::string const& method() const { return m_method; }$/;"	f	class:libtorrent::http_parser::std
metric_type_t	libtorrent/include/libtorrent/session_stats.hpp	/^	enum class metric_type_t$/;"	c	namespace:libtorrent
mh	libowfat/io_internal.h	/^  HANDLE \/* fd, *\/ mh;$/;"	m	struct:__anon40
mimeentry	libowfat/test/httpd.c	/^static struct mimeentry { const char* name, *type; } mimetab[] = {$/;"	s	file:
mimetab	libowfat/test/httpd.c	/^static struct mimeentry { const char* name, *type; } mimetab[] = {$/;"	v	typeref:struct:mimeentry	file:
mimetype	libowfat/test/httpd.c	/^const char* mimetype(const char* filename) {$/;"	f
min	libtorrent/include/libtorrent/units.hpp	/^		static constexpr type (min)()$/;"	f	class:std::numeric_limits
min_announce	libtorrent/include/libtorrent/announce_entry.hpp	/^		time_point32 min_announce = (time_point32::min)();$/;"	m	struct:libtorrent::announce_endpoint
min_announce_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			min_announce_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
min_interval	libtorrent/include/libtorrent/tracker_manager.hpp	/^		seconds32 min_interval;$/;"	m	struct:libtorrent::tracker_response
min_memory_usage	libtorrent/include/libtorrent/session.hpp	/^	inline void min_memory_usage(settings_pack& set)$/;"	f	namespace:libtorrent
min_reconnect_time	libtorrent/include/libtorrent/peer_list.hpp	/^		int min_reconnect_time = 60;$/;"	m	struct:libtorrent::torrent_state
min_reconnect_time	libtorrent/include/libtorrent/settings_pack.hpp	/^			min_reconnect_time,$/;"	e	enum:libtorrent::settings_pack::int_types
min_time	libtorrent/include/libtorrent/time.hpp	/^	inline time_point min_time() { return (time_point::min)(); }$/;"	f	namespace:libtorrent
min_timeout	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int min_timeout() const { return m_sett.get_int(settings_pack::utp_min_timeout); }$/;"	f	struct:libtorrent::utp_socket_manager
minor_version	libtorrent/include/libtorrent/fingerprint.hpp	/^		int minor_version;$/;"	m	struct:libtorrent::fingerprint
minus_one	libtorrent/include/libtorrent/ip_filter.hpp	/^	Addr minus_one(Addr const& a)$/;"	f	namespace:libtorrent::detail
minus_one	libtorrent/include/libtorrent/ip_filter.hpp	/^	inline std::uint16_t minus_one(std::uint16_t val) { return val - 1; }$/;"	f	namespace:libtorrent::detail
mismatching_file_size	libtorrent/include/libtorrent/error_code.hpp	/^			mismatching_file_size,$/;"	e	enum:libtorrent::errors::error_code_enum
mismatching_file_timestamp	libtorrent/include/libtorrent/error_code.hpp	/^			mismatching_file_timestamp,$/;"	e	enum:libtorrent::errors::error_code_enum
mismatching_info_hash	libtorrent/include/libtorrent/error_code.hpp	/^			mismatching_info_hash,$/;"	e	enum:libtorrent::errors::error_code_enum
mismatching_number_of_files	libtorrent/include/libtorrent/error_code.hpp	/^			mismatching_number_of_files,$/;"	e	enum:libtorrent::errors::error_code_enum
missed_connection_attempts	libtorrent/include/libtorrent/performance_counters.hpp	/^			missed_connection_attempts,$/;"	e	enum:libtorrent::counters::stats_counter_t
missing_file_sizes	libtorrent/include/libtorrent/error_code.hpp	/^			missing_file_sizes = 130,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_info_hash	libtorrent/include/libtorrent/error_code.hpp	/^			missing_info_hash,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_info_hash_in_uri	libtorrent/include/libtorrent/error_code.hpp	/^			missing_info_hash_in_uri,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_location	libtorrent/include/libtorrent/error_code.hpp	/^			missing_location,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_pieces	libtorrent/include/libtorrent/error_code.hpp	/^			missing_pieces,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_slots	libtorrent/include/libtorrent/error_code.hpp	/^			missing_slots,$/;"	e	enum:libtorrent::errors::error_code_enum
mixed_mode_algorithm	libtorrent/include/libtorrent/settings_pack.hpp	/^			mixed_mode_algorithm,$/;"	e	enum:libtorrent::settings_pack::int_types
mkdir	libtorrent/include/libtorrent/operations.hpp	/^		mkdir,$/;"	m	class:libtorrent::operation_t
mmap_cache	libtorrent/include/libtorrent/settings_pack.hpp	/^			mmap_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::string_types
mmap_private	libowfat/mmap/mmap_private.c	/^char* mmap_private(const char* filename,size_t * filesize) {$/;"	f
mmap_read	libowfat/mmap/mmap_read.c	/^extern const char* mmap_read(const char* filename,size_t * filesize) {$/;"	f
mmap_readat	libowfat/mmap/mmap_readat.c	/^extern const char* mmap_readat(const char* filename,size_t * filesize,int dirfd) {$/;"	f
mmap_shared	libowfat/mmap/mmap_shared.c	/^extern char* mmap_shared(const char* filename,size_t * filesize) {$/;"	f
mmap_unmap	libowfat/mmap/mmap_unmap.c	/^int mmap_unmap(const char* mapped,size_t maplen) {$/;"	f
mmapped	libowfat/io_internal.h	/^  void* mmapped;$/;"	m	struct:__anon40
mode	libtorrent/include/libtorrent/aux_/path.hpp	/^		int mode = 0;$/;"	m	struct:libtorrent::file_status
model	libtorrent/include/libtorrent/upnp.hpp	/^	std::string model;$/;"	m	struct:libtorrent::parse_state
modes_t	libtorrent/include/libtorrent/aux_/path.hpp	/^		} modes_t;$/;"	m	struct:libtorrent::file_status	typeref:enum:libtorrent::file_status::__anon61
modification_time	libtorrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t modification_time = 2_bit;$/;"	m	struct:libtorrent::create_torrent
module_t	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^		enum module_t$/;"	g	struct:libtorrent::dht::dht_logger
monitor_dir	src/client_test.cpp	/^std::string monitor_dir;$/;"	v
month_tab	src/tools.c	/^const char month_tab[48] =$/;"	v
move	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^			void (*move)(char* dst, char* src);$/;"	m	struct:libtorrent::heterogeneous_queue::header_t
move_flags	libtorrent/include/libtorrent/disk_io_job.hpp	/^		move_flags_t move_flags = move_flags_t::always_replace_files;$/;"	m	struct:libtorrent::disk_io_job
move_flags_t	libtorrent/include/libtorrent/storage_defs.hpp	/^	enum class move_flags_t : std::uint8_t$/;"	c	namespace:libtorrent
move_holder	libtorrent/include/libtorrent/chained_buffer.hpp	/^			move_construct_holder_fun move_holder;$/;"	m	struct:libtorrent::chained_buffer
move_storage	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, move_storage$/;"	m	class:libtorrent::job_action_t
moved_permanently	libtorrent/include/libtorrent/error_code.hpp	/^			moved_permanently = 301,$/;"	e	enum:libtorrent::errors::http_errors
moved_temporarily	libtorrent/include/libtorrent/error_code.hpp	/^			moved_temporarily = 302,$/;"	e	enum:libtorrent::errors::http_errors
moving_storage	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool moving_storage = false;$/;"	m	struct:libtorrent::torrent_status
msg	libowfat/errmsg.h	31;"	d
msg	libowfat/libowfat/errmsg.h	31;"	d
msg	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER msg;$/;"	m	struct:libtorrent::final
msg	libtorrent/include/libtorrent/kademlia/msg.hpp	/^	msg(bdecode_node const& m, udp::endpoint const& ep): message(m), addr(ep) {}$/;"	f	struct:libtorrent::dht::msg
msg	libtorrent/include/libtorrent/kademlia/msg.hpp	/^struct msg$/;"	s	namespace:libtorrent::dht
msg_allowed_fast	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_allowed_fast,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_bitfield	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_bitfield,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_cancel	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_cancel,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_choke	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_choke = 0,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_dht_port	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_dht_port,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_extended	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_extended = 20,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_have	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_have,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_have_all	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_have_all,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_have_none	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_have_none,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_interested	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_interested,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_not_interested	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_not_interested,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_piece	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_piece,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_reject_request	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_reject_request,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_request	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_request,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_suggest_piece	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_suggest_piece = 0xd,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_unchoke	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_unchoke,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msgsys	libowfat/errmsg.h	32;"	d
msgsys	libowfat/libowfat/errmsg.h	32;"	d
mstime	src/tools.c	/^long long mstime(void)$/;"	f
mtime	libtorrent/include/libtorrent/aux_/path.hpp	/^		std::uint64_t mtime = 0;$/;"	m	struct:libtorrent::file_status
mtime	libtorrent/include/libtorrent/file_storage.hpp	/^		std::time_t mtime;$/;"	m	struct:libtorrent::file_entry
mtu	libtorrent/include/libtorrent/enum_net.hpp	/^		int mtu = 0;$/;"	m	struct:libtorrent::ip_route
mtu_ceiling_size	libtorrent/include/libtorrent/packet_pool.hpp	/^		static constexpr int mtu_ceiling_size = TORRENT_ETHERNET_MTU - TORRENT_IPV4_HEADER - TORRENT_UDP_HEADER;$/;"	m	struct:libtorrent::packet_pool
mtu_floor_size	libtorrent/include/libtorrent/packet_pool.hpp	/^		static constexpr int mtu_floor_size = TORRENT_INET_MIN_MTU - TORRENT_IPV4_HEADER - TORRENT_UDP_HEADER;$/;"	m	struct:libtorrent::packet_pool
mtu_probe	libtorrent/include/libtorrent/packet_pool.hpp	/^		bool mtu_probe:1;$/;"	m	struct:libtorrent::packet
mtx	libowfat/io.h	/^  mtx_t mtx;$/;"	m	struct:iomux
mtx	libowfat/libowfat/io.h	/^  mtx_t mtx;$/;"	m	struct:iomux
multiple_choices	libtorrent/include/libtorrent/error_code.hpp	/^			multiple_choices = 300,$/;"	e	enum:libtorrent::errors::http_errors
multiprecision	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^   namespace multiprecision {$/;"	n	namespace:boost
mut	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable std::mutex mut;$/;"	m	struct:libtorrent::aux::final
mutable_buffer	libtorrent/include/libtorrent/receive_buffer.hpp	/^	span<char> mutable_buffer() { return m_connection_buffer.mutable_buffer(); }$/;"	f	struct:libtorrent::crypto_receive_buffer
mutable_data	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^		std::int32_t mutable_data = 0;$/;"	m	struct:libtorrent::dht::dht_storage_counters
mutable_torrent_support	libtorrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t mutable_torrent_support = 4_bit;$/;"	m	struct:libtorrent::create_torrent
mutex_bucket_lock	src/ot_mutex.c	/^ot_vector *mutex_bucket_lock( int bucket ) {$/;"	f
mutex_bucket_lock_by_hash	src/ot_mutex.c	/^ot_vector *mutex_bucket_lock_by_hash( ot_hash hash ) {$/;"	f
mutex_bucket_unlock	src/ot_mutex.c	/^void mutex_bucket_unlock( int bucket, int delta_torrentcount ) {$/;"	f
mutex_bucket_unlock_by_hash	src/ot_mutex.c	/^void mutex_bucket_unlock_by_hash( ot_hash hash, int delta_torrentcount ) {$/;"	f
mutex_deinit	src/ot_mutex.c	/^void mutex_deinit( ) {$/;"	f
mutex_get_torrent_count	src/ot_mutex.c	/^size_t mutex_get_torrent_count( ) {$/;"	f
mutex_init	src/ot_mutex.c	/^void mutex_init( ) {$/;"	f
mutex_workqueue_canceltask	src/ot_mutex.c	/^void mutex_workqueue_canceltask( int64 sock ) {$/;"	f
mutex_workqueue_popresult	src/ot_mutex.c	/^int64 mutex_workqueue_popresult( int *iovec_entries, struct iovec ** iovec ) {$/;"	f
mutex_workqueue_poptask	src/ot_mutex.c	/^ot_taskid mutex_workqueue_poptask( ot_tasktype *tasktype ) {$/;"	f
mutex_workqueue_pushresult	src/ot_mutex.c	/^int mutex_workqueue_pushresult( ot_taskid taskid, int iovec_entries, struct iovec *iovec ) {$/;"	f
mutex_workqueue_pushsuccess	src/ot_mutex.c	/^void mutex_workqueue_pushsuccess( ot_taskid taskid ) {$/;"	f
mutex_workqueue_pushtask	src/ot_mutex.c	/^int mutex_workqueue_pushtask( int64 sock, ot_tasktype tasktype ) {$/;"	f
my_extern	libowfat/io/io_fd.c	3;"	d	file:
my_extern	libowfat/io/io_fd.c	5;"	d	file:
my_extern	libowfat/io_internal.h	2;"	d
n	libowfat/buffer.h	/^  size_t n;		\/* current size of string in buffer *\/$/;"	m	struct:buffer
n	libowfat/ent.c	/^  size_t n;$/;"	m	struct:letters	file:
n	libowfat/ent.c	/^size_t n,m;$/;"	v
n	libowfat/iob_internal.h	/^  uint64 offset,n;$/;"	m	struct:iob_entry
n	libowfat/libowfat/buffer.h	/^  size_t n;		\/* current size of string in buffer *\/$/;"	m	struct:buffer
name	libowfat/test/httpd.c	/^static struct mimeentry { const char* name, *type; } mimetab[] = {$/;"	m	struct:mimeentry	file:
name	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::string name;$/;"	m	struct:libtorrent::add_torrent_params
name	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER name;$/;"	m	struct:libtorrent::final
name	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER name;$/;"	m	struct:libtorrent::torrent_alert
name	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^		int name(Protocol const&) const { return SO_BINDTODEVICE; }$/;"	f	struct:libtorrent::aux::bind_to_device
name	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		int name(Protocol const&) const { return TCP_KEEPIDLE; }$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
name	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		int name(Protocol const&) const { return TCP_KEEPINTVL; }$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
name	libtorrent/include/libtorrent/file_storage.hpp	/^		char const* name;$/;"	m	struct:libtorrent::internal_file_entry
name	libtorrent/include/libtorrent/file_storage.hpp	/^		std::string const& name() const { return m_name; }$/;"	f	class:libtorrent::file_storage::std
name	libtorrent/include/libtorrent/fingerprint.hpp	/^		char name[2];$/;"	m	struct:libtorrent::fingerprint
name	libtorrent/include/libtorrent/kademlia/msg.hpp	/^	char const* name;$/;"	m	struct:libtorrent::dht::key_desc_t
name	libtorrent/include/libtorrent/lazy_entry.hpp	/^		char const* name = nullptr;$/;"	m	struct:libtorrent::lazy_dict_entry
name	libtorrent/include/libtorrent/session_stats.hpp	/^		char const* name;$/;"	m	struct:libtorrent::stats_metric
name	libtorrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return IPV6_PROTECTION_LEVEL; }$/;"	f	struct:libtorrent::v6_protection_level
name	libtorrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return IPV6_TCLASS; }$/;"	f	struct:libtorrent::traffic_class
name	libtorrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return IP_MTU_DISCOVER; }$/;"	f	struct:libtorrent::dont_fragment
name	libtorrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return IP_TOS; }$/;"	f	struct:libtorrent::type_of_service
name	libtorrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return NETLINK_NO_ENOBUFS; }$/;"	f	struct:libtorrent::no_enobufs
name	libtorrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return SO_EXCLUSIVEADDRUSE; }$/;"	f	struct:libtorrent::exclusive_address_use
name	libtorrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return TCP_NOTSENT_LOWAT; }$/;"	f	struct:libtorrent::tcp_notsent_lowat
name	libtorrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const$/;"	f	struct:libtorrent::dont_fragment
name	libtorrent/include/libtorrent/torrent_info.hpp	/^		const std::string& name() const { return m_files.name(); }$/;"	f	class:libtorrent::torrent_info
name	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::string name;$/;"	m	struct:libtorrent::torrent_status
name_is_owned	libtorrent/include/libtorrent/file_storage.hpp	/^			name_is_owned = (1 << 12) - 1,$/;"	e	enum:libtorrent::internal_file_entry::__anon54
name_len	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t name_len:12;$/;"	m	struct:libtorrent::internal_file_entry
name_lookup	libtorrent/include/libtorrent/i2p_stream.hpp	/^	std::string name_lookup() const { return m_name_lookup; }$/;"	f	class:libtorrent::i2p_stream
nano	libowfat/libowfat/taia.h	/^  uint32 nano; \/* 0...999999999 *\/$/;"	m	struct:taia
nano	libowfat/taia.h	/^  uint32 nano; \/* 0...999999999 *\/$/;"	m	struct:taia
native_address	libtorrent/include/libtorrent/kademlia/node.hpp	/^	bool native_address(address const& addr) const$/;"	f	class:libtorrent::dht::node
native_address	libtorrent/include/libtorrent/kademlia/node.hpp	/^	bool native_address(tcp::endpoint const& ep) const$/;"	f	class:libtorrent::dht::node
native_address	libtorrent/include/libtorrent/kademlia/node.hpp	/^	bool native_address(udp::endpoint const& ep) const$/;"	f	class:libtorrent::dht::node
native_address	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	bool native_address(address const& addr) const$/;"	f	class:libtorrent::dht::routing_table
native_endpoint	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	bool native_endpoint(udp::endpoint const& ep) const$/;"	f	class:libtorrent::dht::routing_table
native_handle	libtorrent/include/libtorrent/file.hpp	/^		handle_type native_handle() const { return m_file_handle; }$/;"	f	struct:libtorrent::file
native_handle	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^	std::shared_ptr<peer_connection> native_handle() const$/;"	f	struct:libtorrent::peer_connection_handle
native_handle	libtorrent/include/libtorrent/session_handle.hpp	/^		std::shared_ptr<aux::session_impl> native_handle() const$/;"	f	struct:libtorrent::session_handle
native_handle	libtorrent/include/libtorrent/ssl_stream.hpp	/^	SSL* native_handle() { return m_sock.native_handle(); }$/;"	f	class:libtorrent::ssl_stream
natpmp	libtorrent/include/libtorrent/natpmp.hpp	/^struct TORRENT_EXTRA_EXPORT natpmp$/;"	s	namespace:libtorrent
natpmp	libtorrent/include/libtorrent/portmap.hpp	/^		natpmp, upnp$/;"	m	class:libtorrent::portmap_transport
natpmp_mapper	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<natpmp> natpmp_mapper;$/;"	m	struct:libtorrent::aux::listen_socket_t
natpmp_not_authorized	libtorrent/include/libtorrent/error_code.hpp	/^			natpmp_not_authorized TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
ndelay_off	libowfat/unix/ndelay_off.c	/^int ndelay_off(int fd) {$/;"	f
ndelay_on	libowfat/unix/ndelay_on.c	/^int ndelay_on(int fd) {$/;"	f
need_bucket_split	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^		need_bucket_split$/;"	e	enum:libtorrent::dht::routing_table::add_node_status_t
need_full_check	libtorrent/include/libtorrent/storage_defs.hpp	/^		need_full_check,$/;"	m	class:libtorrent::status_t
need_queueing	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^	bool need_queueing(int amount)$/;"	f	struct:libtorrent::bandwidth_channel
need_readback	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t need_readback:1;$/;"	m	struct:libtorrent::cached_piece_entry
need_readback	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		bool need_readback;$/;"	m	struct:libtorrent::cached_piece_info
need_resend	libtorrent/include/libtorrent/packet_pool.hpp	/^		bool need_resend:1;$/;"	m	struct:libtorrent::packet
need_save_resume	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t need_save_resume = 13_bit;$/;"	m	namespace:libtorrent::torrent_flags
need_save_resume	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool need_save_resume = false;$/;"	m	struct:libtorrent::torrent_status
need_save_resume_data	libtorrent/include/libtorrent/torrent.hpp	/^		bool need_save_resume_data() const { return m_need_save_resume_data; }$/;"	f	class:libtorrent::torrent
netlink	libtorrent/include/libtorrent/netlink.hpp	/^		explicit netlink(int nl_family)$/;"	f	class:libtorrent::netlink
netlink	libtorrent/include/libtorrent/netlink.hpp	/^		netlink() : netlink(NETLINK_ROUTE) {}$/;"	f	class:libtorrent::netlink
netlink	libtorrent/include/libtorrent/netlink.hpp	/^	class netlink$/;"	c	namespace:libtorrent
netmask	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			address netmask;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
netmask	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		address netmask;$/;"	m	struct:libtorrent::aux::listen_socket_t
netmask	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			address_v4 netmask;$/;"	m	struct:libtorrent::broadcast_socket::socket_entry
netmask	libtorrent/include/libtorrent/enum_net.hpp	/^		address netmask;$/;"	m	struct:libtorrent::ip_interface
netmask	libtorrent/include/libtorrent/enum_net.hpp	/^		address netmask;$/;"	m	struct:libtorrent::ip_route
network_failure	libtorrent/include/libtorrent/error_code.hpp	/^			network_failure TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
network_ip	src/tools.c	/^char network_ip[10][128] = {0};$/;"	v
network_threads	libtorrent/include/libtorrent/settings_pack.hpp	/^			network_threads TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
network_to_host	libtorrent/include/libtorrent/aux_/byteswap.hpp	/^inline std::uint16_t network_to_host(std::uint16_t x)$/;"	f	namespace:libtorrent::aux
network_to_host	libtorrent/include/libtorrent/aux_/byteswap.hpp	/^inline std::uint32_t network_to_host(std::uint32_t x)$/;"	f	namespace:libtorrent::aux
networks	src/ot_accesslist.c	/^  ot_vector  networks;$/;"	m	struct:__anon1	file:
new_connection	libtorrent/include/libtorrent/extensions.hpp	/^		virtual std::shared_ptr<peer_plugin> new_connection(peer_connection_handle const&)$/;"	f	struct:libtorrent::torrent_plugin
new_page	libowfat/array/iarray_allocate.c	/^static iarray_page* new_page(size_t pagesize) {$/;"	f	file:
new_torrent	libtorrent/include/libtorrent/extensions.hpp	/^		virtual std::shared_ptr<torrent_plugin> new_torrent(torrent_handle const&, void*)$/;"	f	struct:libtorrent::plugin
next	include/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
next	include/ot_accesslist.h	/^  ot_log  *next;$/;"	m	struct:ot_log
next	libowfat/cdb_make.h	/^  struct cdb_hplist *next;$/;"	m	struct:cdb_hplist	typeref:struct:cdb_hplist::cdb_hplist
next	libowfat/ent.c	/^  struct entity* next;$/;"	m	struct:entity	typeref:struct:entity::entity	file:
next	libowfat/iarray.h	/^  struct _iarray_page* next;$/;"	m	struct:_iarray_page	typeref:struct:_iarray_page::_iarray_page
next	libowfat/iob.h	/^  long next,bufs,files;$/;"	m	struct:io_batch
next	libowfat/libowfat/cdb_make.h	/^  struct cdb_hplist *next;$/;"	m	struct:cdb_hplist	typeref:struct:cdb_hplist::cdb_hplist
next	libowfat/libowfat/iarray.h	/^  struct _iarray_page* next;$/;"	m	struct:_iarray_page	typeref:struct:_iarray_page::_iarray_page
next	libowfat/libowfat/iob.h	/^  long next,bufs,files;$/;"	m	struct:io_batch
next	libtorrent/include/libtorrent/linked_list.hpp	/^		T* next;$/;"	m	struct:libtorrent::list_node
next	libtorrent/include/libtorrent/linked_list.hpp	/^		void next() { m_current = m_current->next; }$/;"	f	struct:libtorrent::list_iterator
next	libtorrent/include/libtorrent/pe_crypto.hpp	/^			int next;$/;"	m	struct:libtorrent::encryption_handler::barrier
next	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* next;$/;"	m	struct:libtorrent::tailqueue_node
next	libtorrent/include/libtorrent/tailqueue.hpp	/^		void next() { m_current = m_current->next; }$/;"	f	struct:libtorrent::tailqueue_iterator
next	libtorrent/include/libtorrent/units.hpp	/^	strong_typedef<T, Tag> next(strong_typedef<T, Tag> v)$/;"	f	namespace:libtorrent::aux
next	src/ot_mutex.c	/^  struct ot_task *next;$/;"	m	struct:ot_task	typeref:struct:ot_task::ot_task	file:
next_accept	libowfat/io_internal.h	/^  SOCKET next_accept;$/;"	m	struct:__anon40
next_announce	libtorrent/include/libtorrent/announce_entry.hpp	/^		time_point32 next_announce = (time_point32::min)();$/;"	m	struct:libtorrent::announce_endpoint
next_announce	libtorrent/include/libtorrent/torrent_status.hpp	/^		time_duration next_announce = seconds(0);$/;"	m	struct:libtorrent::torrent_status
next_defer	libowfat/io_internal.h	/^  long next_defer;$/;"	m	struct:__anon40
next_free_taskid	src/ot_mutex.c	/^static ot_taskid next_free_taskid = 1;$/;"	v	file:
next_layer	libtorrent/include/libtorrent/proxy_base.hpp	/^	next_layer_type& next_layer()$/;"	f	class:libtorrent::proxy_base
next_layer	libtorrent/include/libtorrent/ssl_stream.hpp	/^	next_layer_type& next_layer()$/;"	f	class:libtorrent::ssl_stream
next_read	libowfat/io_internal.h	/^  long next_read;$/;"	m	struct:__anon40
next_to_hash	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int next_to_hash;$/;"	m	struct:libtorrent::cached_piece_info
next_write	libowfat/io_internal.h	/^  long next_write;$/;"	m	struct:__anon40
nexttcp	libowfat/dns/dns_transmit.c	/^static int nexttcp(struct dns_transmit *d)$/;"	f	file:
nextudp	libowfat/dns/dns_transmit.c	/^static int nextudp(struct dns_transmit *d)$/;"	f	file:
nid	libtorrent/include/libtorrent/kademlia/node.hpp	/^	node_id const& nid() const { return m_id; }$/;"	f	class:libtorrent::dht::node
nids	libtorrent/include/libtorrent/kademlia/dht_state.hpp	/^		node_ids_t nids;$/;"	m	struct:libtorrent::dht::dht_state
no_access_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			no_access_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
no_atime	libtorrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t no_atime = 3_bit;$/;"	m	namespace:libtorrent::file_open_mode
no_atime	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t no_atime = 3_bit;$/;"	m	namespace:libtorrent::open_mode
no_atime_storage	libtorrent/include/libtorrent/settings_pack.hpp	/^			no_atime_storage,$/;"	e	enum:libtorrent::settings_pack::bool_types
no_cache	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t no_cache = 5_bit;$/;"	m	namespace:libtorrent::open_mode
no_connect_privileged_ports	libtorrent/include/libtorrent/settings_pack.hpp	/^			no_connect_privileged_ports,$/;"	e	enum:libtorrent::settings_pack::bool_types
no_content	libtorrent/include/libtorrent/error_code.hpp	/^			no_content = 204,$/;"	e	enum:libtorrent::errors::http_errors
no_content_length	libtorrent/include/libtorrent/error_code.hpp	/^			no_content_length,$/;"	e	enum:libtorrent::errors::error_code_enum
no_download	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool no_download() const { return m_no_download; }$/;"	f	class:libtorrent::peer_connection
no_download	libtorrent/include/libtorrent/peer_connection.hpp	/^		void no_download(bool b) { m_no_download = b; }$/;"	f	class:libtorrent::peer_connection
no_enobufs	libtorrent/include/libtorrent/socket.hpp	/^		explicit no_enobufs(bool val) : m_value(val) {}$/;"	f	struct:libtorrent::no_enobufs
no_enobufs	libtorrent/include/libtorrent/socket.hpp	/^	struct no_enobufs$/;"	s	namespace:libtorrent
no_entropy	libtorrent/include/libtorrent/error_code.hpp	/^			no_entropy = 200,$/;"	e	enum:libtorrent::errors::error_code_enum
no_error	libtorrent/include/libtorrent/bdecode.hpp	/^		no_error = 0,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
no_error	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			no_error = 0,$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
no_error	libtorrent/include/libtorrent/error_code.hpp	/^			no_error = 0,$/;"	e	enum:libtorrent::errors::error_code_enum
no_error	libtorrent/include/libtorrent/gzip.hpp	/^			no_error = 0,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
no_error	libtorrent/include/libtorrent/i2p_stream.hpp	/^			no_error = 0,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
no_error	libtorrent/include/libtorrent/socks5_stream.hpp	/^		no_error = 0,$/;"	e	enum:libtorrent::socks_error::socks_error_code
no_error	libtorrent/include/libtorrent/storage_defs.hpp	/^		no_error,$/;"	m	class:libtorrent::status_t
no_error	libtorrent/include/libtorrent/upnp.hpp	/^			no_error = 0,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
no_files_in_resume_data	libtorrent/include/libtorrent/error_code.hpp	/^			no_files_in_resume_data,$/;"	e	enum:libtorrent::errors::error_code_enum
no_files_in_torrent	libtorrent/include/libtorrent/error_code.hpp	/^			no_files_in_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
no_gauge_state	libtorrent/include/libtorrent/torrent.hpp	/^		static constexpr int no_gauge_state = 0xf;$/;"	m	class:libtorrent::torrent
no_i2p_endpoint	libtorrent/include/libtorrent/error_code.hpp	/^			no_i2p_endpoint = 161,$/;"	e	enum:libtorrent::errors::error_code_enum
no_i2p_router	libtorrent/include/libtorrent/error_code.hpp	/^			no_i2p_router = 160,$/;"	e	enum:libtorrent::errors::error_code_enum
no_identd	libtorrent/include/libtorrent/socks5_stream.hpp	/^		no_identd,$/;"	e	enum:libtorrent::socks_error::socks_error_code
no_incoming_encrypted	libtorrent/include/libtorrent/error_code.hpp	/^			no_incoming_encrypted,$/;"	e	enum:libtorrent::errors::error_code_enum
no_incoming_regular	libtorrent/include/libtorrent/error_code.hpp	/^			no_incoming_regular,$/;"	e	enum:libtorrent::errors::error_code_enum
no_memory	libtorrent/include/libtorrent/close_reason.hpp	/^		no_memory,$/;"	m	class:libtorrent::close_reason_t
no_memory	libtorrent/include/libtorrent/error_code.hpp	/^			no_memory,$/;"	e	enum:libtorrent::errors::error_code_enum
no_memory_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			no_memory_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
no_metadata	libtorrent/include/libtorrent/error_code.hpp	/^			no_metadata,$/;"	e	enum:libtorrent::errors::error_code_enum
no_padding	libtorrent/include/libtorrent/aux_/escape_string.hpp	/^		constexpr encode_string_flags_t no_padding = 1_bit;$/;"	m	namespace:libtorrent::string
no_peer_connection_attempts	libtorrent/include/libtorrent/performance_counters.hpp	/^			no_peer_connection_attempts,$/;"	e	enum:libtorrent::counters::stats_counter_t
no_plaintext_mode	libtorrent/include/libtorrent/error_code.hpp	/^			no_plaintext_mode,$/;"	e	enum:libtorrent::errors::error_code_enum
no_rc4_mode	libtorrent/include/libtorrent/error_code.hpp	/^			no_rc4_mode,$/;"	e	enum:libtorrent::errors::error_code_enum
no_recheck_incomplete_resume	libtorrent/include/libtorrent/settings_pack.hpp	/^			no_recheck_incomplete_resume,$/;"	e	enum:libtorrent::settings_pack::bool_types
no_resources	libtorrent/include/libtorrent/error_code.hpp	/^			no_resources TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
no_root_dir	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t no_root_dir:1;$/;"	m	struct:libtorrent::internal_file_entry
no_router	libtorrent/include/libtorrent/error_code.hpp	/^			no_router,$/;"	e	enum:libtorrent::errors::error_code_enum
no_self	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			no_self = 4$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
no_such_peer	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			no_such_peer = 1,$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
no_support	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			no_support = 3,$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
node	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^			node,$/;"	e	enum:libtorrent::dht::dht_logger::module_t
node	libtorrent/include/libtorrent/kademlia/node.hpp	/^class TORRENT_EXTRA_EXPORT node$/;"	c	namespace:libtorrent::dht
node_added	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^		node_added,$/;"	e	enum:libtorrent::dht::routing_table::add_node_status_t
node_ban_entry	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^			node_ban_entry(): count(0) {}$/;"	f	struct:libtorrent::dht::dos_blocker::node_ban_entry
node_ban_entry	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		struct node_ban_entry$/;"	s	struct:libtorrent::dht::dos_blocker
node_endpoint	libtorrent/include/libtorrent/kademlia/io.hpp	/^	struct node_endpoint$/;"	s	namespace:libtorrent::dht
node_entry	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^struct TORRENT_EXTRA_EXPORT node_entry$/;"	s	namespace:libtorrent::dht
nodes	libowfat/ent.c	/^size_t nodes,datasize;$/;"	v
nodes	libtorrent/include/libtorrent/kademlia/dht_state.hpp	/^		std::vector<udp::endpoint> nodes;$/;"	m	struct:libtorrent::dht::dht_state
nodes	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<std::pair<std::string, int>> const& nodes() const$/;"	f	class:libtorrent::torrent_info::std
nodes6	libtorrent/include/libtorrent/kademlia/dht_state.hpp	/^		std::vector<udp::endpoint> nodes6;$/;"	m	struct:libtorrent::dht::dht_state
nodes_key	libtorrent/include/libtorrent/kademlia/node.hpp	/^		char const* nodes_key;$/;"	m	struct:libtorrent::dht::node::protocol_descriptor
noexcept	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		add_torrent_params(add_torrent_params&&) noexcept;$/;"	m	struct:libtorrent::add_torrent_params
noexcept	libtorrent/include/libtorrent/alert.hpp	/^		alert(alert&& rhs) noexcept = default;$/;"	m	class:libtorrent::alert
noexcept	libtorrent/include/libtorrent/alert.hpp	/^		virtual alert_category_t category() const noexcept = 0;$/;"	m	class:libtorrent::alert
noexcept	libtorrent/include/libtorrent/alert.hpp	/^		virtual char const* what() const noexcept = 0;$/;"	m	class:libtorrent::alert
noexcept	libtorrent/include/libtorrent/alert.hpp	/^		virtual int type() const noexcept = 0;$/;"	m	class:libtorrent::alert
noexcept	libtorrent/include/libtorrent/alert_types.hpp	/^		peer_alert(peer_alert&& rhs) noexcept = default;$/;"	m	struct:libtorrent::peer_alert
noexcept	libtorrent/include/libtorrent/alert_types.hpp	/^		torrent_alert(torrent_alert&&) noexcept = default;$/;"	m	struct:libtorrent::torrent_alert
noexcept	libtorrent/include/libtorrent/aux_/noexcept_movable.hpp	/^		noexcept_movable(T&& rhs) noexcept : T(std::forward<T>(rhs)) {} \/\/ NOLINT$/;"	m	struct:libtorrent::aux::noexcept_movable
noexcept	libtorrent/include/libtorrent/aux_/noexcept_movable.hpp	/^		noexcept_movable(noexcept_movable<T>&& rhs) noexcept$/;"	m	struct:libtorrent::aux::noexcept_movable
noexcept	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^		scope_end_impl& operator=(scope_end_impl&&) noexcept = default;$/;"	m	struct:libtorrent::aux::scope_end_impl
noexcept	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^		scope_end_impl(scope_end_impl&&) noexcept = default;$/;"	m	struct:libtorrent::aux::scope_end_impl
noexcept	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void abort() noexcept;$/;"	m	struct:libtorrent::aux::final
noexcept	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void abort_stage2() noexcept;$/;"	m	struct:libtorrent::aux::final
noexcept	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		virtual void close_connection(peer_connection* p) noexcept = 0;$/;"	m	struct:libtorrent::aux::session_interface
noexcept	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		virtual void trigger_optimistic_unchoke() noexcept = 0;$/;"	m	struct:libtorrent::aux::session_interface
noexcept	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		virtual void trigger_unchoke() noexcept = 0;$/;"	m	struct:libtorrent::aux::session_interface
noexcept	libtorrent/include/libtorrent/bdecode.hpp	/^	bdecode_node(bdecode_node&&) noexcept;$/;"	m	struct:bdecode_node
noexcept	libtorrent/include/libtorrent/bdecode.hpp	/^	explicit operator bool() const noexcept;$/;"	m	struct:bdecode_node
noexcept	libtorrent/include/libtorrent/bdecode.hpp	/^	span<char const> data_section() const noexcept;$/;"	m	struct:bdecode_node
noexcept	libtorrent/include/libtorrent/bdecode.hpp	/^	type_t type() const noexcept;$/;"	m	struct:bdecode_node
noexcept	libtorrent/include/libtorrent/bdecode.hpp	/^	void switch_underlying_buffer(char const* buf) noexcept;$/;"	m	struct:bdecode_node
noexcept	libtorrent/include/libtorrent/bitfield.hpp	/^		bitfield& operator=(bitfield&& rhs) noexcept = default;$/;"	m	struct:libtorrent::bitfield
noexcept	libtorrent/include/libtorrent/bitfield.hpp	/^		bitfield() noexcept = default;$/;"	m	struct:libtorrent::bitfield
noexcept	libtorrent/include/libtorrent/bitfield.hpp	/^		bitfield(bitfield&& rhs) noexcept = default;$/;"	m	struct:libtorrent::bitfield
noexcept	libtorrent/include/libtorrent/bitfield.hpp	/^		bool all_set() const noexcept;$/;"	m	struct:libtorrent::bitfield
noexcept	libtorrent/include/libtorrent/bitfield.hpp	/^		int count() const noexcept;$/;"	m	struct:libtorrent::bitfield
noexcept	libtorrent/include/libtorrent/bitfield.hpp	/^		int find_first_set() const noexcept;$/;"	m	struct:libtorrent::bitfield
noexcept	libtorrent/include/libtorrent/bitfield.hpp	/^		int find_last_clear() const noexcept;$/;"	m	struct:libtorrent::bitfield
noexcept	libtorrent/include/libtorrent/bitfield.hpp	/^		typed_bitfield(typed_bitfield&& rhs) noexcept$/;"	m	struct:libtorrent::typed_bitfield
noexcept	libtorrent/include/libtorrent/chained_buffer.hpp	/^			buffer_t(buffer_t const& rhs) noexcept$/;"	m	struct:libtorrent::chained_buffer::buffer_t
noexcept	libtorrent/include/libtorrent/copy_ptr.hpp	/^		copy_ptr& operator=(copy_ptr&& p) & noexcept = default;$/;"	m	struct:libtorrent::copy_ptr
noexcept	libtorrent/include/libtorrent/copy_ptr.hpp	/^		copy_ptr(copy_ptr&& p) noexcept = default;$/;"	m	struct:libtorrent::copy_ptr
noexcept	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^			, char* buf, std::size_t sz) noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^			, std::size_t sz) noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^		char* release() noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^		disk_buffer_holder& operator=(disk_buffer_holder&&) & noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^		disk_buffer_holder(disk_buffer_holder&&) noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	libtorrent/include/libtorrent/disk_interface.hpp	/^		storage_holder(storage_holder&& rhs) noexcept$/;"	m	struct:libtorrent::storage_holder
noexcept	libtorrent/include/libtorrent/entry.hpp	/^		entry& operator=(entry&&) & noexcept;$/;"	m	class:libtorrent::entry
noexcept	libtorrent/include/libtorrent/entry.hpp	/^		entry(entry&& e) noexcept;$/;"	m	class:libtorrent::entry
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		file_entry& operator=(file_entry&&) & noexcept = default;$/;"	m	struct:libtorrent::file_entry
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		file_entry(file_entry&&) noexcept = default;$/;"	m	struct:libtorrent::file_entry
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		file_index_t end_file() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		file_index_t last_file() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		file_storage(file_storage&&) noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		index_range<file_index_t> file_range() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		index_range<piece_index_t> piece_range() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		int num_files() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		internal_file_entry& operator=(internal_file_entry&& fe) & noexcept;$/;"	m	struct:libtorrent::internal_file_entry
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		internal_file_entry(internal_file_entry&& fe) noexcept;$/;"	m	struct:libtorrent::internal_file_entry
noexcept	libtorrent/include/libtorrent/file_storage.hpp	/^		void swap(file_storage& ti) noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	libtorrent/include/libtorrent/flags.hpp	/^	bitfield_flag& operator=(bitfield_flag const& rhs) & noexcept = default;$/;"	m	namespace:libtorrent::flags
noexcept	libtorrent/include/libtorrent/flags.hpp	/^	bitfield_flag& operator=(bitfield_flag&& rhs) & noexcept = default;$/;"	m	namespace:libtorrent::flags
noexcept	libtorrent/include/libtorrent/flags.hpp	/^	constexpr bitfield_flag() noexcept : m_val(0) {}$/;"	m	struct:libtorrent::flags::bitfield_flag
noexcept	libtorrent/include/libtorrent/flags.hpp	/^	constexpr bitfield_flag(bitfield_flag const& rhs) noexcept = default;$/;"	m	struct:libtorrent::flags::bitfield_flag
noexcept	libtorrent/include/libtorrent/flags.hpp	/^	constexpr bitfield_flag(bitfield_flag&& rhs) noexcept = default;$/;"	m	struct:libtorrent::flags::bitfield_flag
noexcept	libtorrent/include/libtorrent/netlink.hpp	/^		basic_nl_endpoint(basic_nl_endpoint&& other) noexcept = default;$/;"	m	class:libtorrent::basic_nl_endpoint
noexcept	libtorrent/include/libtorrent/peer_connection.hpp	/^			, char const* event) const noexcept;$/;"	m	class:libtorrent::peer_connection
noexcept	libtorrent/include/libtorrent/session.hpp	/^		session_proxy& operator=(session_proxy&&) noexcept;$/;"	m	class:libtorrent::session_proxy
noexcept	libtorrent/include/libtorrent/session.hpp	/^		session_proxy(session_proxy&&) noexcept;$/;"	m	class:libtorrent::session_proxy
noexcept	libtorrent/include/libtorrent/session_handle.hpp	/^		session_handle& operator=(session_handle&&) noexcept = default;$/;"	m	struct:libtorrent::session_handle
noexcept	libtorrent/include/libtorrent/session_handle.hpp	/^		session_handle(session_handle&& t) noexcept = default;$/;"	m	struct:libtorrent::session_handle
noexcept	libtorrent/include/libtorrent/settings_pack.hpp	/^		settings_pack& operator=(settings_pack&&) noexcept = default;$/;"	m	struct:libtorrent::settings_pack
noexcept	libtorrent/include/libtorrent/settings_pack.hpp	/^		settings_pack(settings_pack&&) noexcept = default;$/;"	m	struct:libtorrent::settings_pack
noexcept	libtorrent/include/libtorrent/sha1_hash.hpp	/^		digest32& operator=(digest32 const&) noexcept = default;$/;"	m	class:libtorrent::digest32
noexcept	libtorrent/include/libtorrent/sha1_hash.hpp	/^		digest32(digest32 const&) noexcept = default;$/;"	m	class:libtorrent::digest32
noexcept	libtorrent/include/libtorrent/span.hpp	/^		span() noexcept : m_ptr(nullptr), m_len(0) {}$/;"	m	struct:libtorrent::span
noexcept	libtorrent/include/libtorrent/span.hpp	/^		span(T& p) noexcept : m_ptr(&p), m_len(1) {} \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	libtorrent/include/libtorrent/span.hpp	/^		span(T* p, difference_type const l) noexcept : m_ptr(p), m_len(l) \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	libtorrent/include/libtorrent/span.hpp	/^		span(U (&arr)[N]) noexcept \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	libtorrent/include/libtorrent/span.hpp	/^		span(span<U> const& v) noexcept \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	libtorrent/include/libtorrent/span.hpp	/^		span(std::array<U, N>& arr) noexcept \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	libtorrent/include/libtorrent/span.hpp	/^		span(std::basic_string<U>& str) noexcept \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	libtorrent/include/libtorrent/stack_allocator.hpp	/^		allocation_slot& operator=(allocation_slot&&) noexcept = default;$/;"	m	struct:libtorrent::aux::allocation_slot
noexcept	libtorrent/include/libtorrent/stack_allocator.hpp	/^		allocation_slot() noexcept : m_idx(-1) {}$/;"	m	struct:libtorrent::aux::allocation_slot
noexcept	libtorrent/include/libtorrent/stack_allocator.hpp	/^		allocation_slot(allocation_slot&&) noexcept = default;$/;"	m	struct:libtorrent::aux::allocation_slot
noexcept	libtorrent/include/libtorrent/stack_allocator.hpp	/^		explicit allocation_slot(int idx) noexcept : m_idx(idx) {}$/;"	m	struct:libtorrent::aux::allocation_slot
noexcept	libtorrent/include/libtorrent/torrent.hpp	/^		void on_remove_peers() noexcept;$/;"	m	class:libtorrent::torrent
noexcept	libtorrent/include/libtorrent/torrent.hpp	/^		void remove_peer(std::shared_ptr<peer_connection> p) noexcept;$/;"	m	class:libtorrent::torrent
noexcept	libtorrent/include/libtorrent/torrent.hpp	/^		void trigger_optimistic_unchoke() noexcept;$/;"	m	class:libtorrent::torrent
noexcept	libtorrent/include/libtorrent/torrent.hpp	/^		void trigger_unchoke() noexcept;$/;"	m	class:libtorrent::torrent
noexcept	libtorrent/include/libtorrent/torrent_handle.hpp	/^		partial_piece_info& operator=(partial_piece_info&&) noexcept = default;$/;"	m	struct:libtorrent::partial_piece_info
noexcept	libtorrent/include/libtorrent/torrent_handle.hpp	/^		partial_piece_info(partial_piece_info&&) noexcept = default;$/;"	m	struct:libtorrent::partial_piece_info
noexcept	libtorrent/include/libtorrent/torrent_handle.hpp	/^		torrent_handle& operator=(torrent_handle&&) noexcept = default;$/;"	m	struct:libtorrent::torrent_handle
noexcept	libtorrent/include/libtorrent/torrent_handle.hpp	/^		torrent_handle() noexcept = default;$/;"	m	struct:libtorrent::torrent_handle
noexcept	libtorrent/include/libtorrent/torrent_handle.hpp	/^		torrent_handle(torrent_handle&& t) noexcept = default;$/;"	m	struct:libtorrent::torrent_handle
noexcept	libtorrent/include/libtorrent/torrent_status.hpp	/^		torrent_status() noexcept;$/;"	m	struct:libtorrent::torrent_status
noexcept	libtorrent/include/libtorrent/torrent_status.hpp	/^		torrent_status(torrent_status&&) noexcept;$/;"	m	struct:libtorrent::torrent_status
noexcept	libtorrent/include/libtorrent/units.hpp	/^		constexpr strong_typedef(strong_typedef const& rhs) noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	libtorrent/include/libtorrent/units.hpp	/^		constexpr strong_typedef(strong_typedef&& rhs) noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef& operator=(strong_typedef const& rhs) & noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef& operator=(strong_typedef&& rhs) & noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef() noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	libtorrent/include/libtorrent/utp_stream.hpp	/^	utp_stream& operator=(utp_stream&&) noexcept = delete;$/;"	m	struct:libtorrent::utp_stream
noexcept	libtorrent/include/libtorrent/utp_stream.hpp	/^	utp_stream(utp_stream&&) noexcept = delete;$/;"	m	struct:libtorrent::utp_stream
noexcept_movable	libtorrent/include/libtorrent/aux_/noexcept_movable.hpp	/^	struct noexcept_movable : T$/;"	s	namespace:libtorrent::aux
noipv6	libowfat/socket/socket_noipv6.c	/^int noipv6=0;$/;"	v
non_blocking	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void non_blocking(bool b)$/;"	f	struct:libtorrent::aux::socket_type
non_blocking	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void non_blocking(bool b, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
non_blocking	libtorrent/include/libtorrent/proxy_base.hpp	/^	error_code non_blocking(bool b, error_code& ec)$/;"	f	class:libtorrent::proxy_base
non_blocking	libtorrent/include/libtorrent/proxy_base.hpp	/^	void non_blocking(bool b)$/;"	f	class:libtorrent::proxy_base
non_blocking	libtorrent/include/libtorrent/ssl_stream.hpp	/^	error_code non_blocking(bool b, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
non_blocking	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void non_blocking(bool b) { m_sock.next_layer().non_blocking(b); }$/;"	f	class:libtorrent::ssl_stream
non_blocking	libtorrent/include/libtorrent/utp_stream.hpp	/^	error_code non_blocking(bool, error_code&) { return error_code(); }$/;"	f	struct:libtorrent::utp_stream
non_blocking	libtorrent/include/libtorrent/utp_stream.hpp	/^	void non_blocking(bool) {}$/;"	f	struct:libtorrent::utp_stream
non_filter_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			non_filter_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
nonblock	libowfat/io_internal.h	/^  unsigned int nonblock:1;	\/* is this socket non-blocking? *\/$/;"	m	struct:__anon40
nonce	libtorrent/include/libtorrent/natpmp.hpp	/^		std::array<char, 12> nonce;$/;"	m	struct:libtorrent::natpmp::mapping_t
none	libtorrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
none	libtorrent/include/libtorrent/aux_/block_cache_reference.hpp	/^		static constexpr std::int32_t none = 0x7fffffff;$/;"	m	struct:libtorrent::aux::block_cache_reference
none	libtorrent/include/libtorrent/aux_/portmap.hpp	/^		none, add, del$/;"	m	class:libtorrent::aux::portmap_action
none	libtorrent/include/libtorrent/block_cache.hpp	/^			none,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
none	libtorrent/include/libtorrent/close_reason.hpp	/^		none = 0,$/;"	m	class:libtorrent::close_reason_t
none	libtorrent/include/libtorrent/portmap.hpp	/^		none, tcp, udp$/;"	m	class:libtorrent::portmap_protocol
none	libtorrent/include/libtorrent/torrent.hpp	/^		enum class disk_class { none, write };$/;"	m	class:libtorrent::torrent::disk_class
none	libtorrent/include/libtorrent/torrent_handle.hpp	/^			none,$/;"	e	enum:libtorrent::block_info::block_state_t
none	libtorrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	e	enum:libtorrent::partial_piece_info::state_t
none	libtorrent/include/libtorrent/tracker_manager.hpp	/^			none,$/;"	e	enum:libtorrent::tracker_request::event_t
none_t	libtorrent/include/libtorrent/bdecode.hpp	/^		none_t,$/;"	e	enum:bdecode_node::type_t
none_t	libtorrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
nop	libtorrent/include/libtorrent/create_torrent.hpp	/^	inline void nop(piece_index_t) {}$/;"	f	namespace:libtorrent::detail
normalized	libtorrent/include/libtorrent/receive_buffer.hpp	/^	bool normalized() const { return m_recv_start == 0; }$/;"	f	struct:libtorrent::receive_buffer
not_a_dictionary	libtorrent/include/libtorrent/error_code.hpp	/^			not_a_dictionary,$/;"	e	enum:libtorrent::errors::error_code_enum
not_a_symlink	libtorrent/include/libtorrent/file_storage.hpp	/^			not_a_symlink = (1 << 15) - 1$/;"	e	enum:libtorrent::internal_file_entry::__anon54
not_an_ssl_torrent	libtorrent/include/libtorrent/error_code.hpp	/^			not_an_ssl_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
not_connected	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			not_connected = 2,$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
not_found	libtorrent/include/libtorrent/error_code.hpp	/^			not_found = 404,$/;"	e	enum:libtorrent::errors::http_errors
not_implemented	libtorrent/include/libtorrent/error_code.hpp	/^			not_implemented = 501,$/;"	e	enum:libtorrent::errors::http_errors
not_in_buffer	libtorrent/include/libtorrent/peer_connection.hpp	/^		static constexpr std::uint32_t not_in_buffer = 0x1fffffff;$/;"	m	struct:libtorrent::pending_block
not_in_cache	libtorrent/include/libtorrent/stat_cache.hpp	/^			not_in_cache = -1,$/;"	e	enum:libtorrent::stat_cache::__anon68
not_initialized	libtorrent/include/libtorrent/timestamp_history.hpp	/^	static constexpr std::uint16_t not_initialized = 0xffff;$/;"	m	struct:libtorrent::timestamp_history
not_interested_upload_only	libtorrent/include/libtorrent/close_reason.hpp	/^		not_interested_upload_only,$/;"	m	class:libtorrent::close_reason_t
not_modified	libtorrent/include/libtorrent/error_code.hpp	/^			not_modified = 304,$/;"	e	enum:libtorrent::errors::http_errors
not_wanted	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::uint32_t not_wanted:1;$/;"	m	struct:libtorrent::pending_block
notconnected_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			notconnected_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
ns_count	libtorrent/include/libtorrent/aux_/route.h	/^	int	ns_count;$/;"	m	struct:route_cb
null_observer	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	null_observer(std::shared_ptr<traversal_algorithm> a$/;"	f	struct:libtorrent::dht::null_observer
null_observer	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^struct TORRENT_EXTRA_EXPORT null_observer : observer$/;"	s	namespace:libtorrent::dht
num	libowfat/cdb_make.h	/^  int num;$/;"	m	struct:cdb_hplist
num	libowfat/libowfat/cdb_make.h	/^  int num;$/;"	m	struct:cdb_hplist
num_active_buckets	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	int num_active_buckets() const { return int(m_buckets.size()); }$/;"	f	class:libtorrent::dht::routing_table
num_alert_types	libtorrent/include/libtorrent/alert_types.hpp	/^	constexpr int num_alert_types = 97;$/;"	m	namespace:libtorrent
num_allocated_observers	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	int num_allocated_observers() const { return m_allocated_observers; }$/;"	f	class:libtorrent::dht::rpc_manager
num_ban_nodes	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		static constexpr int num_ban_nodes = 20;$/;"	m	struct:libtorrent::dht::dos_blocker
num_banned_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_banned_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_blocks	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint64_t num_blocks:14;$/;"	m	struct:libtorrent::cached_piece_entry
num_blocks_cache_hits	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_blocks_cache_hits,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_blocks_hashed	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_blocks_hashed,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_blocks_read	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_blocks_read,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_blocks_written	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_blocks_written,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_bool_settings	libtorrent/include/libtorrent/settings_pack.hpp	/^			num_bool_settings = int(max_bool_setting_internal) - int(bool_type_base),$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
num_channels	libtorrent/include/libtorrent/peer_connection.hpp	/^			num_channels$/;"	e	enum:libtorrent::peer_connection::channels
num_channels	libtorrent/include/libtorrent/stat.hpp	/^			num_channels$/;"	e	enum:libtorrent::stat::__anon67
num_checking_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_checking_torrents = num_stats_counters,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_classes	libtorrent/include/libtorrent/peer_class_set.hpp	/^		int num_classes() const { return m_size; }$/;"	f	struct:libtorrent::peer_class_set
num_close_wait	libtorrent/include/libtorrent/session_status.hpp	/^		int num_close_wait;$/;"	m	struct:libtorrent::utp_status
num_complete	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int num_complete = -1;$/;"	m	struct:libtorrent::add_torrent_params
num_complete	libtorrent/include/libtorrent/torrent_status.hpp	/^		int num_complete = -1;$/;"	m	struct:libtorrent::torrent_status
num_connect_candidates	libtorrent/include/libtorrent/peer_list.hpp	/^		int num_connect_candidates() const { return m_num_connect_candidates; }$/;"	f	struct:libtorrent::peer_list
num_connect_candidates	libtorrent/include/libtorrent/torrent.hpp	/^		int num_connect_candidates() const { return m_peer_list ? m_peer_list->num_connect_candidates() : 0; }$/;"	f	class:libtorrent::torrent
num_connected	libtorrent/include/libtorrent/session_status.hpp	/^		int num_connected;$/;"	m	struct:libtorrent::utp_status
num_connections	libtorrent/include/libtorrent/torrent_status.hpp	/^		int num_connections = 0;$/;"	m	struct:libtorrent::torrent_status
num_counters	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_counters,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_dead_peers	libtorrent/include/libtorrent/session_status.hpp	/^		int num_dead_peers;$/;"	m	struct:libtorrent::session_status
num_dirty	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint64_t num_dirty:14;$/;"	m	struct:libtorrent::cached_piece_entry
num_downloaded	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int num_downloaded = -1;$/;"	m	struct:libtorrent::add_torrent_params
num_downloading_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_downloading_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_error_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_error_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_errors	libtorrent/include/libtorrent/i2p_stream.hpp	/^			num_errors$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
num_errors	libtorrent/include/libtorrent/socks5_stream.hpp	/^		num_errors$/;"	e	enum:libtorrent::socks_error::socks_error_code
num_fast_resend	libtorrent/include/libtorrent/packet_pool.hpp	/^		int num_fast_resend;$/;"	m	struct:libtorrent::packet
num_fence_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int num_fence_jobs[static_cast<int>(job_action_t::num_job_ids)];$/;"	m	struct:libtorrent::cache_status
num_fenced_check_fastresume	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_check_fastresume,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_clear_piece	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_clear_piece,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_delete_files	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_delete_files,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_file_priority	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_file_priority,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_flush_hashed	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_flush_hashed,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_flush_piece	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_flush_piece,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_flush_storage	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_flush_storage,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_hash	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_hash,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_load_torrent	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_load_torrent,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_move_storage	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_move_storage,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_read	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_read,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_release_files	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_release_files,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_rename_file	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_rename_file,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_save_resume_data	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_save_resume_data,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_stop_torrent	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_stop_torrent,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_tick_storage	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_tick_storage,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_trim_cache	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_trim_cache,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_write	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_write,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_files	libtorrent/include/libtorrent/torrent_info.hpp	/^		int num_files() const { return m_files.num_files(); }$/;"	f	class:libtorrent::torrent_info
num_fin_sent	libtorrent/include/libtorrent/session_status.hpp	/^		int num_fin_sent;$/;"	m	struct:libtorrent::utp_status
num_gauges_counters	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_gauges_counters = num_counters - num_stats_counters$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_global_nodes	libtorrent/include/libtorrent/kademlia/node.hpp	/^	std::int64_t num_global_nodes() const$/;"	f	class:libtorrent::dht::node
num_hashfails	libtorrent/include/libtorrent/peer_info.hpp	/^		int num_hashfails;$/;"	m	struct:libtorrent::peer_info
num_have	libtorrent/include/libtorrent/torrent.hpp	/^		int num_have() const$/;"	f	class:libtorrent::torrent
num_have_pieces	libtorrent/include/libtorrent/peer_connection.hpp	/^		int num_have_pieces() const { return m_num_pieces; }$/;"	f	class:libtorrent::peer_connection
num_have_pieces	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_have_pieces,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_http_proxy_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_http_proxy_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_i2p_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_i2p_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_idle	libtorrent/include/libtorrent/session_status.hpp	/^		int num_idle;$/;"	m	struct:libtorrent::utp_status
num_incoming_allowed_fast	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_allowed_fast,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_bitfield	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_bitfield,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_cancel	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_cancel,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_choke	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_choke,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_dht_port	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_dht_port,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_ext_handshake	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_ext_handshake,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_extended	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_extended,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_have	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_have,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_have_all	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_have_all,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_have_none	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_have_none,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_interested	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_interested,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_metadata	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_metadata,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_not_interested	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_not_interested,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_pex	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_pex,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_piece	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_piece,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_reject	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_reject,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_request	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_request,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_suggest	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_suggest,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_unchoke	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_unchoke,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incomplete	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int num_incomplete = -1;$/;"	m	struct:libtorrent::add_torrent_params
num_incomplete	libtorrent/include/libtorrent/torrent_status.hpp	/^		int num_incomplete = -1;$/;"	m	struct:libtorrent::torrent_status
num_int_settings	libtorrent/include/libtorrent/settings_pack.hpp	/^			num_int_settings = int(max_int_setting_internal) - int(int_type_base)$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
num_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int num_jobs;$/;"	m	struct:libtorrent::cache_status
num_jobs	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_known_peers	libtorrent/include/libtorrent/torrent.hpp	/^		int num_known_peers() const { return m_peer_list ? m_peer_list->num_peers() : 0; }$/;"	f	class:libtorrent::torrent
num_lrus	libtorrent/include/libtorrent/block_cache.hpp	/^			num_lrus$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
num_mappings	libtorrent/include/libtorrent/upnp.hpp	/^	int num_mappings() const { return int(m_mappings.size()); }$/;"	f	struct:libtorrent::final
num_nodes	libtorrent/include/libtorrent/alert_types.hpp	/^		int num_nodes;$/;"	m	struct:libtorrent::dht_routing_bucket
num_optimistic_unchoke_slots	libtorrent/include/libtorrent/settings_pack.hpp	/^			num_optimistic_unchoke_slots,$/;"	e	enum:libtorrent::settings_pack::int_types
num_outgoing_allowed_fast	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_allowed_fast,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_bitfield	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_bitfield,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_cancel	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_cancel,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_choke	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_choke,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_dht_port	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_dht_port,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_ext_handshake	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_ext_handshake,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_extended	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_extended,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_have	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_have,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_have_all	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_have_all,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_have_none	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_have_none,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_interested	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_interested,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_metadata	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_metadata,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_not_interested	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_not_interested,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_pex	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_pex,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_piece	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_piece,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_ports	libtorrent/include/libtorrent/settings_pack.hpp	/^			num_outgoing_ports,$/;"	e	enum:libtorrent::settings_pack::int_types
num_outgoing_reject	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_reject,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_request	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_request,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_suggest	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_suggest,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_unchoke	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_unchoke,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outstanding_accept	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_outstanding_accept,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_outstanding_jobs	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		int num_outstanding_jobs() const { return m_outstanding_jobs; }$/;"	f	struct:libtorrent::aux::disk_job_fence
num_outstanding_resume_data	src/client_test.cpp	/^int num_outstanding_resume_data = 0;$/;"	v
num_pad_blocks	libtorrent/include/libtorrent/piece_picker.hpp	/^		int num_pad_blocks() const { return m_num_pad_blocks; }$/;"	f	class:libtorrent::piece_picker
num_passed	libtorrent/include/libtorrent/piece_picker.hpp	/^		int num_passed() const { return m_num_passed; }$/;"	f	class:libtorrent::piece_picker
num_passed	libtorrent/include/libtorrent/torrent.hpp	/^		int num_passed() const$/;"	f	class:libtorrent::torrent
num_paused_torrents	libtorrent/include/libtorrent/session_status.hpp	/^		int num_paused_torrents;$/;"	m	struct:libtorrent::session_status
num_peers	libtorrent/include/libtorrent/alert_types.hpp	/^		int const num_peers;$/;"	m	struct:libtorrent::final
num_peers	libtorrent/include/libtorrent/kademlia/node.hpp	/^	int num_peers() const { return int(m_storage.num_peers()); }$/;"	f	class:libtorrent::dht::node
num_peers	libtorrent/include/libtorrent/peer_list.hpp	/^		int num_peers() const { return int(m_peers.size()); }$/;"	f	struct:libtorrent::peer_list
num_peers	libtorrent/include/libtorrent/piece_picker.hpp	/^			unsigned num_peers:14;$/;"	m	struct:libtorrent::piece_picker::block_info
num_peers	libtorrent/include/libtorrent/session_status.hpp	/^		int num_peers;$/;"	m	struct:libtorrent::session_status
num_peers	libtorrent/include/libtorrent/torrent.hpp	/^		int num_peers() const { return int(m_connections.size() - m_peers_to_disconnect.size()); }$/;"	f	class:libtorrent::torrent
num_peers	libtorrent/include/libtorrent/torrent_handle.hpp	/^		unsigned num_peers:14;$/;"	m	struct:libtorrent::block_info
num_peers	libtorrent/include/libtorrent/torrent_status.hpp	/^		int num_peers = 0;$/;"	m	struct:libtorrent::torrent_status
num_peers_connected	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_connected,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_down_disk	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_down_disk,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_down_interested	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_down_interested,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_down_requests	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_down_requests,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_down_unchoked	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_down_unchoked,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_end_game	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_end_game,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_half_open	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_half_open,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_disk	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_disk,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_interested	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_interested,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_requests	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_requests,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_unchoked	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_unchoked,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_unchoked_all	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_unchoked_all,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_unchoked_optimistic	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_unchoked_optimistic,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_piece_failed	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_piece_failed,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_piece_passed	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_piece_passed,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_pieces	libtorrent/include/libtorrent/aux_/storage_piece_set.hpp	/^		int num_pieces() const { return m_num_pieces; }$/;"	f	struct:libtorrent::aux::storage_piece_set
num_pieces	libtorrent/include/libtorrent/block_cache.hpp	/^		int num_pieces() const { return int(m_pieces.size()); }$/;"	f	struct:libtorrent::block_cache
num_pieces	libtorrent/include/libtorrent/create_torrent.hpp	/^		int num_pieces() const { return m_files.num_pieces(); }$/;"	f	struct:libtorrent::create_torrent
num_pieces	libtorrent/include/libtorrent/file_storage.hpp	/^		int num_pieces() const { TORRENT_ASSERT(m_piece_length > 0); return m_num_pieces; }$/;"	f	class:libtorrent::file_storage
num_pieces	libtorrent/include/libtorrent/peer_info.hpp	/^		int num_pieces;$/;"	m	struct:libtorrent::peer_info
num_pieces	libtorrent/include/libtorrent/piece_picker.hpp	/^		int num_pieces() const { return int(m_piece_map.size()); }$/;"	f	class:libtorrent::piece_picker
num_pieces	libtorrent/include/libtorrent/piece_picker.hpp	/^		int num_pieces;$/;"	m	struct:libtorrent::piece_count
num_pieces	libtorrent/include/libtorrent/torrent_info.hpp	/^		int num_pieces() const { return m_files.num_pieces(); }$/;"	f	class:libtorrent::torrent_info
num_pieces	libtorrent/include/libtorrent/torrent_status.hpp	/^		int num_pieces = 0;$/;"	m	struct:libtorrent::torrent_status
num_queued_download_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_queued_download_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_queued_seeding_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_queued_seeding_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_read_back	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_read_back,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_read_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int num_read_jobs;$/;"	m	struct:libtorrent::cache_status
num_read_jobs	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_read_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_read_ops	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_read_ops,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_reading_bytes	libtorrent/include/libtorrent/peer_connection.hpp	/^		int num_reading_bytes() const { return m_reading_bytes; }$/;"	f	class:libtorrent::peer_connection
num_replacements	libtorrent/include/libtorrent/alert_types.hpp	/^		int num_replacements;$/;"	m	struct:libtorrent::dht_routing_bucket
num_resends	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int num_resends() const { return m_sett.get_int(settings_pack::utp_num_resends); }$/;"	f	struct:libtorrent::utp_socket_manager
num_responses	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int num_responses() const { return m_responses; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
num_running_disk_jobs	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_running_disk_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_running_threads	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_running_threads,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_samples	libtorrent/include/libtorrent/sliding_average.hpp	/^	int num_samples() const { return m_num_samples; }$/;"	f	struct:libtorrent::sliding_average
num_seeding_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_seeding_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_seeds	libtorrent/include/libtorrent/peer_list.hpp	/^		int num_seeds() const { return int(m_num_seeds); }$/;"	f	struct:libtorrent::peer_list
num_seeds	libtorrent/include/libtorrent/torrent_status.hpp	/^		int num_seeds = 0;$/;"	m	struct:libtorrent::torrent_status
num_send_sockets	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		int num_send_sockets() const { return int(m_unicast_sockets.size()); }$/;"	f	class:libtorrent::broadcast_socket
num_sockets	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int num_sockets() const { return int(m_utp_sockets.size()); }$/;"	f	struct:libtorrent::utp_socket_manager
num_socks5_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_socks5_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_sorted_results	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int num_sorted_results() const { return m_sorted_results; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
num_ssl_http_proxy_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_ssl_http_proxy_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_ssl_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_ssl_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_ssl_socks5_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_ssl_socks5_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_ssl_utp_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_ssl_utp_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_stats_counters	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_stats_counters$/;"	e	enum:libtorrent::counters::stats_counter_t
num_stopped_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_stopped_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_supported_messages	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			num_supported_messages$/;"	e	enum:libtorrent::bt_peer_connection::message_type
num_syn_sent	libtorrent/include/libtorrent/session_status.hpp	/^		int num_syn_sent;$/;"	m	struct:libtorrent::utp_status
num_tcp_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_tcp_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_threads	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		int num_threads()$/;"	f	struct:libtorrent::disk_io_thread_pool
num_time_critical_pieces	libtorrent/include/libtorrent/torrent.hpp	/^		int num_time_critical_pieces() const$/;"	f	class:libtorrent::torrent
num_timeouts	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int num_timeouts() const { return m_timeouts; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
num_torrent_lists	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr std::size_t num_torrent_lists = 8;$/;"	m	struct:libtorrent::aux::session_interface
num_torrents	libtorrent/include/libtorrent/kademlia/node.hpp	/^	int num_torrents() const { return int(m_storage.num_torrents()); }$/;"	f	class:libtorrent::dht::node
num_torrents	libtorrent/include/libtorrent/session_status.hpp	/^		int num_torrents;$/;"	m	struct:libtorrent::session_status
num_total_pieces_added	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_total_pieces_added,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_transmissions	libtorrent/include/libtorrent/packet_pool.hpp	/^		std::uint8_t num_transmissions:6;$/;"	m	struct:libtorrent::packet
num_unchoke_slots	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_unchoke_slots,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_unchoked	libtorrent/include/libtorrent/session_status.hpp	/^		int num_unchoked;$/;"	m	struct:libtorrent::session_status
num_upload_only_torrents	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_upload_only_torrents, \/\/ upload_only means finished$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_uploads	libtorrent/include/libtorrent/torrent_status.hpp	/^		int num_uploads = 0;$/;"	m	struct:libtorrent::torrent_status
num_utp_close_wait	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_utp_close_wait,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_connected	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_utp_connected,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_deleted	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_utp_deleted,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_fin_sent	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_utp_fin_sent,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_idle	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_utp_idle,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_utp_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_syn_sent	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_utp_syn_sent,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_visible_torrents	include/torrent_view.hpp	/^	int num_visible_torrents() const { return int(m_filtered_handles.size()); }$/;"	f	struct:torrent_view
num_votes	libtorrent/include/libtorrent/ip_voter.hpp	/^			std::uint16_t num_votes = 0;$/;"	m	struct:libtorrent::ip_voter::external_ip_t
num_want	libtorrent/include/libtorrent/settings_pack.hpp	/^			num_want,$/;"	e	enum:libtorrent::settings_pack::int_types
num_want	libtorrent/include/libtorrent/tracker_manager.hpp	/^		int num_want;$/;"	m	struct:libtorrent::tracker_request
num_want_left	libtorrent/include/libtorrent/piece_picker.hpp	/^		int num_want_left() const { return num_pieces() - m_num_have - m_num_filtered + m_num_have_filtered; }$/;"	f	class:libtorrent::piece_picker
num_warnings	libtorrent/include/libtorrent/alert_types.hpp	/^			num_warnings$/;"	e	enum:libtorrent::final::performance_warning_t
num_write_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int num_write_jobs;$/;"	m	struct:libtorrent::cache_status
num_write_jobs	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_write_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_write_lru_pieces	libtorrent/include/libtorrent/block_cache.hpp	/^		int num_write_lru_pieces() const { return m_lru[cached_piece_entry::write_lru].size(); }$/;"	f	struct:libtorrent::block_cache
num_write_ops	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_write_ops,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_writing_threads	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int num_writing_threads;$/;"	m	struct:libtorrent::cache_status
num_writing_threads	libtorrent/include/libtorrent/performance_counters.hpp	/^			num_writing_threads,$/;"	e	enum:libtorrent::counters::stats_gauge_t
number_size	libtorrent/include/libtorrent/sha1_hash.hpp	/^		static constexpr std::ptrdiff_t number_size = N \/ 32;$/;"	m	class:libtorrent::digest32
numentries	libowfat/cdb_make.h	/^  uint32 numentries;$/;"	m	struct:cdb_make
numentries	libowfat/libowfat/cdb_make.h	/^  uint32 numentries;$/;"	m	struct:cdb_make
numeric_cast	libtorrent/include/libtorrent/aux_/numeric_cast.hpp	/^	T numeric_cast(In v)$/;"	f	namespace:libtorrent::aux
numeric_limits	libtorrent/include/libtorrent/units.hpp	/^	class numeric_limits<libtorrent::aux::strong_typedef<UnderlyingType, Tag>> : public std::numeric_limits<UnderlyingType>$/;"	c	namespace:std
numwants	src/ot_http.c	/^  unsigned long long numwants[201];$/;"	v
o	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		listen_socket_handle& operator=(listen_socket_handle const& o) = default;$/;"	m	struct:libtorrent::aux::listen_socket_handle
o	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		listen_socket_handle(listen_socket_handle const& o) = default;$/;"	m	struct:libtorrent::aux::listen_socket_handle
obfuscated_get_peers	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^struct obfuscated_get_peers : get_peers$/;"	s	namespace:libtorrent::dht
obfuscated_get_peers_observer	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	obfuscated_get_peers_observer($/;"	f	struct:libtorrent::dht::obfuscated_get_peers_observer
obfuscated_get_peers_observer	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^struct obfuscated_get_peers_observer : traversal_observer$/;"	s	namespace:libtorrent::dht
objects	libtorrent/include/libtorrent/aux_/alloca.hpp	/^	span<T> objects;$/;"	m	struct:libtorrent::aux::alloca_destructor
observer	libtorrent/include/libtorrent/kademlia/node.hpp	/^	dht_observer* observer() const { return m_observer; }$/;"	f	class:libtorrent::dht::node
observer	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	observer(std::shared_ptr<traversal_algorithm> a$/;"	f	struct:libtorrent::dht::observer
observer	libtorrent/include/libtorrent/kademlia/observer.hpp	/^struct TORRENT_EXTRA_EXPORT observer$/;"	s	namespace:libtorrent::dht
offset	libowfat/iob_internal.h	/^  uint64 offset,n;$/;"	m	struct:iob_entry
offset	libtorrent/include/libtorrent/block_cache.hpp	/^		int offset;$/;"	m	struct:libtorrent::partial_hash
offset	libtorrent/include/libtorrent/disk_io_job.hpp	/^			std::int32_t offset;$/;"	m	struct:libtorrent::disk_io_job::un::io_args
offset	libtorrent/include/libtorrent/file_storage.hpp	/^		std::int64_t offset;$/;"	m	struct:libtorrent::file_entry
offset	libtorrent/include/libtorrent/file_storage.hpp	/^		std::int64_t offset;$/;"	m	struct:libtorrent::file_slice
offset	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t offset:48;$/;"	m	struct:libtorrent::internal_file_entry
offset	libtorrent/include/libtorrent/stat.hpp	/^		void offset(std::int64_t c)$/;"	f	class:libtorrent::stat_channel
ok	libowfat/dns/dns_rcip.c	/^static int ok;$/;"	v	file:
ok	libowfat/dns/dns_rcrw.c	/^static int ok;$/;"	v	file:
ok	libtorrent/include/libtorrent/error_code.hpp	/^			ok = 200,$/;"	e	enum:libtorrent::errors::http_errors
ok_to_evict	libtorrent/include/libtorrent/block_cache.hpp	/^		bool ok_to_evict(bool ignore_hash = false) const$/;"	f	struct:libtorrent::cached_piece_entry
on_accept_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_accept_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_add_peer	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_add_peer(tcp::endpoint const&,$/;"	f	struct:libtorrent::torrent_plugin
on_alert	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_alert(alert const*) {}$/;"	f	struct:libtorrent::plugin
on_allowed_fast	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_allowed_fast(piece_index_t) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_bitfield	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_bitfield(bitfield const& \/*bitfield*\/) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_cancel	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_cancel(peer_request const&) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_choke	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_choke() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_connected	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_connected() {}$/;"	f	struct:libtorrent::peer_plugin
on_dht_request	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_dht_request(string_view \/* query *\/$/;"	f	struct:libtorrent::plugin
on_disconnect	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_disconnect(error_code const&) {}$/;"	f	struct:libtorrent::peer_plugin
on_disk_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_disk_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_disk_queue_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_disk_queue_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_dont_have	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_dont_have(piece_index_t) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_extended	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_extended(int \/*length*\/, int \/*msg*\/,$/;"	f	struct:libtorrent::peer_plugin
on_extension_handshake	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_extension_handshake(bdecode_node const&) { return true; }$/;"	f	struct:libtorrent::peer_plugin
on_files_checked	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_files_checked() {}$/;"	f	struct:libtorrent::torrent_plugin
on_handshake	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_handshake(span<char const>) { return true; }$/;"	f	struct:libtorrent::peer_plugin
on_have	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_have(piece_index_t) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_have_all	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_have_all() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_have_none	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_have_none() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_interested	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_interested() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_lsd_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_lsd_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_lsd_peer_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_lsd_peer_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_metadata	libtorrent/include/libtorrent/peer_connection.hpp	/^		virtual void on_metadata() {}$/;"	f	class:libtorrent::peer_connection
on_not_interested	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_not_interested() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_parole	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t on_parole = 9_bit;$/;"	m	struct:libtorrent::peer_info
on_parole	libtorrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t on_parole = 2_bit;$/;"	m	class:libtorrent::piece_picker
on_parole	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool on_parole:1;$/;"	m	struct:libtorrent::torrent_peer
on_pause	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_pause() { return false; }$/;"	f	struct:libtorrent::torrent_plugin
on_piece	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_piece(peer_request const& \/*piece*\/$/;"	f	struct:libtorrent::peer_plugin
on_piece_failed	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_piece_failed(piece_index_t) {}$/;"	f	struct:libtorrent::peer_plugin
on_piece_failed	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_piece_failed(piece_index_t) {}$/;"	f	struct:libtorrent::torrent_plugin
on_piece_pass	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_piece_pass(piece_index_t) {}$/;"	f	struct:libtorrent::peer_plugin
on_piece_pass	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_piece_pass(piece_index_t) {}$/;"	f	struct:libtorrent::torrent_plugin
on_read_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_read_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_reject	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_reject(peer_request const&) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_request	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_request(peer_request const&) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_resume	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_resume() { return false; }$/;"	f	struct:libtorrent::torrent_plugin
on_state	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_state(torrent_status::state_t) {}$/;"	f	struct:libtorrent::torrent_plugin
on_suggest	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_suggest(piece_index_t) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_tick	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void on_tick() {}$/;"	f	struct:libtorrent::plugin
on_tick	libtorrent/include/libtorrent/peer_connection.hpp	/^		virtual void on_tick() {}$/;"	f	class:libtorrent::peer_connection
on_tick_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_tick_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_udp_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_udp_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_unchoke	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_unchoke() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_unknown_message	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_unknown_message(int \/*length*\/, int \/*msg*\/,$/;"	f	struct:libtorrent::peer_plugin
on_unknown_torrent	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool on_unknown_torrent(sha1_hash const& \/* info_hash *\/$/;"	f	struct:libtorrent::plugin
on_write_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			on_write_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
only_if_modified	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr resume_data_flags_t only_if_modified = 2_bit;$/;"	m	struct:libtorrent::torrent_handle
only_permanent_leases_supported	libtorrent/include/libtorrent/upnp.hpp	/^			only_permanent_leases_supported = 725,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
op	libowfat/buffer.h	/^  ssize_t (*op)();	\/* use read(2) or write(2) *\/$/;"	m	struct:buffer
op	libowfat/buffer/buffer_mmapread.c	/^static ssize_t op() {$/;"	f	file:
op	libowfat/libowfat/buffer.h	/^  ssize_t (*op)();	\/* use read(2) or write(2) *\/$/;"	m	struct:buffer
op	libtorrent/include/libtorrent/alert_types.hpp	/^		operation_t const op;$/;"	m	struct:libtorrent::final
op	libtorrent/include/libtorrent/alert_types.hpp	/^		operation_t op;$/;"	m	namespace:libtorrent
op	libtorrent/include/libtorrent/alert_types.hpp	/^		operation_t op;$/;"	m	struct:libtorrent::final
op_t	libtorrent/include/libtorrent/alert_types.hpp	/^		enum TORRENT_DEPRECATED_ENUM op_t$/;"	g	namespace:libtorrent
opcode_announce	libtorrent/include/libtorrent/natpmp.hpp	/^		opcode_announce = 0,$/;"	e	enum:libtorrent::natpmp::pcp_opcode
opcode_map	libtorrent/include/libtorrent/natpmp.hpp	/^		opcode_map,$/;"	e	enum:libtorrent::natpmp::pcp_opcode
opcode_peer	libtorrent/include/libtorrent/natpmp.hpp	/^		opcode_peer,$/;"	e	enum:libtorrent::natpmp::pcp_opcode
open	libtorrent/include/libtorrent/alert_types.hpp	/^			open TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
open	libtorrent/include/libtorrent/proxy_base.hpp	/^	void open(protocol_type const&)$/;"	f	class:libtorrent::proxy_base
open	libtorrent/include/libtorrent/proxy_base.hpp	/^	void open(protocol_type const&, error_code&)$/;"	f	class:libtorrent::proxy_base
open	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void open(protocol_type const& p)$/;"	f	class:libtorrent::ssl_stream
open	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void open(protocol_type const& p, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
open	libtorrent/include/libtorrent/utp_stream.hpp	/^	void open(Protocol const&)$/;"	f	struct:libtorrent::utp_stream
open	libtorrent/include/libtorrent/utp_stream.hpp	/^	void open(Protocol const&, error_code&)$/;"	f	struct:libtorrent::utp_stream
open_append	libowfat/open/open_append.c	/^int open_append(const char *filename) {$/;"	f
open_excl	libowfat/open/open_excl.c	/^int open_excl(const char *filename) {$/;"	f
open_file_state	libtorrent/include/libtorrent/disk_interface.hpp	/^	struct TORRENT_EXPORT open_file_state$/;"	s	namespace:libtorrent
open_mode	libtorrent/include/libtorrent/disk_interface.hpp	/^		file_open_mode_t open_mode;$/;"	m	struct:libtorrent::open_file_state
open_mode	libtorrent/include/libtorrent/file.hpp	/^		open_mode_t open_mode() const { return m_open_mode; }$/;"	f	struct:libtorrent::file
open_mode	libtorrent/include/libtorrent/file.hpp	/^	namespace open_mode {$/;"	n	namespace:libtorrent
open_read	libowfat/open/open_read.c	/^int open_read(const char *filename) {$/;"	f
open_rw	libowfat/open/open_rw.c	/^int open_rw(const char *filename) {$/;"	f
open_trunc	libowfat/open/open_trunc.c	/^int open_trunc(const char *filename) {$/;"	f
open_write	libowfat/open/open_write.c	/^int open_write(const char *filename) {$/;"	f
openreadclose	libowfat/open/openreadclose.c	/^int openreadclose(const char *fn,stralloc *sa,size_t bufsize)$/;"	f
operation	libtorrent/include/libtorrent/alert_types.hpp	/^		char const* TORRENT_DEPRECATED_MEMBER operation;$/;"	m	struct:libtorrent::final
operation	libtorrent/include/libtorrent/alert_types.hpp	/^		int const TORRENT_DEPRECATED_MEMBER operation;$/;"	m	namespace:libtorrent
operation	libtorrent/include/libtorrent/alert_types.hpp	/^		int const TORRENT_DEPRECATED_MEMBER operation;$/;"	m	struct:libtorrent::final
operation	libtorrent/include/libtorrent/alert_types.hpp	/^		operation_t operation;$/;"	m	struct:libtorrent::final
operation	libtorrent/include/libtorrent/debug.hpp	/^		char const* operation;$/;"	m	struct:libtorrent::wakeup_t
operation	libtorrent/include/libtorrent/error_code.hpp	/^		operation_t operation;$/;"	m	struct:libtorrent::storage_error
operation_t	libtorrent/include/libtorrent/operations.hpp	/^	enum class operation_t : std::uint8_t$/;"	c	namespace:libtorrent
operator !=	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		bool operator!=(listen_socket_handle const& o) const$/;"	f	struct:libtorrent::aux::listen_socket_handle
operator !=	libtorrent/include/libtorrent/entry.hpp	/^	inline bool operator!=(entry const& lhs, entry const& rhs) { return !(lhs == rhs); }$/;"	f	namespace:libtorrent
operator !=	libtorrent/include/libtorrent/index_range.hpp	/^	friend inline bool operator!=(index_iter lhs, index_iter rhs)$/;"	f	struct:libtorrent::index_iter
operator !=	libtorrent/include/libtorrent/netlink.hpp	/^		friend bool operator!=(const netlink& l, const netlink& r)$/;"	f	class:libtorrent::netlink
operator !=	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^	bool operator!=(peer_connection_handle const& o) const$/;"	f	struct:libtorrent::peer_connection_handle
operator !=	libtorrent/include/libtorrent/piece_block.hpp	/^		bool operator!=(piece_block const& b) const$/;"	f	struct:libtorrent::piece_block
operator !=	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool operator!=(piece_pos const& p) const$/;"	f	struct:libtorrent::piece_picker::piece_pos
operator !=	libtorrent/include/libtorrent/span.hpp	/^	inline bool operator!=(span<T> const& lhs, span<U> const& rhs)$/;"	f	namespace:libtorrent
operator !=	libtorrent/include/libtorrent/stack_allocator.hpp	/^		bool operator!=(allocation_slot const& s) const { return m_idx != s.m_idx; }$/;"	f	struct:libtorrent::aux::allocation_slot
operator !=	libtorrent/include/libtorrent/torrent_handle.hpp	/^		bool operator!=(const torrent_handle& h) const$/;"	f	struct:libtorrent::torrent_handle
operator !=	libtorrent/include/libtorrent/union_endpoint.hpp	/^		bool operator!=(union_address const& rh) const$/;"	f	struct:libtorrent::union_address
operator !=	libtorrent/include/libtorrent/units.hpp	/^		constexpr bool operator!=(strong_typedef const& rhs) const { return m_val != rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator ()	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		void operator()(A&&... a) const$/;"	f	struct:libtorrent::aux::allocating_handler
operator ()	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^	void operator()(Args&&... a)$/;"	f	struct:libtorrent::aux::handler_wrapper
operator ()	libtorrent/include/libtorrent/aux_/has_block.hpp	/^		bool operator()(pending_block const& pb) const$/;"	f	struct:libtorrent::aux::has_block
operator ()	libtorrent/include/libtorrent/block_cache.hpp	/^			std::size_t operator()(cached_piece_entry const& p) const$/;"	f	struct:libtorrent::block_cache::hash_value
operator ()	libtorrent/include/libtorrent/entry.hpp	/^			bool operator()(T1 const& rhs, T2 const& lhs) const$/;"	f	struct:libtorrent::aux::strview_less
operator ()	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^	{ void operator()(char* ptr) { return std::free(ptr); } };$/;"	f	struct:libtorrent::aux::free_deleter
operator ()	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	result_type operator()(argument_type const& ip) const$/;"	f	struct:libtorrent::dht::ipv4_hash
operator ()	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	result_type operator()(argument_type const& ip) const$/;"	f	struct:libtorrent::dht::ipv6_hash
operator ()	libtorrent/include/libtorrent/packet_pool.hpp	/^		void operator()(packet* p) const$/;"	f	struct:libtorrent::packet_deleter
operator ()	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool operator()(downloading_piece const& p) const$/;"	f	struct:libtorrent::piece_picker::has_index
operator ()	libtorrent/include/libtorrent/sha1_hash.hpp	/^		std::size_t operator()(libtorrent::sha1_hash const& k) const$/;"	f	struct:std::hash
operator ()	libtorrent/include/libtorrent/torrent_handle.hpp	/^		std::size_t operator()(libtorrent::torrent_handle const& th) const$/;"	f	struct:std::hash
operator ()	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(address const& lhs, torrent_peer const* rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(string_view lhs, torrent_peer const* rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(torrent_peer const* lhs, address const& rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(torrent_peer const* lhs, string_view rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(torrent_peer const* lhs, torrent_peer const* rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::size_t operator()(libtorrent::torrent_status const& ts) const$/;"	f	struct:std::hash
operator ()	libtorrent/include/libtorrent/units.hpp	/^		result_type operator()(argument_type const& s) const$/;"	f	struct:std::hash
operator *	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^		char const* operator*() const { return m_ptr; }$/;"	f	struct:libtorrent::aux::string_ptr
operator *	libtorrent/include/libtorrent/copy_ptr.hpp	/^		T const& operator*() const { return *m_ptr; }$/;"	f	struct:libtorrent::copy_ptr
operator *	libtorrent/include/libtorrent/copy_ptr.hpp	/^		T& operator*() { return *m_ptr; }$/;"	f	struct:libtorrent::copy_ptr
operator *	libtorrent/include/libtorrent/index_range.hpp	/^	Index operator*() const { return m_idx; }$/;"	f	struct:libtorrent::index_iter
operator +	libtorrent/include/libtorrent/units.hpp	/^		friend strong_typedef operator+(diff_type lhs, strong_typedef rhs)$/;"	f	struct:libtorrent::aux::strong_typedef
operator +	libtorrent/include/libtorrent/units.hpp	/^		friend strong_typedef operator+(strong_typedef lhs, diff_type rhs)$/;"	f	struct:libtorrent::aux::strong_typedef
operator ++	libtorrent/include/libtorrent/index_range.hpp	/^	index_iter operator++()$/;"	f	struct:libtorrent::index_iter
operator ++	libtorrent/include/libtorrent/kademlia/types.hpp	/^		sequence_number& operator++()$/;"	f	struct:libtorrent::dht::sequence_number
operator ++	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef operator++(int) & { return strong_typedef{m_val++}; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator ++	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef& operator++() { ++m_val; return *this; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator +=	libtorrent/include/libtorrent/stat.hpp	/^		void operator+=(const stat& s)$/;"	f	class:libtorrent::stat
operator +=	libtorrent/include/libtorrent/stat.hpp	/^		void operator+=(stat_channel const& s)$/;"	f	class:libtorrent::stat_channel
operator +=	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef& operator+=(diff_type rhs) &$/;"	f	struct:libtorrent::aux::strong_typedef
operator -	libtorrent/include/libtorrent/units.hpp	/^		friend diff_type operator-(strong_typedef lhs, strong_typedef rhs)$/;"	f	struct:libtorrent::aux::strong_typedef
operator -	libtorrent/include/libtorrent/units.hpp	/^		friend strong_typedef operator-(strong_typedef lhs, diff_type rhs)$/;"	f	struct:libtorrent::aux::strong_typedef
operator --	libtorrent/include/libtorrent/index_range.hpp	/^	index_iter operator--()$/;"	f	struct:libtorrent::index_iter
operator --	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef operator--(int) & { return strong_typedef{m_val--}; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator --	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef& operator--() { --m_val; return *this; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator -=	libtorrent/include/libtorrent/units.hpp	/^		strong_typedef& operator-=(diff_type rhs) &$/;"	f	struct:libtorrent::aux::strong_typedef
operator ->	libtorrent/include/libtorrent/copy_ptr.hpp	/^		T const* operator->() const { return m_ptr.get(); }$/;"	f	struct:libtorrent::copy_ptr
operator ->	libtorrent/include/libtorrent/copy_ptr.hpp	/^		T* operator->() { return m_ptr.get(); }$/;"	f	struct:libtorrent::copy_ptr
operator <	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		bool operator<(listen_socket_handle const& o) const$/;"	f	struct:libtorrent::aux::listen_socket_handle
operator <	libtorrent/include/libtorrent/ip_filter.hpp	/^			bool operator<(Addr const& a) const { return start < a; }$/;"	f	struct:libtorrent::detail::filter_impl::range
operator <	libtorrent/include/libtorrent/ip_filter.hpp	/^			bool operator<(range const& r) const { return start < r.start; }$/;"	f	struct:libtorrent::detail::filter_impl::range
operator <	libtorrent/include/libtorrent/ip_voter.hpp	/^			bool operator<(external_ip_t const& rhs) const$/;"	f	struct:libtorrent::ip_voter::external_ip_t
operator <	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	bool operator<(node_entry const& rhs) const$/;"	f	struct:libtorrent::dht::node_entry
operator <	libtorrent/include/libtorrent/kademlia/types.hpp	/^		bool operator<(sequence_number rhs) const$/;"	f	struct:libtorrent::dht::sequence_number
operator <	libtorrent/include/libtorrent/lazy_entry.hpp	/^		bool operator<(pascal_string const& rhs) const$/;"	f	struct:libtorrent::pascal_string
operator <	libtorrent/include/libtorrent/peer.hpp	/^		bool operator<(const peer_entry& p) const$/;"	f	struct:libtorrent::peer_entry
operator <	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^	bool operator<(peer_connection_handle const& o) const$/;"	f	struct:libtorrent::peer_connection_handle
operator <	libtorrent/include/libtorrent/piece_block.hpp	/^		bool operator<(piece_block const& b) const$/;"	f	struct:libtorrent::piece_block
operator <	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool operator<(downloading_piece const& rhs) const { return index < rhs.index; }$/;"	f	struct:libtorrent::piece_picker::downloading_piece
operator <	libtorrent/include/libtorrent/torrent.hpp	/^		bool operator<(time_critical_piece const& rhs) const$/;"	f	struct:libtorrent::time_critical_piece
operator <	libtorrent/include/libtorrent/torrent_handle.hpp	/^		bool operator<(const torrent_handle& h) const$/;"	f	struct:libtorrent::torrent_handle
operator <	libtorrent/include/libtorrent/torrent_info.hpp	/^		bool operator<(web_seed_entry const& e) const$/;"	f	struct:libtorrent::web_seed_entry
operator <	libtorrent/include/libtorrent/units.hpp	/^		constexpr bool operator<(strong_typedef const& rhs) const { return m_val < rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator <	libtorrent/include/libtorrent/upnp.hpp	/^		bool operator<(rootdevice const& rhs) const$/;"	f	struct:libtorrent::final::rootdevice
operator <<	libtorrent/include/libtorrent/entry.hpp	/^	inline std::ostream& operator<<(std::ostream& os, const entry& e)$/;"	f	namespace:libtorrent
operator <<	libtorrent/include/libtorrent/flags.hpp	/^	std::ostream& operator<<(std::ostream& os, bitfield_flag<T, Tag> val)$/;"	f	namespace:libtorrent
operator <<	libtorrent/include/libtorrent/units.hpp	/^	std::ostream& operator<<(std::ostream& os, strong_typedef<T, Tag> val)$/;"	f	namespace:libtorrent::aux
operator <=	libtorrent/include/libtorrent/ip_filter.hpp	/^inline bool operator<=(address const& lhs$/;"	f	namespace:libtorrent
operator <=	libtorrent/include/libtorrent/kademlia/types.hpp	/^		bool operator<=(sequence_number rhs) const$/;"	f	struct:libtorrent::dht::sequence_number
operator <=	libtorrent/include/libtorrent/units.hpp	/^		constexpr bool operator<=(strong_typedef const& rhs) const { return m_val <= rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator =	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^		string_ptr& operator=(string_ptr&& rhs)$/;"	f	struct:libtorrent::aux::string_ptr
operator =	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		crypt_hash& operator=(crypt_hash const& h) &$/;"	f	struct:libtorrent::aux::crypt_hash
operator =	libtorrent/include/libtorrent/bitfield.hpp	/^		bitfield& operator=(bitfield const& rhs)$/;"	f	struct:libtorrent::bitfield
operator =	libtorrent/include/libtorrent/bitfield.hpp	/^		typed_bitfield& operator=(typed_bitfield const& rhs)$/;"	f	namespace:libtorrent
operator =	libtorrent/include/libtorrent/buffer.hpp	/^	buffer& operator=(buffer&& b)$/;"	f	class:libtorrent::buffer
operator =	libtorrent/include/libtorrent/copy_ptr.hpp	/^		copy_ptr& operator=(copy_ptr const& p) &$/;"	f	struct:libtorrent::copy_ptr
operator =	libtorrent/include/libtorrent/entry.hpp	/^		entry& operator=(U v) &$/;"	f	class:libtorrent::entry
operator =	libtorrent/include/libtorrent/kademlia/types.hpp	/^		sequence_number& operator=(sequence_number rhs)$/;"	f	struct:libtorrent::dht::sequence_number
operator =	libtorrent/include/libtorrent/netlink.hpp	/^		basic_nl_endpoint& operator=(basic_nl_endpoint const& other)$/;"	f	class:libtorrent::basic_nl_endpoint
operator =	libtorrent/include/libtorrent/union_endpoint.hpp	/^		union_address& operator=(address const& a) &$/;"	f	struct:libtorrent::union_address
operator =	libtorrent/include/libtorrent/union_endpoint.hpp	/^		union_endpoint& operator=(tcp::endpoint const& ep) &$/;"	f	struct:libtorrent::union_endpoint
operator =	libtorrent/include/libtorrent/union_endpoint.hpp	/^		union_endpoint& operator=(udp::endpoint const& ep) &$/;"	f	struct:libtorrent::union_endpoint
operator =	libtorrent/include/libtorrent/utp_stream.hpp	/^		big_endian_int& operator=(T v)$/;"	f	struct:libtorrent::big_endian_int
operator ==	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		bool operator==(listen_socket_handle const& o) const$/;"	f	struct:libtorrent::aux::listen_socket_handle
operator ==	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool operator==(listen_endpoint_t const& o) const$/;"	f	struct:libtorrent::aux::listen_endpoint_t
operator ==	libtorrent/include/libtorrent/block_cache.hpp	/^		bool operator==(cached_piece_entry const& rhs) const$/;"	f	struct:libtorrent::cached_piece_entry
operator ==	libtorrent/include/libtorrent/index_range.hpp	/^	friend inline bool operator==(index_iter lhs, index_iter rhs)$/;"	f	struct:libtorrent::index_iter
operator ==	libtorrent/include/libtorrent/ip_filter.hpp	/^	friend bool operator==(ip_range const& lhs, ip_range const& rhs)$/;"	f	struct:libtorrent::ip_range
operator ==	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	bool operator==(ip_set const& rh)$/;"	f	struct:libtorrent::dht::ip_set
operator ==	libtorrent/include/libtorrent/kademlia/types.hpp	/^		bool operator==(public_key const& rhs) const$/;"	f	struct:libtorrent::dht::public_key
operator ==	libtorrent/include/libtorrent/kademlia/types.hpp	/^		bool operator==(secret_key const& rhs) const$/;"	f	struct:libtorrent::dht::secret_key
operator ==	libtorrent/include/libtorrent/kademlia/types.hpp	/^		bool operator==(sequence_number const& rhs) const$/;"	f	struct:libtorrent::dht::sequence_number
operator ==	libtorrent/include/libtorrent/kademlia/types.hpp	/^		bool operator==(signature const& rhs) const$/;"	f	struct:libtorrent::dht::signature
operator ==	libtorrent/include/libtorrent/netlink.hpp	/^		friend bool operator==(const netlink& l, const netlink& r)$/;"	f	class:libtorrent::netlink
operator ==	libtorrent/include/libtorrent/peer.hpp	/^		bool operator==(const peer_entry& p) const$/;"	f	struct:libtorrent::peer_entry
operator ==	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		friend bool operator==(peer_class_type_filter const& lhs$/;"	f	namespace:libtorrent
operator ==	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool operator==(pending_block const& b) const$/;"	f	struct:libtorrent::pending_block
operator ==	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^	bool operator==(peer_connection_handle const& o) const$/;"	f	struct:libtorrent::peer_connection_handle
operator ==	libtorrent/include/libtorrent/peer_request.hpp	/^		bool operator==(peer_request const& r) const$/;"	f	struct:libtorrent::peer_request
operator ==	libtorrent/include/libtorrent/piece_block.hpp	/^		bool operator==(piece_block const& b) const$/;"	f	struct:libtorrent::piece_block
operator ==	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool operator==(piece_pos const& p) const$/;"	f	struct:libtorrent::piece_picker::piece_pos
operator ==	libtorrent/include/libtorrent/span.hpp	/^	inline bool operator==(span<T> const& lhs, span<U> const& rhs)$/;"	f	namespace:libtorrent
operator ==	libtorrent/include/libtorrent/stack_allocator.hpp	/^		bool operator==(allocation_slot const& s) const { return m_idx == s.m_idx; }$/;"	f	struct:libtorrent::aux::allocation_slot
operator ==	libtorrent/include/libtorrent/string_util.hpp	/^		friend bool operator==(listen_interface_t const& lhs, listen_interface_t const& rhs)$/;"	f	struct:libtorrent::listen_interface_t
operator ==	libtorrent/include/libtorrent/torrent_handle.hpp	/^		bool operator==(const torrent_handle& h) const$/;"	f	struct:libtorrent::torrent_handle
operator ==	libtorrent/include/libtorrent/torrent_info.hpp	/^		bool operator==(web_seed_entry const& e) const$/;"	f	struct:libtorrent::web_seed_entry
operator ==	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool operator==(torrent_status const& st) const$/;"	f	struct:libtorrent::torrent_status
operator ==	libtorrent/include/libtorrent/union_endpoint.hpp	/^		bool operator==(union_address const& rh) const$/;"	f	struct:libtorrent::union_address
operator ==	libtorrent/include/libtorrent/units.hpp	/^		constexpr bool operator==(strong_typedef const& rhs) const { return m_val == rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator >	libtorrent/include/libtorrent/kademlia/types.hpp	/^		bool operator>(sequence_number rhs) const$/;"	f	struct:libtorrent::dht::sequence_number
operator >	libtorrent/include/libtorrent/units.hpp	/^		constexpr bool operator>(strong_typedef const& rhs) const { return m_val > rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator >=	libtorrent/include/libtorrent/units.hpp	/^		constexpr bool operator>=(strong_typedef const& rhs) const { return m_val >= rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator T	libtorrent/include/libtorrent/utp_stream.hpp	/^		operator T() const$/;"	f	struct:libtorrent::big_endian_int
operator UnderlyingType	libtorrent/include/libtorrent/units.hpp	/^		constexpr explicit operator UnderlyingType() const { return m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator UnderlyingType	libtorrent/include/libtorrent/units.hpp	/^		constexpr operator UnderlyingType() const { return m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator []	libtorrent/include/libtorrent/bitfield.hpp	/^		bool operator[](IndexType const index) const$/;"	f	namespace:libtorrent
operator []	libtorrent/include/libtorrent/buffer.hpp	/^	char const& operator[](difference_type const i) const { TORRENT_ASSERT(i < size()); return m_begin[i]; }$/;"	f	class:libtorrent::buffer
operator []	libtorrent/include/libtorrent/buffer.hpp	/^	char& operator[](index_type const i) { TORRENT_ASSERT(i < size()); return m_begin[i]; }$/;"	f	class:libtorrent::buffer
operator []	libtorrent/include/libtorrent/span.hpp	/^		T& operator[](index_type const idx) const$/;"	f	struct:libtorrent::span
operator []	libtorrent/include/libtorrent/stat.hpp	/^		stat_channel const& operator[](int i) const$/;"	f	class:libtorrent::stat
operator address	libtorrent/include/libtorrent/union_endpoint.hpp	/^		operator address() const$/;"	f	struct:libtorrent::union_address
operator bool	libtorrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		explicit operator bool() const { return !m_sock.expired(); }$/;"	f	struct:libtorrent::aux::listen_socket_handle
operator bool	libtorrent/include/libtorrent/copy_ptr.hpp	/^		explicit operator bool() const { return m_ptr.get() != nullptr; }$/;"	f	struct:libtorrent::copy_ptr
operator bool	libtorrent/include/libtorrent/disk_interface.hpp	/^		explicit operator bool() const { return m_disk_io != nullptr; }$/;"	f	struct:libtorrent::storage_holder
operator bool	libtorrent/include/libtorrent/error_code.hpp	/^		explicit operator bool() const { return ec.value() != 0; }$/;"	f	struct:libtorrent::storage_error
operator int	libtorrent/include/libtorrent/flags.hpp	/^	explicit constexpr operator int() const { return m_bit_idx; }$/;"	f	struct:libtorrent::bit_t
operator storage_index_t	libtorrent/include/libtorrent/disk_interface.hpp	/^		operator storage_index_t() const$/;"	f	struct:libtorrent::storage_holder
operator tcp::endpoint	libtorrent/include/libtorrent/union_endpoint.hpp	/^		operator tcp::endpoint() const { return tcp::endpoint(addr, port); }$/;"	f	struct:libtorrent::union_endpoint
operator udp::endpoint	libtorrent/include/libtorrent/union_endpoint.hpp	/^		operator udp::endpoint() const { return udp::endpoint(addr, port); }$/;"	f	struct:libtorrent::union_endpoint
optimistic_disconnect	libtorrent/include/libtorrent/error_code.hpp	/^			optimistic_disconnect,$/;"	e	enum:libtorrent::errors::error_code_enum
optimistic_disk_retry	libtorrent/include/libtorrent/settings_pack.hpp	/^			optimistic_disk_retry,$/;"	e	enum:libtorrent::settings_pack::int_types
optimistic_unchoke	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t optimistic_unchoke = 11_bit;$/;"	m	struct:libtorrent::peer_info
optimistic_unchoke_counter	libtorrent/include/libtorrent/session_status.hpp	/^		int optimistic_unchoke_counter;$/;"	m	struct:libtorrent::session_status
optimistic_unchoke_feature	libtorrent/include/libtorrent/extensions.hpp	/^		static constexpr feature_flags_t optimistic_unchoke_feature = 1_bit;$/;"	m	struct:libtorrent::plugin
optimistic_unchoke_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			optimistic_unchoke_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
optimistically_unchoked	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool optimistically_unchoked:1;$/;"	m	struct:libtorrent::torrent_peer
optimize	libtorrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t TORRENT_DEPRECATED_MEMBER optimize = 0_bit;$/;"	m	struct:libtorrent::create_torrent
optimize_alignment	libtorrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t optimize_alignment = 0_bit;$/;"	m	struct:libtorrent::create_torrent
optional	libtorrent/include/libtorrent/kademlia/msg.hpp	/^		optional = 1,$/;"	e	enum:libtorrent::dht::key_desc_t::__anon64
or	libowfat/io_internal.h	/^  OVERLAPPED or,ow,os;	\/* overlapped for read+accept, write+connect, sendfile *\/$/;"	m	struct:__anon40
orig_files	libtorrent/include/libtorrent/torrent_info.hpp	/^		file_storage const& orig_files() const$/;"	f	class:libtorrent::torrent_info
original_port	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		int original_port = 0;$/;"	m	struct:libtorrent::aux::listen_socket_t
os	libowfat/io_internal.h	/^  OVERLAPPED or,ow,os;	\/* overlapped for read+accept, write+connect, sendfile *\/$/;"	m	struct:__anon40
ot_failed_request_counts	src/ot_stats.c	/^static unsigned long long ot_failed_request_counts[CODE_HTTPERROR_COUNT];$/;"	v	file:
ot_failed_request_names	src/ot_stats.c	/^static char *             ot_failed_request_names[] = { "302 Redirect", "400 Parse Error", "400 Invalid Parameter", "400 Invalid Parameter (compact=0)", "400 Not Modest", "402 Payment Required", "403 Access Denied", "404 Not found", "500 Internal Server Error" };$/;"	v	file:
ot_full_scrape_count	src/ot_stats.c	/^static unsigned long long ot_full_scrape_count = 0;$/;"	v	file:
ot_full_scrape_request_count	src/ot_stats.c	/^static unsigned long long ot_full_scrape_request_count = 0;$/;"	v	file:
ot_full_scrape_size	src/ot_stats.c	/^static unsigned long long ot_full_scrape_size = 0;$/;"	v	file:
ot_hash	include/trackerlogic.h	/^typedef uint8_t ot_hash[20];$/;"	t
ot_ip6	include/trackerlogic.h	/^typedef char    ot_ip6[16];$/;"	t
ot_keywords	include/scan_urlencoded_query.h	/^} ot_keywords;$/;"	t	typeref:struct:__anon18
ot_log	include/ot_accesslist.h	/^struct ot_log {$/;"	s
ot_log	include/ot_accesslist.h	/^typedef struct ot_log ot_log;$/;"	t	typeref:struct:ot_log
ot_net	include/trackerlogic.h	/^                ot_net;$/;"	t	typeref:struct:__anon20
ot_overall_completed	src/ot_stats.c	/^static unsigned long long ot_overall_completed = 0;$/;"	v	file:
ot_overall_stall_count	src/ot_stats.c	/^static unsigned long long ot_overall_stall_count;$/;"	v	file:
ot_overall_sync_count	src/ot_stats.c	/^static unsigned long long ot_overall_sync_count;$/;"	v	file:
ot_overall_tcp_connections	src/ot_stats.c	/^static unsigned long long ot_overall_tcp_connections = 0;$/;"	v	file:
ot_overall_tcp_connects	src/ot_stats.c	/^static unsigned long long ot_overall_tcp_connects = 0;$/;"	v	file:
ot_overall_tcp_successfulannounces	src/ot_stats.c	/^static unsigned long long ot_overall_tcp_successfulannounces = 0;$/;"	v	file:
ot_overall_tcp_successfulscrapes	src/ot_stats.c	/^static unsigned long long ot_overall_tcp_successfulscrapes = 0;$/;"	v	file:
ot_overall_udp_connectionidmissmatches	src/ot_stats.c	/^static unsigned long long ot_overall_udp_connectionidmissmatches = 0;$/;"	v	file:
ot_overall_udp_connections	src/ot_stats.c	/^static unsigned long long ot_overall_udp_connections = 0;$/;"	v	file:
ot_overall_udp_connects	src/ot_stats.c	/^static unsigned long long ot_overall_udp_connects = 0;$/;"	v	file:
ot_overall_udp_successfulannounces	src/ot_stats.c	/^static unsigned long long ot_overall_udp_successfulannounces = 0;$/;"	v	file:
ot_overall_udp_successfulscrapes	src/ot_stats.c	/^static unsigned long long ot_overall_udp_successfulscrapes = 0;$/;"	v	file:
ot_peer	include/trackerlogic.h	/^} ot_peer;$/;"	t	typeref:struct:__anon22
ot_peerlist	include/trackerlogic.h	/^struct ot_peerlist {$/;"	s
ot_peerlist	include/trackerlogic.h	/^typedef struct ot_peerlist ot_peerlist;$/;"	t	typeref:struct:ot_peerlist
ot_permissions	include/ot_accesslist.h	/^} ot_permissions;$/;"	t	typeref:enum:__anon11
ot_proxymap	src/ot_accesslist.c	/^} ot_proxymap;$/;"	t	typeref:struct:__anon1	file:
ot_record	src/ot_stats.c	/^typedef struct { size_t val; ot_torrent * torrent; } ot_record;$/;"	t	typeref:struct:__anon6	file:
ot_renewed	src/ot_stats.c	/^static unsigned long long ot_renewed[OT_PEER_TIMEOUT];$/;"	v	file:
ot_scrape_log	src/ot_http.c	/^typedef struct { ot_ip6 ip; ot_time last_fullscrape; } ot_scrape_log;$/;"	t	typeref:struct:__anon3	file:
ot_start_time	src/ot_stats.c	/^static time_t ot_start_time;$/;"	v	file:
ot_status_event	include/ot_stats.h	/^} ot_status_event;$/;"	t	typeref:enum:__anon14
ot_task	src/ot_mutex.c	/^struct ot_task {$/;"	s	file:
ot_taskid	include/ot_mutex.h	/^typedef unsigned long ot_taskid;$/;"	t
ot_tasktype	include/ot_mutex.h	/^} ot_tasktype;$/;"	t	typeref:enum:__anon13
ot_time	include/trackerlogic.h	/^typedef time_t  ot_time;$/;"	t
ot_torrent	include/trackerlogic.h	/^} ot_torrent;$/;"	t	typeref:struct:__anon23
ot_try_bind	src/opentracker.c	/^static int64_t ot_try_bind( ot_ip6 ip, uint16_t port, PROTO_FLAG proto ) {$/;"	f	file:
ot_try_bind	src/proxy.c	/^static int64_t ot_try_bind( ot_ip6 ip, uint16_t port ) {$/;"	f	file:
ot_vector	include/ot_vector.h	/^} ot_vector;$/;"	t	typeref:struct:__anon17
ot_workstruct	include/trackerlogic.h	/^struct ot_workstruct {$/;"	s
other	libtorrent/include/libtorrent/netlink.hpp	/^		basic_nl_endpoint(basic_nl_endpoint const& other) = default;$/;"	m	class:libtorrent::basic_nl_endpoint
otherbits	libowfat/critbit/critbit.c	/^  uint8_t otherbits;$/;"	m	struct:__anon27	file:
our_peer_id	libtorrent/include/libtorrent/peer_connection.hpp	/^		peer_id our_peer_id;$/;"	m	struct:libtorrent::peer_connection_args
out	libowfat/dns/dns_random.c	/^static uint32 out[8];$/;"	v	file:
out_enc_policy	libtorrent/include/libtorrent/session_settings.hpp	/^		std::uint8_t out_enc_policy;$/;"	m	struct:libtorrent::pe_settings
out_enc_policy	libtorrent/include/libtorrent/settings_pack.hpp	/^			out_enc_policy,$/;"	e	enum:libtorrent::settings_pack::int_types
outbuf	include/trackerlogic.h	/^  char    *outbuf;$/;"	m	struct:ot_workstruct
outdata	src/proxy.c	/^  io_batch outdata;         \/* The iobatch containing our sync data *\/$/;"	m	struct:__anon10	file:
outdir	Makefile	/^outdir := $(TOP_DIR)\/bin$/;"	m
outdir	Makefile	/^outdir = .\/bin$/;"	m
outgoing_interfaces	libtorrent/include/libtorrent/settings_pack.hpp	/^			outgoing_interfaces,$/;"	e	enum:libtorrent::settings_pack::string_types
outgoing_message	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^			outgoing_message$/;"	e	enum:libtorrent::dht::dht_logger::message_direction_t
outgoing_port	libtorrent/include/libtorrent/settings_pack.hpp	/^			outgoing_port,$/;"	e	enum:libtorrent::settings_pack::int_types
outgoing_socket	libtorrent/include/libtorrent/tracker_manager.hpp	/^		aux::listen_socket_handle outgoing_socket;$/;"	m	struct:libtorrent::tracker_request
outleft	libowfat/dns/dns_random.c	/^static int outleft = 0;$/;"	v	file:
outstanding_bytes	libtorrent/include/libtorrent/peer_connection.hpp	/^		int outstanding_bytes() const { return m_outstanding_bytes; }$/;"	f	class:libtorrent::peer_connection
outstanding_disk_buffer_limit_reached	libtorrent/include/libtorrent/alert_types.hpp	/^			outstanding_disk_buffer_limit_reached,$/;"	e	enum:libtorrent::final::performance_warning_t
outstanding_flush	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t outstanding_flush:1;$/;"	m	struct:libtorrent::cached_piece_entry
outstanding_hash_check	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t outstanding_hash_check:1;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
outstanding_read	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t outstanding_read:1;$/;"	m	struct:libtorrent::cached_piece_entry
outstanding_request	libtorrent/include/libtorrent/natpmp.hpp	/^		bool outstanding_request = false;$/;"	m	struct:libtorrent::natpmp::mapping_t
outstanding_request_limit_reached	libtorrent/include/libtorrent/alert_types.hpp	/^			outstanding_request_limit_reached,$/;"	e	enum:libtorrent::final::performance_warning_t
overflow	libtorrent/include/libtorrent/bdecode.hpp	/^		overflow,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
overflow	libtorrent/include/libtorrent/error_code.hpp	/^			overflow,$/;"	e	enum:libtorrent::errors::error_code_enum
override	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	namespace:libtorrent
override	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	struct:libtorrent::peer_alert
override	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	struct:libtorrent::torrent_alert
override	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	struct:libtorrent::tracker_alert
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, address const& ip, address const& source) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, address const& remote_address, error_code& ec) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, dht::msg const& request, entry& response) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, error_code& ec) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, int channel, bandwidth_channel** dst, int m) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, ip_source_t source_type, address const& source) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, peer_connection* pc) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, portmap_transport transport) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, seconds32 retry_interval) override;$/;"	m	struct:libtorrent::aux::tracker_logger
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, sha1_hash const& sent_target, udp::endpoint const& ep) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, std::string const& str) override;$/;"	m	struct:libtorrent::aux::tracker_logger
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, std::weak_ptr<request_callback> c) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, struct tracker_response const& resp) override;$/;"	m	struct:libtorrent::aux::tracker_logger
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				, udp::endpoint const& node) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				sha1_hash const& info_hash, sha1_hash const& xor_mask) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				std::string const& collection) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bandwidth_manager* get_bandwidth_manager(int channel) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool any_torrent_has_peer(peer_connection const* p) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool has_connection(peer_connection* p) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool has_dht() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool has_lsd() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool has_peer(peer_connection const* p) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool ignore_unchoke_slots_set(peer_class_set const& set) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool preemptive_unchoke() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log() const override;$/;"	m	struct:libtorrent::aux::tracker_logger
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log(module_t m) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log_lsd() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log_portmap(portmap_transport transport) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			bool verify_queue_position(torrent const* t, queue_position_t pos) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			external_ip external_address() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int external_udp_port(address const& local_address) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int get_listen_port(transport ssl, aux::listen_socket_handle const& s) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int listen_port(transport ssl, address const& local_addr) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int use_quota_overhead(peer_class_set& set, int amount_down, int amount_up) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			port_filter const& get_port_filter() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			proxy_settings i2p_proxy() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			proxy_settings proxy() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::uint16_t listen_port() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::uint16_t ssl_listen_port() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::weak_ptr<torrent> find_disconnect_candidate_torrent() const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			std::weak_ptr<torrent> find_torrent(sha1_hash const& info_hash) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void add_dht_node(udp::endpoint const& n) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void add_obfuscated_hash(sha1_hash const& obfuscated, std::weak_ptr<torrent> const& t) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void announce(sha1_hash const& ih, address const& addr, int port) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void announce_lsd(sha1_hash const& ih, int port) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void apply_settings_pack(std::shared_ptr<settings_pack> pack) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void ban_ip(address addr) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void close_connection(peer_connection* p) noexcept override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void deferred_submit_jobs() override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void get_peers(sha1_hash const& ih) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void insert_peer(std::shared_ptr<peer_connection> const& c) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void log_lsd(char const* msg) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void log_portmap(portmap_transport transport, char const* msg) const override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void on_error(error_code const& ec) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void on_exception(std::exception const& e) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void on_lsd_peer(tcp::endpoint const& peer, sha1_hash const& ih) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void prioritize_connections(std::weak_ptr<torrent> t) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void prioritize_dht(std::weak_ptr<torrent> t) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void received_buffer(int size) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void received_bytes(int bytes_payload, int bytes_protocol) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void received_synack(bool ipv6) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void remove_torrent(torrent_handle const& h, remove_flags_t options) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void remove_torrent_impl(std::shared_ptr<torrent> tptr, remove_flags_t options) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void sent_buffer(int size) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void sent_bytes(int bytes_payload, int bytes_protocol) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void sent_syn(bool ipv6) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void set_peer_classes(peer_class_set* s, address const& a, int st) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void set_queue_position(torrent* t, queue_position_t p) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void trancieve_ip_packet(int bytes, bool ipv6) override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void trigger_auto_manage() override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			~session_impl() override;$/;"	m	struct:libtorrent::aux::final
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			, std::size_t bytes_transferred) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		bool in_handshake() const override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		hit_send_barrier(span<span<char>> iovec) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		piece_block_progress downloading_piece_progress() const override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void get_specific_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void on_connected() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void on_metadata() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void start() override;$/;"	m	class:libtorrent::bt_peer_connection
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_allow_fast(piece_index_t piece) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_bitfield() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_cancel(peer_request const& r) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_choke() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_dont_have(piece_index_t index) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_have(piece_index_t index) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_interested() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_keepalive() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_not_interested() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_piece(peer_request const& r, disk_buffer_holder buffer) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_reject_request(peer_request const&) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_request(peer_request const& r) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_suggest(piece_index_t piece) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_unchoke() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_upload_only(bool enabled) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		~bt_peer_connection() override;$/;"	m	class:libtorrent::bt_peer_connection
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^				, disk_job_flags_t flags, storage_error const& se)> handler, disk_job_flags_t flags = {}) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, bool no_pieces, bool session) const override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, disk_job_flags_t flags = {}) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void()> handler = std::function<void()>()) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void()> handler) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(piece_index_t)> handler) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(piece_index_t, sha1_hash const&, storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(status_t, std::string const&, storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(status_t, storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(std::string const&, file_index_t, storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(storage_error const&, aux::vector<download_priority_t, file_index_t>)> handler) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^			, storage_params p, std::shared_ptr<void> const&) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<open_file_state> get_status(storage_index_t) const override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		storage_interface* get_torrent(storage_index_t) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		void clear_piece(storage_index_t storage, piece_index_t index) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		void reclaim_blocks(span<aux::block_cache_reference> ref) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		void remove_torrent(storage_index_t) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		void submit_jobs() override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		void update_stats_counters(counters& c) const override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/http_seed_connection.hpp	/^			, disconnect_severity_t error = peer_connection_interface::normal) override;$/;"	m	class:libtorrent::http_seed_connection
override	libtorrent/include/libtorrent/http_seed_connection.hpp	/^			, std::size_t bytes_transferred) override;$/;"	m	class:libtorrent::http_seed_connection
override	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		piece_block_progress downloading_piece_progress() const override;$/;"	m	class:libtorrent::http_seed_connection
override	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		void get_specific_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::http_seed_connection
override	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		void on_connected() override;$/;"	m	class:libtorrent::http_seed_connection
override	libtorrent/include/libtorrent/http_seed_connection.hpp	/^		void write_request(peer_request const& r) override;$/;"	m	class:libtorrent::http_seed_connection
override	libtorrent/include/libtorrent/http_tracker_connection.hpp	/^		void close() override;$/;"	m	class:libtorrent::http_tracker_connection
override	libtorrent/include/libtorrent/http_tracker_connection.hpp	/^		void start() override;$/;"	m	class:libtorrent::http_tracker_connection
override	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		bool has_quota() override;$/;"	m	struct:libtorrent::dht::final
override	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		bool send_packet(aux::listen_socket_handle const& s, entry& e, udp::endpoint const& addr) override;$/;"	m	struct:libtorrent::dht::final
override	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^		, node_id const& id) override;$/;"	m	struct:libtorrent::dht::find_data
override	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^	char const* name() const override;$/;"	m	struct:libtorrent::dht::find_data
override	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^	void done() override;$/;"	m	struct:libtorrent::dht::find_data
override	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^	void reply(msg const&) override;$/;"	m	struct:libtorrent::dht::find_data_observer
override	libtorrent/include/libtorrent/kademlia/find_data.hpp	/^	void start() override;$/;"	m	struct:libtorrent::dht::find_data
override	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^		, node_id const& id) override;$/;"	m	class:libtorrent::dht::get_item
override	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	class:libtorrent::dht::get_item
override	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^	char const* name() const override;$/;"	m	class:libtorrent::dht::get_item
override	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^	void done() override;$/;"	m	class:libtorrent::dht::get_item
override	libtorrent/include/libtorrent/kademlia/get_item.hpp	/^	void reply(msg const&) override;$/;"	m	class:libtorrent::dht::get_item_observer
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^		, node_id const& id) override;$/;"	m	struct:libtorrent::dht::get_peers
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^		node_id const& id) override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	struct:libtorrent::dht::get_peers
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	char const* name() const override;$/;"	m	struct:libtorrent::dht::get_peers
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	char const* name() const override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	void done() override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	void reply(msg const&) override;$/;"	m	struct:libtorrent::dht::get_peers_observer
override	libtorrent/include/libtorrent/kademlia/get_peers.hpp	/^	void reply(msg const&) override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers_observer
override	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	struct:libtorrent::dht::put_data
override	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	char const* name() const override;$/;"	m	struct:libtorrent::dht::put_data
override	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	void done() override;$/;"	m	struct:libtorrent::dht::put_data
override	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	void start() override;$/;"	m	struct:libtorrent::dht::put_data
override	libtorrent/include/libtorrent/kademlia/refresh.hpp	/^		, node_id const& id) override;$/;"	m	class:libtorrent::dht::bootstrap
override	libtorrent/include/libtorrent/kademlia/refresh.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	class:libtorrent::dht::bootstrap
override	libtorrent/include/libtorrent/kademlia/refresh.hpp	/^	char const* name() const override;$/;"	m	class:libtorrent::dht::bootstrap
override	libtorrent/include/libtorrent/kademlia/refresh.hpp	/^	void done() override;$/;"	m	class:libtorrent::dht::bootstrap
override	libtorrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^	char const* name() const override;$/;"	m	class:libtorrent::dht::final
override	libtorrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^	void reply(msg const&) override;$/;"	m	class:libtorrent::dht::final
override	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	void reply(msg const&) override;$/;"	m	struct:libtorrent::dht::traversal_observer
override	libtorrent/include/libtorrent/pe_crypto.hpp	/^		encrypt(span<span<char>> buf) override;$/;"	m	struct:libtorrent::rc4_handler
override	libtorrent/include/libtorrent/pe_crypto.hpp	/^		std::tuple<int, int, int> decrypt(span<span<char>> buf) override;$/;"	m	struct:libtorrent::rc4_handler
override	libtorrent/include/libtorrent/pe_crypto.hpp	/^		void set_incoming_key(span<char const> key) override;$/;"	m	struct:libtorrent::rc4_handler
override	libtorrent/include/libtorrent/pe_crypto.hpp	/^		void set_outgoing_key(span<char const> key) override;$/;"	m	struct:libtorrent::rc4_handler
override	libtorrent/include/libtorrent/peer_connection.hpp	/^			, operation_t op, disconnect_severity_t = peer_connection_interface::normal) override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/peer_connection.hpp	/^		void add_stat(std::int64_t downloaded, std::int64_t uploaded) override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/peer_connection.hpp	/^		void assign_bandwidth(int channel, int amount) override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/peer_connection.hpp	/^		void get_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/peer_connection.hpp	/^		void on_disk() override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/peer_connection.hpp	/^		void on_error(error_code const& ec) override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/peer_connection.hpp	/^		void on_exception(std::exception const& e) override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/peer_connection.hpp	/^		void set_holepunch_mode() override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/peer_connection.hpp	/^		~peer_connection() override;$/;"	m	class:libtorrent::peer_connection
override	libtorrent/include/libtorrent/resolver.hpp	/^		, callback_t const& h) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/resolver.hpp	/^	void abort() override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/resolver.hpp	/^	void set_cache_timeout(seconds timeout) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/storage.hpp	/^			, move_flags_t flags, storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^			, piece_index_t piece, int offset, open_mode_t flags, storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^			, storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^			, storage_error& error) override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^		bool has_any_file(storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^		bool tick() override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^		void delete_files(remove_flags_t options, storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^		void initialize(storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^		void release_files(storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/storage.hpp	/^		~default_storage() override;$/;"	m	class:libtorrent::default_storage
override	libtorrent/include/libtorrent/torrent.hpp	/^			, int complete, int incomplete, int downloaded, int downloaders) override;$/;"	m	class:libtorrent::torrent
override	libtorrent/include/libtorrent/torrent.hpp	/^			, seconds32 retry_interval) override;$/;"	m	class:libtorrent::torrent
override	libtorrent/include/libtorrent/torrent.hpp	/^			, std::string const& msg) override;$/;"	m	class:libtorrent::torrent
override	libtorrent/include/libtorrent/torrent.hpp	/^			, struct tracker_response const& resp) override;$/;"	m	class:libtorrent::torrent
override	libtorrent/include/libtorrent/torrent.hpp	/^		bool should_log() const override;$/;"	m	class:libtorrent::torrent
override	libtorrent/include/libtorrent/torrent.hpp	/^		void on_error(error_code const& ec) override;$/;"	m	class:libtorrent::torrent
override	libtorrent/include/libtorrent/torrent.hpp	/^		void on_exception(std::exception const& e) override;$/;"	m	class:libtorrent::torrent
override	libtorrent/include/libtorrent/torrent.hpp	/^		~torrent() override;$/;"	m	class:libtorrent::torrent
override	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		torrent_peer* allocate_peer_entry(int type) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		void free_peer_entry(torrent_peer* p) override;$/;"	m	struct:libtorrent::final
override	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		void close() override;$/;"	m	class:libtorrent::udp_tracker_connection
override	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		void on_timeout(error_code const& ec) override;$/;"	m	class:libtorrent::udp_tracker_connection
override	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		void start() override;$/;"	m	class:libtorrent::udp_tracker_connection
override	libtorrent/include/libtorrent/web_connection_base.hpp	/^			, std::size_t bytes_transferred) override;$/;"	m	class:libtorrent::web_connection_base
override	libtorrent/include/libtorrent/web_connection_base.hpp	/^		bool in_handshake() const override;$/;"	m	class:libtorrent::web_connection_base
override	libtorrent/include/libtorrent/web_connection_base.hpp	/^		int timeout() const override;$/;"	m	class:libtorrent::web_connection_base
override	libtorrent/include/libtorrent/web_connection_base.hpp	/^		void get_specific_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::web_connection_base
override	libtorrent/include/libtorrent/web_connection_base.hpp	/^		void on_connected() override;$/;"	m	class:libtorrent::web_connection_base
override	libtorrent/include/libtorrent/web_connection_base.hpp	/^		void start() override;$/;"	m	class:libtorrent::web_connection_base
override	libtorrent/include/libtorrent/web_connection_base.hpp	/^		void write_request(peer_request const&) override = 0;$/;"	m	class:libtorrent::web_connection_base
override	libtorrent/include/libtorrent/web_connection_base.hpp	/^		~web_connection_base() override;$/;"	m	class:libtorrent::web_connection_base
override	libtorrent/include/libtorrent/web_peer_connection.hpp	/^			, operation_t op, disconnect_severity_t error = peer_connection_interface::normal) override;$/;"	m	class:libtorrent::web_peer_connection
override	libtorrent/include/libtorrent/web_peer_connection.hpp	/^			, std::size_t bytes_transferred) override;$/;"	m	class:libtorrent::web_peer_connection
override	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		bool received_invalid_data(piece_index_t index, bool single_peer) override;$/;"	m	class:libtorrent::web_peer_connection
override	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		piece_block_progress downloading_piece_progress() const override;$/;"	m	class:libtorrent::web_peer_connection
override	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		void get_specific_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::web_peer_connection
override	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		void on_connected() override;$/;"	m	class:libtorrent::web_peer_connection
override	libtorrent/include/libtorrent/web_peer_connection.hpp	/^		void write_request(peer_request const& r) override;$/;"	m	class:libtorrent::web_peer_connection
override_resume_data	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER override_resume_data = 15_bit;$/;"	m	namespace:libtorrent::torrent_flags
override_trackers	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t override_trackers = 11_bit;$/;"	m	namespace:libtorrent::torrent_flags
override_web_seeds	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t override_web_seeds = 12_bit;$/;"	m	namespace:libtorrent::torrent_flags
overwrite_existing	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr add_piece_flags_t overwrite_existing = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
ow	libowfat/io_internal.h	/^  OVERLAPPED or,ow,os;	\/* overlapped for read+accept, write+connect, sendfile *\/$/;"	m	struct:__anon40
p	libowfat/array.h	/^  char* p;$/;"	m	struct:__anon33
p	libowfat/buffer.h	/^  size_t p;		\/* current position *\/$/;"	m	struct:buffer
p	libowfat/cdb_make.h	/^struct cdb_hp { uint32 h; uint32 p; } ;$/;"	m	struct:cdb_hp
p	libowfat/libowfat/array.h	/^  char* p;$/;"	m	struct:__anon39
p	libowfat/libowfat/buffer.h	/^  size_t p;		\/* current position *\/$/;"	m	struct:buffer
p	libowfat/libowfat/cdb_make.h	/^struct cdb_hp { uint32 h; uint32 p; } ;$/;"	m	struct:cdb_hp
packet	include/client.h	/^    unsigned char *packet;$/;"	m	struct:client
packet	libowfat/dns.h	/^  char *packet; \/* 0, or dynamically allocated *\/$/;"	m	struct:dns_transmit
packet	libowfat/libowfat/dns.h	/^  char *packet; \/* 0, or dynamically allocated *\/$/;"	m	struct:dns_transmit
packet	libtorrent/include/libtorrent/packet_pool.hpp	/^	struct packet$/;"	s	namespace:libtorrent
packet	libtorrent/include/libtorrent/udp_socket.hpp	/^		struct packet$/;"	s	class:libtorrent::udp_socket
packet_buffer	libtorrent/include/libtorrent/packet_buffer.hpp	/^	class TORRENT_EXTRA_EXPORT packet_buffer$/;"	c	namespace:libtorrent
packet_bytes_remaining	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int packet_bytes_remaining() const$/;"	f	struct:libtorrent::receive_buffer
packet_deleter	libtorrent/include/libtorrent/packet_pool.hpp	/^	struct packet_deleter$/;"	s	namespace:libtorrent
packet_finished	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		bool packet_finished() const { return m_recv_buffer.packet_finished(); }$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
packet_finished	libtorrent/include/libtorrent/receive_buffer.hpp	/^	bool packet_finished() const { return m_packet_size <= m_recv_pos; }$/;"	f	struct:libtorrent::receive_buffer
packet_loss	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t packet_loss;$/;"	m	struct:libtorrent::utp_status
packet_pool	libtorrent/include/libtorrent/packet_pool.hpp	/^		packet_pool()$/;"	f	struct:libtorrent::packet_pool
packet_pool	libtorrent/include/libtorrent/packet_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT packet_pool : private single_threaded$/;"	s	namespace:libtorrent
packet_resend	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t packet_resend;$/;"	m	struct:libtorrent::utp_status
packet_size	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int packet_size() const { return m_packet_size; }$/;"	f	struct:libtorrent::receive_buffer
packet_slab	libtorrent/include/libtorrent/packet_pool.hpp	/^		explicit packet_slab(int const alloc_size, std::size_t const limit = 10)$/;"	f	struct:libtorrent::packet_slab
packet_slab	libtorrent/include/libtorrent/packet_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT packet_slab$/;"	s	namespace:libtorrent
packet_tcount	src/proxy.c	/^  size_t   packet_tcount;   \/* Number of unprocessed torrents in packet we currently receive *\/$/;"	m	struct:__anon10	file:
packet_tid	src/proxy.c	/^  uint32_t packet_tid;      \/* Tracker id for current packet *\/$/;"	m	struct:__anon10	file:
packet_too_large	libtorrent/include/libtorrent/error_code.hpp	/^			packet_too_large,$/;"	e	enum:libtorrent::errors::error_code_enum
packet_tprefix	src/proxy.c	/^  uint8_t  packet_tprefix;  \/* Prefix byte for all torrents in current packet *\/$/;"	m	struct:__anon10	file:
packet_type	src/proxy.c	/^  uint8_t  packet_type;     \/* Type of current packet *\/$/;"	m	struct:__anon10	file:
packetfree	libowfat/dns/dns_transmit.c	/^static void packetfree(struct dns_transmit *d)$/;"	f	file:
packetlen	libowfat/dns.h	/^  unsigned int packetlen;$/;"	m	struct:dns_transmit
packetlen	libowfat/libowfat/dns.h	/^  unsigned int packetlen;$/;"	m	struct:dns_transmit
packets_in	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t packets_in;$/;"	m	struct:libtorrent::utp_status
packets_out	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t packets_out;$/;"	m	struct:libtorrent::utp_status
packme	sync_daemon.pl	/^sub packme {$/;"	s
pad_blocks	libtorrent/include/libtorrent/piece_picker.hpp	/^		int pad_blocks;$/;"	m	struct:libtorrent::piece_count
pad_bytes	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^			std::uint8_t pad_bytes;$/;"	m	struct:libtorrent::heterogeneous_queue::header_t
pad_file	libtorrent/include/libtorrent/file_storage.hpp	/^		bool pad_file:1;$/;"	m	struct:libtorrent::file_entry
pad_file	libtorrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t TORRENT_DEPRECATED_MEMBER pad_file = 0_bit;$/;"	m	class:libtorrent::file_storage
pad_file	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t pad_file:1;$/;"	m	struct:libtorrent::internal_file_entry
pages	libowfat/iarray.h	/^  iarray_page* pages[16];$/;"	m	struct:__anon31
pages	libowfat/libowfat/iarray.h	/^  iarray_page* pages[16];$/;"	m	struct:__anon37
panic	libowfat/test/client.c	/^void panic(const char* s) {$/;"	f
panic	libowfat/test/httpd.c	/^static void panic(const char* routine) {$/;"	f	file:
panic	libowfat/test/server.c	/^void panic(const char* s) {$/;"	f
panic	src/opentracker.c	/^static void panic( const char *routine ) {$/;"	f	file:
panic	src/proxy.c	/^static void panic( const char *routine ) {$/;"	f	file:
params	libtorrent/include/libtorrent/alert_types.hpp	/^		add_torrent_params params;$/;"	m	struct:libtorrent::final
parse_addr	libtorrent/include/libtorrent/alert_types.hpp	/^			parse_addr TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
parse_address	libtorrent/include/libtorrent/operations.hpp	/^		parse_address,$/;"	m	class:libtorrent::operation_t
parse_array	src/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:
parse_children	libtorrent/include/libtorrent/kademlia/msg.hpp	/^		parse_children = 2,$/;"	e	enum:libtorrent::dht::key_desc_t::__anon64
parse_configfile	src/opentracker.c	/^int parse_configfile( char * config_filename ) {$/;"	f
parse_failed	libtorrent/include/libtorrent/error_code.hpp	/^			parse_failed,$/;"	e	enum:libtorrent::errors::error_code_enum
parse_failed	libtorrent/include/libtorrent/i2p_stream.hpp	/^			parse_failed,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
parse_hex4	src/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:
parse_number	src/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:
parse_object	src/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:
parse_state	libtorrent/include/libtorrent/upnp.hpp	/^struct parse_state$/;"	s	namespace:libtorrent
parse_string	src/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:
parse_value	src/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:
parsetime	libowfat/scan/scan_httpdate.c	/^static int parsetime(const char*c,struct tm* x) {$/;"	f	file:
part_file	libtorrent/include/libtorrent/part_file.hpp	/^	struct TORRENT_EXTRA_EXPORT part_file$/;"	s	namespace:libtorrent
partfile_move	libtorrent/include/libtorrent/operations.hpp	/^		partfile_move,$/;"	m	class:libtorrent::operation_t
partfile_read	libtorrent/include/libtorrent/operations.hpp	/^		partfile_read,$/;"	m	class:libtorrent::operation_t
partfile_write	libtorrent/include/libtorrent/operations.hpp	/^		partfile_write,$/;"	m	class:libtorrent::operation_t
partial_hash	libtorrent/include/libtorrent/block_cache.hpp	/^		partial_hash(): offset(0) {}$/;"	f	struct:libtorrent::partial_hash
partial_hash	libtorrent/include/libtorrent/block_cache.hpp	/^	struct TORRENT_EXTRA_EXPORT partial_hash$/;"	s	namespace:libtorrent
partial_piece_info	libtorrent/include/libtorrent/torrent_handle.hpp	/^	struct TORRENT_EXPORT partial_piece_info$/;"	s	namespace:libtorrent
pascal_string	libtorrent/include/libtorrent/lazy_entry.hpp	/^		pascal_string(char const* p, int l): len(l), ptr(p) {}$/;"	f	struct:libtorrent::pascal_string
pascal_string	libtorrent/include/libtorrent/lazy_entry.hpp	/^	struct TORRENT_DEPRECATED_EXPORT pascal_string$/;"	s	namespace:libtorrent
passed_hash_check	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t passed_hash_check:1;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
password	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^		std::string password;$/;"	m	struct:libtorrent::aux::proxy_settings
path	libowfat/GNUmakefile	/^path = $(subst :, ,$(PATH))$/;"	m
path	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER path;$/;"	m	struct:libtorrent::final
path	libtorrent/include/libtorrent/file_storage.hpp	/^		std::string path;$/;"	m	struct:libtorrent::file_entry
path	libtorrent/include/libtorrent/http_parser.hpp	/^		std::string const& path() const { return m_path; }$/;"	f	class:libtorrent::http_parser::std
path	libtorrent/include/libtorrent/storage_defs.hpp	/^		std::string const& path;$/;"	m	class:libtorrent::storage_params::std
path	libtorrent/include/libtorrent/upnp.hpp	/^		std::string path;$/;"	m	struct:libtorrent::final::rootdevice
path_append	src/client_test.cpp	/^std::string path_append(std::string const& lhs, std::string const& rhs)$/;"	f
path_append	src/test.cpp	/^std::string path_append(std::string const & lhs, std::string const &rhs)$/;"	f
path_append	src/torrent.cpp	/^std::string path_append(std::string const & lhs, std::string const &rhs)$/;"	f
path_index	libtorrent/include/libtorrent/file_storage.hpp	/^		int path_index;$/;"	m	struct:libtorrent::internal_file_entry
paths	libtorrent/include/libtorrent/file_storage.hpp	/^		std::vector<std::string> const& paths() const { return m_paths; }$/;"	f	class:libtorrent::file_storage::std
paused	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t paused = 4_bit;$/;"	m	namespace:libtorrent::torrent_flags
paused	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER paused = false;$/;"	m	struct:libtorrent::torrent_status
paused	libtorrent/include/libtorrent/tracker_manager.hpp	/^			paused$/;"	e	enum:libtorrent::tracker_request::event_t
payload_down_speed	libtorrent/include/libtorrent/peer_info.hpp	/^		int payload_down_speed;$/;"	m	struct:libtorrent::peer_info
payload_download_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int payload_download_rate;$/;"	m	struct:libtorrent::session_status
payload_pkts_in	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t payload_pkts_in;$/;"	m	struct:libtorrent::utp_status
payload_pkts_out	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t payload_pkts_out;$/;"	m	struct:libtorrent::utp_status
payload_up_speed	libtorrent/include/libtorrent/peer_info.hpp	/^		int payload_up_speed;$/;"	m	struct:libtorrent::peer_info
payload_upload_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int payload_upload_rate;$/;"	m	struct:libtorrent::session_status
pc	libtorrent/include/libtorrent/aux_/route.h	/^	void	*pc[CTRACE_STACK_SIZE];		\/* PC stack trace *\/$/;"	m	struct:ctrace
pcp_address_mismatch	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_address_mismatch,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_cannot_provide_external	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_cannot_provide_external,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_errors	libtorrent/include/libtorrent/natpmp.hpp	/^		enum pcp_errors$/;"	g	namespace:libtorrent::errors
pcp_excessive_remote_peers	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_excessive_remote_peers,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_malformed_option	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_malformed_option,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_malformed_request	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_malformed_request,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_network_failure	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_network_failure,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_no_resources	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_no_resources,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_not_authorized	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_not_authorized,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_opcode	libtorrent/include/libtorrent/natpmp.hpp	/^	enum pcp_opcode$/;"	g	struct:libtorrent::natpmp
pcp_success	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_success = 0,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_unsupp_opcode	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_unsupp_opcode,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_unsupp_option	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_unsupp_option,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_unsupp_protocol	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_unsupp_protocol,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_unsupp_version	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_unsupp_version,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_user_ex_quota	libtorrent/include/libtorrent/natpmp.hpp	/^			pcp_user_ex_quota,$/;"	e	enum:libtorrent::errors::pcp_errors
pe_settings	libtorrent/include/libtorrent/session_settings.hpp	/^		pe_settings()$/;"	f	struct:libtorrent::pe_settings
pe_settings	libtorrent/include/libtorrent/session_settings.hpp	/^	struct TORRENT_DEPRECATED_EXPORT pe_settings$/;"	s	namespace:libtorrent
pe_support	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool pe_support:1;$/;"	m	struct:libtorrent::torrent_peer
peak_queued	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int peak_queued;$/;"	m	struct:libtorrent::cache_status
peer	include/trackerlogic.h	/^  ot_peer  peer;$/;"	m	struct:ot_workstruct
peer	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t peer = 1_bit;$/;"	m	namespace:libtorrent::alert_category
peer	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	std::shared_ptr<bandwidth_socket> peer;$/;"	m	struct:libtorrent::bw_request
peer	libtorrent/include/libtorrent/piece_picker.hpp	/^			torrent_peer* peer = nullptr;$/;"	m	struct:libtorrent::piece_picker::block_info
peer	libtorrent/include/libtorrent/torrent_handle.hpp	/^		tcp::endpoint peer() const$/;"	f	struct:libtorrent::block_info
peer	src/client_test.cpp	/^std::string peer;$/;"	v
peer_address_compare	libtorrent/include/libtorrent/torrent_peer.hpp	/^	struct peer_address_compare$/;"	s	namespace:libtorrent
peer_alert	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_alert : torrent_alert$/;"	s	namespace:libtorrent
peer_banned	libtorrent/include/libtorrent/error_code.hpp	/^			peer_banned,$/;"	e	enum:libtorrent::errors::error_code_enum
peer_churn	libtorrent/include/libtorrent/close_reason.hpp	/^		peer_churn,$/;"	m	class:libtorrent::close_reason_t
peer_class	libtorrent/include/libtorrent/peer_class.hpp	/^		explicit peer_class(std::string l)$/;"	f	struct:libtorrent::peer_class
peer_class	libtorrent/include/libtorrent/peer_class.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_class$/;"	s	namespace:libtorrent
peer_class	libtorrent/include/libtorrent/torrent.hpp	/^		peer_class_t peer_class() const { return m_peer_class; }$/;"	f	class:libtorrent::torrent
peer_class_info	libtorrent/include/libtorrent/peer_class.hpp	/^	struct TORRENT_EXPORT peer_class_info$/;"	s	namespace:libtorrent
peer_class_pool	libtorrent/include/libtorrent/peer_class.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_class_pool$/;"	s	namespace:libtorrent
peer_class_set	libtorrent/include/libtorrent/peer_class_set.hpp	/^		peer_class_set() : m_size(0) {}$/;"	f	struct:libtorrent::peer_class_set
peer_class_set	libtorrent/include/libtorrent/peer_class_set.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_class_set$/;"	s	namespace:libtorrent
peer_class_type_filter	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		peer_class_type_filter()$/;"	f	struct:libtorrent::peer_class_type_filter
peer_class_type_filter	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^	struct TORRENT_EXPORT peer_class_type_filter$/;"	s	namespace:libtorrent
peer_connect_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			peer_connect_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_connection	libtorrent/include/libtorrent/peer_connection.hpp	/^	class TORRENT_EXTRA_EXPORT peer_connection$/;"	c	namespace:libtorrent
peer_connection	libtorrent/include/libtorrent/udp_socket.hpp	/^		static constexpr udp_send_flags_t peer_connection = 0_bit;$/;"	m	class:libtorrent::udp_socket
peer_connection_args	libtorrent/include/libtorrent/peer_connection.hpp	/^	struct peer_connection_args$/;"	s	namespace:libtorrent
peer_connection_handle	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^	explicit peer_connection_handle(std::weak_ptr<peer_connection> impl)$/;"	f	struct:libtorrent::peer_connection_handle
peer_connection_handle	libtorrent/include/libtorrent/peer_connection_handle.hpp	/^struct TORRENT_EXPORT peer_connection_handle$/;"	s	namespace:libtorrent
peer_connection_hot_members	libtorrent/include/libtorrent/peer_connection.hpp	/^		peer_connection_hot_members($/;"	f	struct:libtorrent::peer_connection_hot_members
peer_connection_hot_members	libtorrent/include/libtorrent/peer_connection.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_connection_hot_members$/;"	s	namespace:libtorrent
peer_connection_interface	libtorrent/include/libtorrent/peer_connection_interface.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_connection_interface$/;"	s	namespace:libtorrent
peer_count	include/trackerlogic.h	/^  size_t         peer_count;$/;"	m	struct:ot_peerlist
peer_count	libtorrent/include/libtorrent/piece_picker.hpp	/^			int peer_count;$/;"	m	struct:libtorrent::piece_picker::piece_stats_t
peer_count	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint32_t peer_count : 26;$/;"	m	struct:libtorrent::piece_picker::piece_pos
peer_count	src/ot_stats.c	/^  unsigned long long peer_count;$/;"	m	struct:__anon5	file:
peer_disconnected_other	libtorrent/include/libtorrent/peer_connection.hpp	/^		void peer_disconnected_other()$/;"	f	class:libtorrent::peer_connection
peer_entry	libtorrent/include/libtorrent/peer.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_entry$/;"	s	namespace:libtorrent
peer_exceeds_limit	libtorrent/include/libtorrent/peer_connection.hpp	/^		void peer_exceeds_limit()$/;"	f	class:libtorrent::peer_connection
peer_fingerprint	libtorrent/include/libtorrent/settings_pack.hpp	/^			peer_fingerprint,$/;"	e	enum:libtorrent::settings_pack::string_types
peer_id	include/trackerlogic.h	/^  char    *peer_id;$/;"	m	struct:ot_workstruct
peer_index	src/client_test.cpp	/^int peer_index(lt::tcp::endpoint addr, std::vector<lt::peer_info> const& peers)$/;"	f
peer_info	libtorrent/include/libtorrent/peer_info.hpp	/^	struct TORRENT_EXPORT peer_info$/;"	s	namespace:libtorrent
peer_interested	libtorrent/include/libtorrent/alert_types.hpp	/^		bool const peer_interested;$/;"	m	struct:libtorrent::final
peer_list	include/trackerlogic.h	/^  ot_peerlist *peer_list;$/;"	m	struct:__anon23
peer_list	libtorrent/include/libtorrent/peer_list.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_list : single_threaded$/;"	s	namespace:libtorrent
peer_list_entry	libtorrent/include/libtorrent/peer_info.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_list_entry$/;"	s	namespace:libtorrent
peer_log	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t peer_log = 15_bit;$/;"	m	namespace:libtorrent::alert_category
peer_log_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t peer_log_notification = 15_bit;$/;"	m	class:libtorrent::alert
peer_not_constructed	libtorrent/include/libtorrent/error_code.hpp	/^			peer_not_constructed,$/;"	e	enum:libtorrent::errors::error_code_enum
peer_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t peer_notification = 1_bit;$/;"	m	class:libtorrent::alert
peer_plugin	libtorrent/include/libtorrent/extensions.hpp	/^	struct TORRENT_EXPORT peer_plugin$/;"	s	namespace:libtorrent
peer_rank	libtorrent/include/libtorrent/torrent_peer.hpp	/^		mutable std::uint32_t peer_rank;$/;"	m	struct:libtorrent::torrent_peer
peer_request	libtorrent/include/libtorrent/peer_request.hpp	/^	struct TORRENT_EXPORT peer_request$/;"	s	namespace:libtorrent
peer_sent_empty_piece	libtorrent/include/libtorrent/error_code.hpp	/^			peer_sent_empty_piece,$/;"	e	enum:libtorrent::errors::error_code_enum
peer_source	libtorrent/include/libtorrent/torrent_peer.hpp	/^		peer_source_flags_t peer_source() const$/;"	f	struct:libtorrent::torrent_peer
peer_speedmsg	libtorrent/include/libtorrent/alert_types.hpp	/^		char const* TORRENT_DEPRECATED_MEMBER peer_speedmsg;$/;"	m	struct:libtorrent::final
peer_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			peer_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_tos	libtorrent/include/libtorrent/settings_pack.hpp	/^			peer_tos,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_turnover	libtorrent/include/libtorrent/settings_pack.hpp	/^			peer_turnover,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_turnover_cutoff	libtorrent/include/libtorrent/settings_pack.hpp	/^			peer_turnover_cutoff,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_turnover_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			peer_turnover_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_type_t	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		enum peer_type_t$/;"	g	struct:libtorrent::torrent_peer_allocator_interface
peerinfo	libtorrent/include/libtorrent/peer_connection.hpp	/^		torrent_peer* peerinfo;$/;"	m	struct:libtorrent::peer_connection_args
peerlist_size	libtorrent/include/libtorrent/session_status.hpp	/^		int peerlist_size;$/;"	m	struct:libtorrent::session_status
peers	include/trackerlogic.h	/^  ot_vector      peers;$/;"	m	struct:ot_peerlist
peers	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<tcp::endpoint>> peers;$/;"	m	struct:libtorrent::add_torrent_params
peers	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^		std::int32_t peers = 0;$/;"	m	struct:libtorrent::dht::dht_storage_counters
peers	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::set<torrent_peer*> peers;$/;"	m	struct:libtorrent::piece_picker::block_info
peers	libtorrent/include/libtorrent/torrent.hpp	/^		int peers;$/;"	m	struct:libtorrent::time_critical_piece
peers	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<peer_entry> peers;$/;"	m	struct:libtorrent::tracker_response
peers4	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<ipv4_peer_entry> peers4;$/;"	m	struct:libtorrent::tracker_response
peers6	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<ipv6_peer_entry> peers6;$/;"	m	struct:libtorrent::tracker_response
pending	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t pending:1;$/;"	m	struct:libtorrent::cached_block_entry
pending_block	libtorrent/include/libtorrent/peer_connection.hpp	/^		pending_block(piece_block const& b) \/\/ NOLINT$/;"	f	struct:libtorrent::pending_block
pending_block	libtorrent/include/libtorrent/peer_connection.hpp	/^	struct pending_block$/;"	s	namespace:libtorrent
pending_disk_bytes	libtorrent/include/libtorrent/peer_info.hpp	/^		int pending_disk_bytes;$/;"	m	struct:libtorrent::peer_info
pending_disk_read_bytes	libtorrent/include/libtorrent/peer_info.hpp	/^		int pending_disk_read_bytes;$/;"	m	struct:libtorrent::peer_info
pending_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int pending_jobs;$/;"	m	struct:libtorrent::cache_status
performance_warning	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t performance_warning = 9_bit;$/;"	m	class:libtorrent::alert
performance_warning	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t performance_warning = 9_bit;$/;"	m	namespace:libtorrent::alert_category
performance_warning_t	libtorrent/include/libtorrent/alert_types.hpp	/^		enum performance_warning_t$/;"	g	struct:libtorrent::final
perm_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			perm_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
pex	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t pex = 2_bit;$/;"	m	struct:libtorrent::peer_info
pex_holepunch	libtorrent/include/libtorrent/pex_flags.hpp	/^	constexpr pex_flags_t pex_holepunch = 4_bit;$/;"	m	namespace:libtorrent
pex_message_too_big	libtorrent/include/libtorrent/close_reason.hpp	/^		pex_message_too_big,$/;"	m	class:libtorrent::close_reason_t
pex_message_too_large	libtorrent/include/libtorrent/error_code.hpp	/^			pex_message_too_large,$/;"	e	enum:libtorrent::errors::error_code_enum
pex_seed	libtorrent/include/libtorrent/pex_flags.hpp	/^	constexpr pex_flags_t pex_seed = 2_bit;$/;"	m	namespace:libtorrent
pex_utp	libtorrent/include/libtorrent/pex_flags.hpp	/^	constexpr pex_flags_t pex_utp = 3_bit;$/;"	m	namespace:libtorrent
picker	libtorrent/include/libtorrent/torrent.hpp	/^		piece_picker const& picker() const$/;"	f	class:libtorrent::torrent
picker	libtorrent/include/libtorrent/torrent.hpp	/^		piece_picker& picker()$/;"	f	class:libtorrent::torrent
picker_log	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t picker_log = 20_bit;$/;"	m	namespace:libtorrent::alert_category
picker_log_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t picker_log_notification = 20_bit;$/;"	m	class:libtorrent::alert
picker_options	libtorrent/include/libtorrent/peer_connection.hpp	/^		void picker_options(picker_options_t o) { m_picker_options = o; }$/;"	f	class:libtorrent::peer_connection
pid	libtorrent/include/libtorrent/alert_types.hpp	/^		peer_id pid;$/;"	m	struct:libtorrent::peer_alert
pid	libtorrent/include/libtorrent/peer.hpp	/^		peer_id pid;$/;"	m	struct:libtorrent::peer_entry
pid	libtorrent/include/libtorrent/peer_info.hpp	/^		peer_id pid;$/;"	m	struct:libtorrent::peer_info
pid	libtorrent/include/libtorrent/tracker_manager.hpp	/^		peer_id pid;$/;"	m	struct:libtorrent::tracker_request
piece	libtorrent/include/libtorrent/alert_types.hpp	/^		piece_index_t const piece;$/;"	m	struct:libtorrent::final
piece	libtorrent/include/libtorrent/disk_io_job.hpp	/^			piece_index_t piece;$/;"	m	union:libtorrent::disk_io_job::__anon49
piece	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		piece_index_t piece;$/;"	m	struct:libtorrent::cached_piece_info
piece	libtorrent/include/libtorrent/peer_request.hpp	/^		piece_index_t piece;$/;"	m	struct:libtorrent::peer_request
piece	libtorrent/include/libtorrent/torrent.hpp	/^		piece_index_t piece;$/;"	m	struct:libtorrent::time_critical_piece
piece_bar	src/print.cpp	/^std::string const& piece_bar(lt::bitfield const& p, int width)$/;"	f	class:std
piece_block	libtorrent/include/libtorrent/piece_block.hpp	/^		piece_block(piece_index_t p_index, int b_index)$/;"	f	struct:libtorrent::piece_block
piece_block	libtorrent/include/libtorrent/piece_block.hpp	/^	struct TORRENT_EXTRA_EXPORT piece_block$/;"	s	namespace:libtorrent
piece_block_progress	libtorrent/include/libtorrent/piece_block_progress.hpp	/^	struct piece_block_progress$/;"	s	namespace:libtorrent
piece_cancelled	libtorrent/include/libtorrent/torrent.hpp	/^		piece_timed_out, piece_cancelled, piece_unknown, piece_seed$/;"	m	class:libtorrent::waste_reason
piece_closing	libtorrent/include/libtorrent/torrent.hpp	/^		, piece_end_game, piece_closing$/;"	m	class:libtorrent::waste_reason
piece_count	libtorrent/include/libtorrent/piece_picker.hpp	/^	struct piece_count$/;"	s	namespace:libtorrent
piece_data	libtorrent/include/libtorrent/torrent.hpp	/^			boost::shared_array<char> piece_data;$/;"	m	struct:libtorrent::torrent::read_piece_struct
piece_end_game	libtorrent/include/libtorrent/torrent.hpp	/^		, piece_end_game, piece_closing$/;"	m	class:libtorrent::waste_reason
piece_extent_affinity	libtorrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t piece_extent_affinity = 7_bit;$/;"	m	class:libtorrent::piece_picker
piece_extent_affinity	libtorrent/include/libtorrent/settings_pack.hpp	/^			piece_extent_affinity,$/;"	e	enum:libtorrent::settings_pack::bool_types
piece_failed	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool piece_failed;$/;"	m	class:libtorrent::peer_connection
piece_granularity	libtorrent/include/libtorrent/torrent_handle.hpp	/^			piece_granularity = 1$/;"	e	enum:libtorrent::torrent_handle::file_progress_flags_t
piece_hash	libtorrent/include/libtorrent/disk_io_job.hpp	/^			sha1_hash piece_hash;$/;"	m	union:libtorrent::disk_io_job::un
piece_index	libtorrent/include/libtorrent/alert_types.hpp	/^		piece_index_t const piece_index;$/;"	m	struct:libtorrent::final
piece_index	libtorrent/include/libtorrent/torrent_handle.hpp	/^		piece_index_t piece_index;$/;"	m	struct:libtorrent::partial_piece_info
piece_length	libtorrent/include/libtorrent/create_torrent.hpp	/^		int piece_length() const { return m_files.piece_length(); }$/;"	f	struct:libtorrent::create_torrent
piece_length	libtorrent/include/libtorrent/file_storage.hpp	/^		int piece_length() const { TORRENT_ASSERT(m_piece_length > 0); return m_piece_length; }$/;"	f	class:libtorrent::file_storage
piece_length	libtorrent/include/libtorrent/torrent_info.hpp	/^		int piece_length() const { return m_files.piece_length(); }$/;"	f	class:libtorrent::torrent_info
piece_log	libtorrent/include/libtorrent/block_cache.hpp	/^		aux::vector<piece_log_t> piece_log;$/;"	m	struct:libtorrent::cached_piece_entry
piece_log_t	libtorrent/include/libtorrent/block_cache.hpp	/^		explicit piece_log_t(artificial_jobs j, int b = -1): job(static_cast<job_action_t>(j)), block(b) {}$/;"	f	struct:libtorrent::piece_log_t
piece_log_t	libtorrent/include/libtorrent/block_cache.hpp	/^		explicit piece_log_t(job_action_t j, int b = -1): job(j), block(b) {}$/;"	f	struct:libtorrent::piece_log_t
piece_log_t	libtorrent/include/libtorrent/block_cache.hpp	/^	struct piece_log_t$/;"	s	namespace:libtorrent
piece_matrix	src/print.cpp	/^std::string piece_matrix(lt::bitfield const& p, int width, int* height)$/;"	f
piece_picker	libtorrent/include/libtorrent/piece_picker.hpp	/^	class TORRENT_EXTRA_EXPORT piece_picker$/;"	c	namespace:libtorrent
piece_picker_busy_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_busy_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_partial_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_partial_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_rand_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_rand_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_rand_start_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_rand_start_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_rare_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_rare_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_reverse_rare_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_reverse_rare_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_sequential_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_sequential_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_suggest_loops	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_suggest_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_pos	libtorrent/include/libtorrent/piece_picker.hpp	/^			piece_pos() {}$/;"	f	struct:libtorrent::piece_picker::piece_pos
piece_pos	libtorrent/include/libtorrent/piece_picker.hpp	/^			piece_pos(int const peer_count_, int const index_)$/;"	f	struct:libtorrent::piece_picker::piece_pos
piece_pos	libtorrent/include/libtorrent/piece_picker.hpp	/^		struct piece_pos$/;"	s	class:libtorrent::piece_picker
piece_priorities	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<download_priority_t>> piece_priorities;$/;"	m	struct:libtorrent::add_torrent_params
piece_priority	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint32_t piece_priority : 3;$/;"	m	struct:libtorrent::piece_picker::piece_pos
piece_progress	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t piece_progress = 22_bit;$/;"	m	namespace:libtorrent::alert_category
piece_progress_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t piece_progress_notification = 22_bit;$/;"	m	class:libtorrent::alert
piece_range	libtorrent/include/libtorrent/torrent_info.hpp	/^		index_range<piece_index_t> piece_range() const$/;"	f	class:libtorrent::torrent_info
piece_refcount	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t piece_refcount:7;$/;"	m	struct:libtorrent::cached_piece_entry
piece_rejects	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_rejects,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_requests	libtorrent/include/libtorrent/performance_counters.hpp	/^			piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_seed	libtorrent/include/libtorrent/torrent.hpp	/^		piece_timed_out, piece_cancelled, piece_unknown, piece_seed$/;"	m	class:libtorrent::waste_reason
piece_size	libtorrent/include/libtorrent/create_torrent.hpp	/^		int piece_size(piece_index_t i) const { return m_files.piece_size(i); }$/;"	f	struct:libtorrent::create_torrent
piece_size	libtorrent/include/libtorrent/torrent_info.hpp	/^		int piece_size(piece_index_t index) const { return m_files.piece_size(index); }$/;"	f	class:libtorrent::torrent_info
piece_state	libtorrent/include/libtorrent/torrent_handle.hpp	/^		state_t TORRENT_DEPRECATED_MEMBER piece_state;$/;"	m	struct:libtorrent::partial_piece_info
piece_stats_t	libtorrent/include/libtorrent/piece_picker.hpp	/^		struct piece_stats_t$/;"	s	class:libtorrent::piece_picker
piece_timed_out	libtorrent/include/libtorrent/torrent.hpp	/^		piece_timed_out, piece_cancelled, piece_unknown, piece_seed$/;"	m	class:libtorrent::waste_reason
piece_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			piece_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
piece_unknown	libtorrent/include/libtorrent/torrent.hpp	/^		piece_timed_out, piece_cancelled, piece_unknown, piece_seed$/;"	m	class:libtorrent::waste_reason
pieces	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<cached_piece_info> pieces;$/;"	m	struct:libtorrent::cache_status
pieces	libtorrent/include/libtorrent/peer_info.hpp	/^		typed_bitfield<piece_index_t> pieces;$/;"	m	struct:libtorrent::peer_info
pieces	libtorrent/include/libtorrent/torrent_status.hpp	/^		typed_bitfield<piece_index_t> pieces;$/;"	m	struct:libtorrent::torrent_status
pieces_need_reorder	libtorrent/include/libtorrent/error_code.hpp	/^			pieces_need_reorder,$/;"	e	enum:libtorrent::errors::error_code_enum
pinged	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	bool pinged() const { return timeout_count != 0xff; }$/;"	f	struct:libtorrent::dht::node_entry
pinned	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t pinned:15;$/;"	m	struct:libtorrent::cached_piece_entry
pinned	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER pinned = 14_bit;$/;"	m	namespace:libtorrent::torrent_flags
pinned_blocks	libtorrent/include/libtorrent/block_cache.hpp	/^		int pinned_blocks() const { return m_pinned_blocks; }$/;"	f	struct:libtorrent::block_cache
pinned_blocks	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int pinned_blocks;$/;"	m	struct:libtorrent::cache_status
pinned_blocks	libtorrent/include/libtorrent/performance_counters.hpp	/^			pinned_blocks,$/;"	e	enum:libtorrent::counters::stats_gauge_t
pipe_bt	src/main.c	/^int pipe_bt[2];$/;"	v
pipe_event	src/main.c	/^int pipe_event[2];$/;"	v
pipe_tcp	src/main.c	/^int pipe_tcp[2];$/;"	v
pipe_track	src/main.c	/^int pipe_track[2];$/;"	v
pipe_udp	src/main.c	/^int pipe_udp[2];$/;"	v
pk	libtorrent/include/libtorrent/kademlia/item.hpp	/^	public_key const& pk() const$/;"	f	class:libtorrent::dht::item
plaintext	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^	enum class transport : std::uint8_t { plaintext, ssl };$/;"	m	class:libtorrent::aux::transport
plaintext	libtorrent/include/libtorrent/session_settings.hpp	/^			plaintext = 1,$/;"	e	enum:libtorrent::pe_settings::enc_level
plaintext_encrypted	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t plaintext_encrypted = 20_bit;$/;"	m	struct:libtorrent::peer_info
plugin	libtorrent/include/libtorrent/extensions.hpp	/^	struct TORRENT_EXPORT plugin$/;"	s	namespace:libtorrent
plugins_all_idx	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				plugins_all_idx = 0, \/\/ to store all plugins$/;"	e	enum:libtorrent::aux::final::__anon63
plugins_dht_request_idx	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				plugins_dht_request_idx = 3 \/\/ dht_request_feature$/;"	e	enum:libtorrent::aux::final::__anon63
plugins_optimistic_unchoke_idx	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				plugins_optimistic_unchoke_idx = 1, \/\/ optimistic_unchoke_feature$/;"	e	enum:libtorrent::aux::final::__anon63
plugins_tick_idx	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				plugins_tick_idx = 2, \/\/ tick_feature$/;"	e	enum:libtorrent::aux::final::__anon63
plus_one	libtorrent/include/libtorrent/ip_filter.hpp	/^	Addr plus_one(Addr const& a)$/;"	f	namespace:libtorrent::detail
plus_one	libtorrent/include/libtorrent/ip_filter.hpp	/^	inline std::uint16_t plus_one(std::uint16_t val) { return val + 1; }$/;"	f	namespace:libtorrent::detail
poll_interval	src/client_test.cpp	/^int poll_interval = 5;$/;"	v
pool_thread_interface	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^	struct pool_thread_interface$/;"	s	namespace:libtorrent
pop_alerts	src/client_test.cpp	/^void pop_alerts(torrent_view& view, session_view& ses_view$/;"	f
pop_alerts	src/torrent.cpp	/^void pop_alerts()$/;"	f
pop_front	libtorrent/include/libtorrent/tailqueue.hpp	/^		T* pop_front()$/;"	f	struct:libtorrent::tailqueue
port	include/client.h	/^    int port;   $/;"	m	struct:client
port	libtorrent/include/libtorrent/alert_types.hpp	/^		int const port;$/;"	m	namespace:libtorrent
port	libtorrent/include/libtorrent/alert_types.hpp	/^		int const port;$/;"	v
port	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^		std::uint16_t port = 0;$/;"	m	struct:libtorrent::aux::proxy_settings
port	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			int port;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
port	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		int port = 0;$/;"	m	struct:libtorrent::aux::listen_port_mapping
port	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	int port() const { return endpoint.port; }$/;"	f	struct:libtorrent::dht::node_entry
port	libtorrent/include/libtorrent/peer.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::ipv4_peer_entry
port	libtorrent/include/libtorrent/peer.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::ipv6_peer_entry
port	libtorrent/include/libtorrent/peer.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::peer_entry
port	libtorrent/include/libtorrent/peer_list.hpp	/^		int port = 0;$/;"	m	struct:libtorrent::torrent_state
port	libtorrent/include/libtorrent/string_util.hpp	/^		int port;$/;"	m	struct:libtorrent::listen_interface_t
port	libtorrent/include/libtorrent/torrent_handle.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::block_info
port	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::torrent_peer
port	libtorrent/include/libtorrent/union_endpoint.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::union_endpoint
port	libtorrent/include/libtorrent/upnp.hpp	/^		int port = 0;$/;"	m	struct:libtorrent::final::rootdevice
port	src/proxy.c	/^  uint16_t port;            \/* The peers port *\/$/;"	m	struct:__anon10	file:
port_blocked	libtorrent/include/libtorrent/close_reason.hpp	/^		port_blocked,$/;"	m	class:libtorrent::close_reason_t
port_blocked	libtorrent/include/libtorrent/error_code.hpp	/^			port_blocked,$/;"	e	enum:libtorrent::errors::error_code_enum
port_filter	libtorrent/include/libtorrent/ip_filter.hpp	/^class TORRENT_EXPORT port_filter$/;"	c	namespace:libtorrent
port_mapping	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t port_mapping = 2_bit;$/;"	m	namespace:libtorrent::alert_category
port_mapping_conflict	libtorrent/include/libtorrent/upnp.hpp	/^			port_mapping_conflict = 718,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
port_mapping_log	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t port_mapping_log = 19_bit;$/;"	m	namespace:libtorrent::alert_category
port_mapping_log_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t port_mapping_log_notification = 19_bit;$/;"	m	class:libtorrent::alert
port_mapping_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t port_mapping_notification = 2_bit;$/;"	m	class:libtorrent::alert
portmap_action	libtorrent/include/libtorrent/aux_/portmap.hpp	/^	enum class portmap_action : std::uint8_t$/;"	c	namespace:libtorrent::aux
portmap_callback	libtorrent/include/libtorrent/aux_/portmap.hpp	/^	struct TORRENT_EXTRA_EXPORT portmap_callback$/;"	s	namespace:libtorrent::aux
portmap_protocol	libtorrent/include/libtorrent/portmap.hpp	/^	enum class portmap_protocol : std::uint8_t$/;"	c	namespace:libtorrent
portmap_transport	libtorrent/include/libtorrent/portmap.hpp	/^	enum class portmap_transport : std::uint8_t$/;"	c	namespace:libtorrent
pos	include/client.h	/^    int pos;$/;"	m	struct:client
pos	libowfat/cdb_make.h	/^  uint32 pos;$/;"	m	struct:cdb_make
pos	libowfat/dns.h	/^  unsigned int pos;$/;"	m	struct:dns_transmit
pos	libowfat/libowfat/cdb_make.h	/^  uint32 pos;$/;"	m	struct:cdb_make
pos	libowfat/libowfat/dns.h	/^  unsigned int pos;$/;"	m	struct:dns_transmit
pos	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int pos() const { return m_recv_pos; }$/;"	f	struct:libtorrent::receive_buffer
pos	src/session_view.cpp	/^int session_view::pos() const { return m_position; }$/;"	f	class:session_view
pos_at_end	libtorrent/include/libtorrent/receive_buffer.hpp	/^	bool pos_at_end() { return m_recv_pos == m_recv_end; }$/;"	f	struct:libtorrent::receive_buffer
posplus	libowfat/cdb/cdb_make.c	/^static int posplus(struct cdb_make *c,uint32 len) {$/;"	f	file:
post	libtorrent/include/libtorrent/aux_/deferred_handler.hpp	/^	void post(io_service& ios, Handler&& h)$/;"	f	struct:libtorrent::aux::deferred_handler
postinc	libtorrent/include/libtorrent/tailqueue.hpp	/^	inline N* postinc(N*& e)$/;"	f	namespace:libtorrent
predictive_piece_announce	libtorrent/include/libtorrent/settings_pack.hpp	/^			predictive_piece_announce,$/;"	e	enum:libtorrent::settings_pack::int_types
predictive_pieces	libtorrent/include/libtorrent/torrent.hpp	/^		std::vector<piece_index_t> const& predictive_pieces() const$/;"	f	class:libtorrent::torrent::std
prefer_contiguous_blocks	libtorrent/include/libtorrent/peer_connection.hpp	/^		int prefer_contiguous_blocks() const$/;"	f	class:libtorrent::peer_connection
prefer_contiguous_blocks	libtorrent/include/libtorrent/peer_connection.hpp	/^		void prefer_contiguous_blocks(int num)$/;"	f	class:libtorrent::peer_connection
prefer_rc4	libtorrent/include/libtorrent/session_settings.hpp	/^		bool prefer_rc4;$/;"	m	struct:libtorrent::pe_settings
prefer_rc4	libtorrent/include/libtorrent/settings_pack.hpp	/^			prefer_rc4,$/;"	e	enum:libtorrent::settings_pack::bool_types
prefer_udp_trackers	libtorrent/include/libtorrent/settings_pack.hpp	/^			prefer_udp_trackers,$/;"	e	enum:libtorrent::settings_pack::bool_types
prefer_verified_node_ids	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool prefer_verified_node_ids = true;$/;"	m	struct:libtorrent::dht::settings
preferred	libtorrent/include/libtorrent/enum_net.hpp	/^		bool preferred = true;$/;"	m	struct:libtorrent::ip_interface
prefix	libowfat/GNUmakefile	/^prefix=\/opt\/diet$/;"	m
prefix	libowfat/Makefile	/^prefix=\/opt\/diet$/;"	m
preformatted_t	libtorrent/include/libtorrent/entry.hpp	/^			preformatted_t$/;"	e	enum:libtorrent::entry::data_type
prepend	libtorrent/include/libtorrent/tailqueue.hpp	/^		void prepend(tailqueue<T>& rhs)$/;"	f	struct:libtorrent::tailqueue
prepend_buffer	libtorrent/include/libtorrent/chained_buffer.hpp	/^		void prepend_buffer(Holder buffer, int used_size)$/;"	f	namespace:libtorrent
prev	include/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
prev	libtorrent/include/libtorrent/linked_list.hpp	/^		T* prev;$/;"	m	struct:libtorrent::list_node
prev	libtorrent/include/libtorrent/linked_list.hpp	/^		void prev() { m_current = m_current->prev; }$/;"	f	struct:libtorrent::list_iterator
prev	libtorrent/include/libtorrent/units.hpp	/^	strong_typedef<T, Tag> prev(strong_typedef<T, Tag> v)$/;"	f	namespace:libtorrent::aux
prev_amount_download	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t prev_amount_download;$/;"	m	struct:libtorrent::torrent_peer
prev_amount_upload	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t prev_amount_upload;$/;"	m	struct:libtorrent::torrent_peer
prev_state	libtorrent/include/libtorrent/alert_types.hpp	/^		torrent_status::state_t const prev_state;$/;"	m	class:libtorrent::final::torrent_status
prevent_request	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	static constexpr traversal_flags_t prevent_request = 0_bit;$/;"	m	struct:libtorrent::dht::traversal_algorithm
print	src/print.cpp	/^void print(char const* buf)$/;"	f
print_alert	src/client_test.cpp	/^void print_alert(lt::alert const* a, std::string& str)$/;"	f
print_alert	src/torrent.cpp	/^void print_alert(lt::alert const *a, std::string &str)$/;"	f
print_array	src/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt)$/;"	f	file:
print_block	src/client_test.cpp	/^bool print_block = false;$/;"	v
print_connecting_peers	src/client_test.cpp	/^bool print_connecting_peers = false;$/;"	v
print_disk_stats	src/client_test.cpp	/^bool print_disk_stats = false;$/;"	v
print_downloads	src/client_test.cpp	/^bool print_downloads = false;$/;"	v
print_endpoint	src/client_test.cpp	/^std::string print_endpoint(lt::tcp::endpoint const& ep)$/;"	f
print_fails	src/client_test.cpp	/^bool print_fails = false;$/;"	v
print_file_progress	src/client_test.cpp	/^bool print_file_progress = false;$/;"	v
print_headers	src/torrent_view.cpp	/^void torrent_view::print_headers()$/;"	f	class:torrent_view
print_ip	src/client_test.cpp	/^bool print_ip = true;$/;"	v
print_local_ip	src/client_test.cpp	/^bool print_local_ip = false;$/;"	v
print_log	src/client_test.cpp	/^bool print_log = false;$/;"	v
print_matrix	src/client_test.cpp	/^bool print_matrix = false;$/;"	v
print_number	src/cJSON.c	/^static char *print_number(cJSON *item)$/;"	f	file:
print_object	src/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt)$/;"	f	file:
print_peer_info	src/client_test.cpp	/^int print_peer_info(std::string& out$/;"	f
print_peers	src/client_test.cpp	/^bool print_peers = false;$/;"	v
print_piece	src/client_test.cpp	/^void print_piece(lt::partial_piece_info const* pp$/;"	f
print_send_bufs	src/client_test.cpp	/^bool print_send_bufs = true;$/;"	v
print_settings	src/client_test.cpp	/^void print_settings(int const start, int const num$/;"	f
print_string	src/cJSON.c	/^static char *print_string(cJSON *item)	{return print_string_ptr(item->valuestring);}$/;"	f	file:
print_string_ptr	src/cJSON.c	/^static char *print_string_ptr(const char *str)$/;"	f	file:
print_tabs	src/torrent_view.cpp	/^void torrent_view::print_tabs()$/;"	f	class:torrent_view
print_timers	src/client_test.cpp	/^bool print_timers = false;$/;"	v
print_torrent	src/torrent_view.cpp	/^void torrent_view::print_torrent(lt::torrent_status const& s, bool selected)$/;"	f	class:torrent_view
print_trackers	src/client_test.cpp	/^bool print_trackers = false;$/;"	v
print_value	src/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt)$/;"	f	file:
prio_factor	libtorrent/include/libtorrent/piece_picker.hpp	/^			prio_factor = 3,$/;"	e	enum:libtorrent::piece_picker::__anon56
priorities	libtorrent/include/libtorrent/storage_defs.hpp	/^		aux::vector<download_priority_t, file_index_t> const& priorities;$/;"	m	class:libtorrent::storage_params::aux
prioritize_partial_pieces	libtorrent/include/libtorrent/settings_pack.hpp	/^			prioritize_partial_pieces,$/;"	e	enum:libtorrent::settings_pack::bool_types
prioritize_partials	libtorrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t prioritize_partials = 3_bit;$/;"	m	class:libtorrent::piece_picker
priority	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	int priority;$/;"	m	struct:libtorrent::bw_request
priority	libtorrent/include/libtorrent/peer_class.hpp	/^		int priority[2];$/;"	m	struct:libtorrent::peer_class
priority	libtorrent/include/libtorrent/piece_picker.hpp	/^			int priority(piece_picker const* picker) const$/;"	f	struct:libtorrent::piece_picker::piece_pos
priority	libtorrent/include/libtorrent/piece_picker.hpp	/^			int priority;$/;"	m	struct:libtorrent::piece_picker::piece_stats_t
priority	libtorrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER priority = 0;$/;"	m	struct:libtorrent::torrent_status
priority_levels	libtorrent/include/libtorrent/piece_picker.hpp	/^			priority_levels = 8,$/;"	e	enum:libtorrent::piece_picker::__anon56
priv	libtorrent/include/libtorrent/create_torrent.hpp	/^		bool priv() const { return m_private; }$/;"	f	struct:libtorrent::create_torrent
priv	libtorrent/include/libtorrent/torrent_info.hpp	/^		bool priv() const { return (m_flags & private_torrent) != 0; }$/;"	f	class:libtorrent::torrent_info
privacy_lookups	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool privacy_lookups = false;$/;"	m	struct:libtorrent::dht::dht_settings
private_torrent	libtorrent/include/libtorrent/tracker_manager.hpp	/^		bool private_torrent;$/;"	m	struct:libtorrent::tracker_request
process_indata	src/proxy.c	/^static void process_indata( proxy_peer * peer ) {$/;"	f	file:
process_msg	src/main.c	/^static int process_msg(struct client *cli)$/;"	f	file:
process_msg	src/server.c	/^static void process_msg(struct client *cli)$/;"	f	file:
program_name	src/main.c	/^const char program_name[] = "bt_server";$/;"	v
program_name	src/test.c	/^const char program_name[] = "test";$/;"	v
progress	libtorrent/include/libtorrent/peer_info.hpp	/^		float progress; \/\/ [0, 1]$/;"	m	struct:libtorrent::peer_info
progress	libtorrent/include/libtorrent/torrent_status.hpp	/^		float progress = 0.f;$/;"	m	struct:libtorrent::torrent_status
progress_bar	src/print.cpp	/^std::string const& progress_bar(int progress, int width, color_code c$/;"	f	class:std
progress_invert	include/print.hpp	/^enum { progress_invert = 1};$/;"	e	enum:__anon24
progress_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t TORRENT_DEPRECATED_MEMBER progress_notification = 7_bit;$/;"	m	class:libtorrent::alert
progress_ppm	libtorrent/include/libtorrent/peer_info.hpp	/^		int progress_ppm;$/;"	m	struct:libtorrent::peer_info
progress_ppm	libtorrent/include/libtorrent/torrent_status.hpp	/^		int progress_ppm = 0;$/;"	m	struct:libtorrent::torrent_status
protocol	libtorrent/include/libtorrent/aux_/portmap.hpp	/^		portmap_protocol protocol = portmap_protocol::none;$/;"	m	struct:libtorrent::aux::base_mapping
protocol	libtorrent/include/libtorrent/http_parser.hpp	/^		std::string const& protocol() const { return m_protocol; }$/;"	f	class:libtorrent::http_parser::std
protocol	libtorrent/include/libtorrent/kademlia/node.hpp	/^		udp protocol;$/;"	m	struct:libtorrent::dht::node::protocol_descriptor
protocol	libtorrent/include/libtorrent/kademlia/node.hpp	/^	udp protocol() const { return m_protocol.protocol; }$/;"	f	class:libtorrent::dht::node
protocol	libtorrent/include/libtorrent/netlink.hpp	/^		int protocol() const$/;"	f	class:libtorrent::netlink
protocol	libtorrent/include/libtorrent/netlink.hpp	/^		protocol_type protocol() const$/;"	f	class:libtorrent::basic_nl_endpoint
protocol	libtorrent/include/libtorrent/upnp.hpp	/^		portmap_protocol protocol = portmap_protocol::none;$/;"	m	struct:libtorrent::final::global_mapping_t
protocol_blocked	libtorrent/include/libtorrent/close_reason.hpp	/^		protocol_blocked,$/;"	m	class:libtorrent::close_reason_t
protocol_descriptor	libtorrent/include/libtorrent/kademlia/node.hpp	/^	struct protocol_descriptor$/;"	s	class:libtorrent::dht::node
protocol_family_name	libtorrent/include/libtorrent/kademlia/node.hpp	/^	char const* protocol_family_name() const { return m_protocol.family_name; }$/;"	f	class:libtorrent::dht::node
protocol_nodes_key	libtorrent/include/libtorrent/kademlia/node.hpp	/^	char const* protocol_nodes_key() const { return m_protocol.nodes_key; }$/;"	f	class:libtorrent::dht::node
protocol_version	libtorrent/include/libtorrent/natpmp.hpp	/^	enum protocol_version$/;"	g	struct:libtorrent::natpmp
proxy	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		static constexpr listen_socket_flags_t proxy = 3_bit;$/;"	m	struct:libtorrent::aux::listen_socket_t
proxy	src/ot_accesslist.c	/^  ot_net    *proxy;$/;"	m	struct:__anon1	file:
proxy_base	libtorrent/include/libtorrent/proxy_base.hpp	/^class proxy_base$/;"	c	namespace:libtorrent
proxy_hostname	libtorrent/include/libtorrent/settings_pack.hpp	/^			proxy_hostname,$/;"	e	enum:libtorrent::settings_pack::string_types
proxy_hostnames	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^		bool proxy_hostnames = true;$/;"	m	struct:libtorrent::aux::proxy_settings
proxy_hostnames	libtorrent/include/libtorrent/settings_pack.hpp	/^			proxy_hostnames,$/;"	e	enum:libtorrent::settings_pack::bool_types
proxy_password	libtorrent/include/libtorrent/settings_pack.hpp	/^			proxy_password,$/;"	e	enum:libtorrent::settings_pack::string_types
proxy_peer	src/proxy.c	/^} proxy_peer;$/;"	t	typeref:struct:__anon10	file:
proxy_peer_connections	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^		bool proxy_peer_connections = true;$/;"	m	struct:libtorrent::aux::proxy_settings
proxy_peer_connections	libtorrent/include/libtorrent/settings_pack.hpp	/^			proxy_peer_connections,$/;"	e	enum:libtorrent::settings_pack::bool_types
proxy_port	libtorrent/include/libtorrent/settings_pack.hpp	/^			proxy_port,$/;"	e	enum:libtorrent::settings_pack::int_types
proxy_settings	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^	struct TORRENT_EXPORT proxy_settings$/;"	s	namespace:libtorrent::aux
proxy_tracker_connections	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^		bool proxy_tracker_connections = true;$/;"	m	struct:libtorrent::aux::proxy_settings
proxy_tracker_connections	libtorrent/include/libtorrent/settings_pack.hpp	/^			proxy_tracker_connections,$/;"	e	enum:libtorrent::settings_pack::bool_types
proxy_type	libtorrent/include/libtorrent/settings_pack.hpp	/^			proxy_type,$/;"	e	enum:libtorrent::settings_pack::int_types
proxy_username	libtorrent/include/libtorrent/settings_pack.hpp	/^			proxy_username,$/;"	e	enum:libtorrent::settings_pack::string_types
proxylist_add_network	src/ot_accesslist.c	/^int proxylist_add_network( const ot_net *proxy, const ot_net *net ) {$/;"	f
proxylist_check_proxy	src/ot_accesslist.c	/^int proxylist_check_proxy( const ot_ip6 proxy, const ot_ip6 address ) {$/;"	f
pthread_bt	src/main.c	/^pthread_t pthread_server, pthread_bt, pthread_track, pthread_make_torrent;$/;"	v
pthread_bt	src/server.c	/^pthread_t pthread_tcp, pthread_bt, pthread_track;$/;"	v
pthread_make_torrent	src/main.c	/^pthread_t pthread_server, pthread_bt, pthread_track, pthread_make_torrent;$/;"	v
pthread_server	src/main.c	/^pthread_t pthread_server, pthread_bt, pthread_track, pthread_make_torrent;$/;"	v
pthread_tcp	src/server.c	/^pthread_t pthread_tcp, pthread_bt, pthread_track;$/;"	v
pthread_track	src/main.c	/^pthread_t pthread_server, pthread_bt, pthread_track, pthread_make_torrent;$/;"	v
pthread_track	src/server.c	/^pthread_t pthread_tcp, pthread_bt, pthread_track;$/;"	v
ptr	libtorrent/include/libtorrent/lazy_entry.hpp	/^		char const* ptr;$/;"	m	struct:libtorrent::pascal_string
public_key	libtorrent/include/libtorrent/kademlia/types.hpp	/^		explicit public_key(char const* b)$/;"	f	struct:libtorrent::dht::public_key
public_key	libtorrent/include/libtorrent/kademlia/types.hpp	/^	struct public_key$/;"	s	namespace:libtorrent::dht
push_back	libtorrent/include/libtorrent/linked_list.hpp	/^		void push_back(T* e)$/;"	f	struct:libtorrent::linked_list
push_back	libtorrent/include/libtorrent/tailqueue.hpp	/^		void push_back(T* e)$/;"	f	struct:libtorrent::tailqueue
push_front	libtorrent/include/libtorrent/linked_list.hpp	/^		void push_front(T* e)$/;"	f	struct:libtorrent::linked_list
push_front	libtorrent/include/libtorrent/tailqueue.hpp	/^		void push_front(T* e)$/;"	f	struct:libtorrent::tailqueue
put_data	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^struct put_data: traversal_algorithm$/;"	s	namespace:libtorrent::dht
put_data_observer	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	put_data_observer($/;"	f	struct:libtorrent::dht::put_data_observer
put_data_observer	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^struct put_data_observer : traversal_observer$/;"	s	namespace:libtorrent::dht
q	libowfat/dns/dns_ip.c	/^static char *q = 0;$/;"	v	file:
q	libowfat/dns/dns_ip6.c	/^static char *q = 0;$/;"	v	file:
q	libowfat/dns/dns_mx.c	/^static char *q = 0;$/;"	v	file:
q	libowfat/dns/dns_name.c	/^static char *q = 0;$/;"	v	file:
q	libowfat/dns/dns_txt.c	/^static char *q = 0;$/;"	v	file:
q	libowfat/io.h	/^  } q[SLOTS];$/;"	m	struct:iomux	typeref:struct:iomux::__anon29
q	libowfat/libowfat/io.h	/^  } q[SLOTS];$/;"	m	struct:iomux	typeref:struct:iomux::__anon35
qtype	libowfat/dns.h	/^  char qtype[2];$/;"	m	struct:dns_transmit
qtype	libowfat/libowfat/dns.h	/^  char qtype[2];$/;"	m	struct:dns_transmit
query	libowfat/dns.h	/^  char *query; \/* 0, or dynamically allocated *\/$/;"	m	struct:dns_transmit
query	libowfat/libowfat/dns.h	/^  char *query; \/* 0, or dynamically allocated *\/$/;"	m	struct:dns_transmit
query_accurate_download_counters	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_accurate_download_counters = 1_bit;$/;"	m	struct:libtorrent::torrent_handle
query_distributed_copies	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_distributed_copies = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
query_last_seen_complete	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_last_seen_complete = 2_bit;$/;"	m	struct:libtorrent::torrent_handle
query_name	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_name = 6_bit;$/;"	m	struct:libtorrent::torrent_handle
query_pieces	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_pieces = 3_bit;$/;"	m	struct:libtorrent::torrent_handle
query_save_path	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_save_path = 7_bit;$/;"	m	struct:libtorrent::torrent_handle
query_torrent_file	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_torrent_file = 5_bit;$/;"	m	struct:libtorrent::torrent_handle
query_verified_pieces	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_verified_pieces = 4_bit;$/;"	m	struct:libtorrent::torrent_handle
queryfree	libowfat/dns/dns_transmit.c	/^static void queryfree(struct dns_transmit *d)$/;"	f	file:
querylen	libowfat/dns.h	/^  unsigned int querylen;$/;"	m	struct:dns_transmit
querylen	libowfat/libowfat/dns.h	/^  unsigned int querylen;$/;"	m	struct:dns_transmit
queue_bytes	libtorrent/include/libtorrent/peer_info.hpp	/^		int queue_bytes;$/;"	m	struct:libtorrent::peer_info
queue_position	libtorrent/include/libtorrent/torrent.hpp	/^		queue_position_t queue_position() const { return m_sequence_number; }$/;"	f	class:libtorrent::torrent
queued	libtorrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER static constexpr peer_flags_t queued = 8_bit;$/;"	m	struct:libtorrent::peer_info
queued_bytes	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		mutable std::int64_t queued_bytes;$/;"	m	struct:libtorrent::cache_status
queued_disk_jobs	libtorrent/include/libtorrent/performance_counters.hpp	/^			queued_disk_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
queued_for_checking	libtorrent/include/libtorrent/torrent_status.hpp	/^			queued_for_checking TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::torrent_status::state_t
queued_jobs	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int queued_jobs;$/;"	m	struct:libtorrent::cache_status
queued_write_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			queued_write_bytes,$/;"	e	enum:libtorrent::counters::stats_gauge_t
quit	src/client_test.cpp	/^bool quit = false;$/;"	v
r	libowfat/test/httpd.c	/^  array r;$/;"	m	struct:http_data	file:
random_access	libtorrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t random_access = 5_bit;$/;"	m	namespace:libtorrent::file_open_mode
random_access	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t random_access = 4_bit;$/;"	m	namespace:libtorrent::open_mode
random_shuffle	libtorrent/include/libtorrent/random.hpp	/^	void random_shuffle(Range& range)$/;"	f	namespace:libtorrent::aux
randombind	libowfat/dns/dns_transmit.c	/^static int randombind(struct dns_transmit *d)$/;"	f	file:
range	libtorrent/include/libtorrent/aux_/range.hpp	/^	iterator_range<Iter> range(Iter begin, Iter end)$/;"	f	namespace:libtorrent::aux
range	libtorrent/include/libtorrent/aux_/range.hpp	/^	iterator_range<T const*> range(vector<T, IndexType> const& vec$/;"	f	namespace:libtorrent::aux
range	libtorrent/include/libtorrent/aux_/range.hpp	/^	iterator_range<T*> range(vector<T, IndexType>& vec$/;"	f	namespace:libtorrent::aux
range	libtorrent/include/libtorrent/ip_filter.hpp	/^			range(Addr addr, std::uint32_t a = 0) : start(addr), access(a) {} \/\/ NOLINT$/;"	f	struct:libtorrent::detail::filter_impl::range
range	libtorrent/include/libtorrent/ip_filter.hpp	/^		struct range$/;"	s	class:libtorrent::detail::filter_impl
range_arrayinbuf	libowfat/mult/range_arrayinbuf.c	/^int range_arrayinbuf(const void* buf1,size_t len,$/;"	f
range_bufinbuf	libowfat/libowfat/rangecheck.h	/^__static inline __gnuinline int range_bufinbuf(const void* buf1,size_t len1,const void* buf2,size_t len2) {$/;"	f
range_bufinbuf	libowfat/rangecheck.h	/^__static inline __gnuinline int range_bufinbuf(const void* buf1,size_t len1,const void* buf2,size_t len2) {$/;"	f
range_ptrinbuf	libowfat/libowfat/rangecheck.h	/^__static inline __gnuinline int range_ptrinbuf(const void* buf,size_t len,const void* ptr) {$/;"	f
range_ptrinbuf	libowfat/rangecheck.h	/^__static inline __gnuinline int range_ptrinbuf(const void* buf,size_t len,const void* ptr) {$/;"	f
range_ptrinbuf2	libowfat/libowfat/rangecheck.h	/^__static inline __gnuinline int range_ptrinbuf2(const void* Min,const void* Max,const void* ptr) {$/;"	f
range_ptrinbuf2	libowfat/rangecheck.h	/^__static inline __gnuinline int range_ptrinbuf2(const void* Min,const void* Max,const void* ptr) {$/;"	f
range_str2inbuf	libowfat/mult/range_str2inbuf.c	/^int range_str2inbuf(const void* buf,size_t len,const void* stringstart) {$/;"	f
range_str4inbuf	libowfat/mult/range_str4inbuf.c	/^int range_str4inbuf(const void* buf,size_t len,const void* stringstart) {$/;"	f
range_strinbuf	libowfat/mult/range_strinbuf.c	/^int range_strinbuf(const void* buf,size_t len,const void* stringstart) {$/;"	f
range_validbuf	libowfat/libowfat/rangecheck.h	/^__static inline __gnuinline int range_validbuf(const void* buf,size_t len) {$/;"	f
range_validbuf	libowfat/rangecheck.h	/^__static inline __gnuinline int range_validbuf(const void* buf,size_t len) {$/;"	f
range_validbuf2	libowfat/libowfat/rangecheck.h	/^__static inline __gnuinline int range_validbuf2(const void* Min,const void* Max) {$/;"	f
range_validbuf2	libowfat/rangecheck.h	/^__static inline __gnuinline int range_validbuf2(const void* Min,const void* Max) {$/;"	f
rarest_first	libtorrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t rarest_first = 0_bit;$/;"	m	class:libtorrent::piece_picker
rate	libtorrent/include/libtorrent/stat.hpp	/^		std::int32_t rate() const { return m_5_sec_average; }$/;"	f	class:libtorrent::stat_channel
rate_based_choker	libtorrent/include/libtorrent/settings_pack.hpp	/^			rate_based_choker = 2,$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
rate_choker_initial_threshold	libtorrent/include/libtorrent/settings_pack.hpp	/^			rate_choker_initial_threshold,$/;"	e	enum:libtorrent::settings_pack::int_types
rate_limit	libtorrent/include/libtorrent/http_connection.hpp	/^	int rate_limit() const$/;"	f	struct:libtorrent::http_connection
rate_limit_ip_overhead	libtorrent/include/libtorrent/settings_pack.hpp	/^			rate_limit_ip_overhead,$/;"	e	enum:libtorrent::settings_pack::bool_types
rate_limit_utp	libtorrent/include/libtorrent/settings_pack.hpp	/^			rate_limit_utp TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
rbegin	libtorrent/include/libtorrent/file_storage.hpp	/^		reverse_iterator rbegin() const { return m_files.rbegin(); }$/;"	f	class:libtorrent::file_storage
rbegin_deprecated	libtorrent/include/libtorrent/file_storage.hpp	/^		reverse_iterator rbegin_deprecated() const { return m_files.rbegin(); }$/;"	f	class:libtorrent::file_storage
rbegin_files	libtorrent/include/libtorrent/torrent_info.hpp	/^		reverse_file_iterator rbegin_files() const { return m_files.rbegin_deprecated(); }$/;"	f	class:libtorrent::torrent_info
rc4	libtorrent/include/libtorrent/pe_crypto.hpp	/^	struct rc4 {$/;"	s	namespace:libtorrent
rc4	libtorrent/include/libtorrent/session_settings.hpp	/^			rc4 = 2,$/;"	e	enum:libtorrent::pe_settings::enc_level
rc4_encrypted	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		bool rc4_encrypted() const$/;"	f	class:libtorrent::bt_peer_connection
rc4_encrypted	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t rc4_encrypted = 19_bit;$/;"	m	struct:libtorrent::peer_info
rc4_handler	libtorrent/include/libtorrent/pe_crypto.hpp	/^	struct TORRENT_EXTRA_EXPORT rc4_handler : crypto_plugin$/;"	s	namespace:libtorrent
rcon	src/ot_rijndael.c	/^static const uint32_t rcon[] = {$/;"	v	file:
rdtscl	libowfat/t.c	33;"	d	file:
read	libtorrent/include/libtorrent/aux_/dev_random.hpp	/^		void read(span<char> buffer)$/;"	f	struct:libtorrent::aux::dev_random
read	libtorrent/include/libtorrent/disk_io_job.hpp	/^		read$/;"	m	class:libtorrent::job_action_t
read_accept_response	libtorrent/include/libtorrent/i2p_stream.hpp	/^		read_accept_response,$/;"	e	enum:libtorrent::i2p_stream::state_t
read_body	libtorrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	e	enum:libtorrent::http_parser::__anon55
read_cache	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		enum kind_t { read_cache = 0, write_cache = 1, volatile_read_cache = 2 };$/;"	e	enum:libtorrent::cached_piece_info::kind_t
read_cache_blocks	libtorrent/include/libtorrent/performance_counters.hpp	/^			read_cache_blocks,$/;"	e	enum:libtorrent::counters::stats_gauge_t
read_cache_line_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			read_cache_line_size,$/;"	e	enum:libtorrent::settings_pack::int_types
read_cache_size	libtorrent/include/libtorrent/block_cache.hpp	/^		int read_cache_size() const { return m_read_cache_size; }$/;"	f	struct:libtorrent::block_cache
read_cache_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int read_cache_size;$/;"	m	struct:libtorrent::cache_status
read_connect_response	libtorrent/include/libtorrent/i2p_stream.hpp	/^		read_connect_response,$/;"	e	enum:libtorrent::i2p_stream::state_t
read_endpoint_list	libtorrent/include/libtorrent/socket_io.hpp	/^		std::vector<EndpointType> read_endpoint_list(libtorrent::bdecode_node const& n)$/;"	f	namespace:libtorrent::detail
read_header	libtorrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	e	enum:libtorrent::http_parser::__anon55
read_hello_response	libtorrent/include/libtorrent/i2p_stream.hpp	/^		read_hello_response,$/;"	e	enum:libtorrent::i2p_stream::state_t
read_impl	libtorrent/include/libtorrent/aux_/io.hpp	/^	read_impl(span<Byte>& view, type<T>)$/;"	f	namespace:libtorrent::aux
read_impl	libtorrent/include/libtorrent/aux_/io.hpp	/^	read_impl(span<Byte>& view, type<std::int8_t>)$/;"	f	namespace:libtorrent::aux
read_impl	libtorrent/include/libtorrent/aux_/io.hpp	/^	read_impl(span<Byte>& view, type<std::uint8_t>)$/;"	f	namespace:libtorrent::aux
read_impl	libtorrent/include/libtorrent/io.hpp	/^		inline T read_impl(InIt& start, type<T>)$/;"	f	namespace:libtorrent::detail
read_impl	libtorrent/include/libtorrent/io.hpp	/^		std::int8_t read_impl(InIt& start, type<std::int8_t>)$/;"	f	namespace:libtorrent::detail
read_impl	libtorrent/include/libtorrent/io.hpp	/^		std::uint8_t read_impl(InIt& start, type<std::uint8_t>)$/;"	f	namespace:libtorrent::detail
read_int16	libtorrent/include/libtorrent/aux_/io.hpp	/^	std::int16_t read_int16(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_int16	libtorrent/include/libtorrent/io.hpp	/^		std::int16_t read_int16(InIt& start)$/;"	f	namespace:libtorrent::detail
read_int32	libtorrent/include/libtorrent/aux_/io.hpp	/^	std::int32_t read_int32(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_int32	libtorrent/include/libtorrent/io.hpp	/^		std::int32_t read_int32(InIt& start)$/;"	f	namespace:libtorrent::detail
read_int64	libtorrent/include/libtorrent/aux_/io.hpp	/^	std::int64_t read_int64(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_int64	libtorrent/include/libtorrent/io.hpp	/^		std::int64_t read_int64(InIt& start)$/;"	f	namespace:libtorrent::detail
read_int8	libtorrent/include/libtorrent/aux_/io.hpp	/^	std::int8_t read_int8(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_int8	libtorrent/include/libtorrent/io.hpp	/^		std::int8_t read_int8(InIt& start)$/;"	f	namespace:libtorrent::detail
read_jobs	libtorrent/include/libtorrent/block_cache.hpp	/^		tailqueue<disk_io_job> read_jobs;$/;"	m	struct:libtorrent::cached_piece_entry
read_jobs_in_use	libtorrent/include/libtorrent/disk_job_pool.hpp	/^		int read_jobs_in_use() const { return m_read_jobs; }$/;"	f	struct:libtorrent::disk_job_pool
read_lru1	libtorrent/include/libtorrent/block_cache.hpp	/^			read_lru1,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
read_lru1_ghost	libtorrent/include/libtorrent/block_cache.hpp	/^			read_lru1_ghost,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
read_lru2	libtorrent/include/libtorrent/block_cache.hpp	/^			read_lru2,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
read_lru2_ghost	libtorrent/include/libtorrent/block_cache.hpp	/^			read_lru2_ghost,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
read_name_lookup_response	libtorrent/include/libtorrent/i2p_stream.hpp	/^		read_name_lookup_response$/;"	e	enum:libtorrent::i2p_stream::state_t
read_node_endpoint	libtorrent/include/libtorrent/kademlia/io.hpp	/^	node_endpoint read_node_endpoint(udp protocol, InIt&& in)$/;"	f	namespace:libtorrent::dht
read_only	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool read_only = false;$/;"	m	struct:libtorrent::dht::dht_settings
read_packet_order	src/socket.c	/^unsigned short read_packet_order(unsigned char *buf)$/;"	f
read_packet_size	src/socket.c	/^uint32_t read_packet_size(unsigned char *buf)$/;"	f
read_packet_token	src/socket.c	/^unsigned short read_packet_token(unsigned char *buf)$/;"	f
read_piece_struct	libtorrent/include/libtorrent/torrent.hpp	/^		struct read_piece_struct$/;"	s	class:libtorrent::torrent
read_queue_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int read_queue_size;$/;"	m	struct:libtorrent::cache_status
read_session_create_response	libtorrent/include/libtorrent/i2p_stream.hpp	/^		read_session_create_response,$/;"	e	enum:libtorrent::i2p_stream::state_t
read_some	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		std::size_t read_some(Mutable_Buffers const& buffers)$/;"	f	struct:libtorrent::aux::socket_type
read_some	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		std::size_t read_some(Mutable_Buffers const& buffers, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
read_some	libtorrent/include/libtorrent/proxy_base.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers)$/;"	f	class:libtorrent::proxy_base
read_some	libtorrent/include/libtorrent/proxy_base.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers, error_code& ec)$/;"	f	class:libtorrent::proxy_base
read_some	libtorrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers)$/;"	f	class:libtorrent::ssl_stream
read_some	libtorrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
read_some	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers)$/;"	f	struct:libtorrent::utp_stream
read_some	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers, error_code& ec)$/;"	f	struct:libtorrent::utp_stream
read_state	libtorrent/include/libtorrent/peer_info.hpp	/^		bandwidth_state_flags_t read_state;$/;"	m	struct:libtorrent::peer_info
read_status	libtorrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	e	enum:libtorrent::http_parser::__anon55
read_string	libtorrent/include/libtorrent/bencode.hpp	/^		void read_string(InIt& in, InIt end, int len, std::string& str, bool& err)$/;"	f	namespace:libtorrent::detail
read_uint16	libtorrent/include/libtorrent/aux_/io.hpp	/^	std::uint16_t read_uint16(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_uint16	libtorrent/include/libtorrent/io.hpp	/^		std::uint16_t read_uint16(InIt& start)$/;"	f	namespace:libtorrent::detail
read_uint32	libtorrent/include/libtorrent/aux_/io.hpp	/^	std::uint32_t read_uint32(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_uint32	libtorrent/include/libtorrent/io.hpp	/^		std::uint32_t read_uint32(InIt& start)$/;"	f	namespace:libtorrent::detail
read_uint64	libtorrent/include/libtorrent/aux_/io.hpp	/^	std::uint64_t read_uint64(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_uint64	libtorrent/include/libtorrent/io.hpp	/^		std::uint64_t read_uint64(InIt& start)$/;"	f	namespace:libtorrent::detail
read_uint8	libtorrent/include/libtorrent/aux_/io.hpp	/^	std::uint8_t read_uint8(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_uint8	libtorrent/include/libtorrent/io.hpp	/^		std::uint8_t read_uint8(InIt& start)$/;"	f	namespace:libtorrent::detail
read_until	libtorrent/include/libtorrent/bencode.hpp	/^		std::string read_until(InIt& in, InIt end, char end_token, bool& err)$/;"	f	namespace:libtorrent::detail
read_v4_address	libtorrent/include/libtorrent/socket_io.hpp	/^		address read_v4_address(InIt&& in)$/;"	f	namespace:libtorrent::detail
read_v4_endpoint	libtorrent/include/libtorrent/socket_io.hpp	/^		Endpoint read_v4_endpoint(InIt&& in)$/;"	f	namespace:libtorrent::detail
read_v6_address	libtorrent/include/libtorrent/socket_io.hpp	/^		address read_v6_address(InIt&& in)$/;"	f	namespace:libtorrent::detail
read_v6_endpoint	libtorrent/include/libtorrent/socket_io.hpp	/^		Endpoint read_v6_endpoint(InIt&& in)$/;"	f	namespace:libtorrent::detail
read_write	libtorrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t read_write = 1_bit;$/;"	m	namespace:libtorrent::file_open_mode
read_write	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t read_write = 1_bit;$/;"	m	namespace:libtorrent::open_mode
readclose	libowfat/open/readclose.c	/^ssize_t readclose(int fd,stralloc *sa,size_t bufsize)$/;"	f
readclose_append	libowfat/open/readclose.c	/^ssize_t readclose_append(int fd,stralloc *sa,size_t bufsize)$/;"	f
reading_count	libtorrent/include/libtorrent/block_cache.hpp	/^		int reading_count = 0;$/;"	m	struct:libtorrent::cached_block_entry
readpos	libowfat/test/io.c	/^int64 readpos = 0;$/;"	v
readpos	libowfat/test/io2.c	/^int64 readpos = 0;$/;"	v
readqueued	libowfat/io_internal.h	/^  unsigned int readqueued:2;$/;"	m	struct:__anon40
reads	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int reads;$/;"	m	struct:libtorrent::cache_status
ready_for_connections	libtorrent/include/libtorrent/torrent.hpp	/^		bool ready_for_connections() const$/;"	f	class:libtorrent::torrent
reason	libtorrent/include/libtorrent/alert_types.hpp	/^		close_reason_t const reason;$/;"	m	struct:libtorrent::final
reason_t	libtorrent/include/libtorrent/block_cache.hpp	/^		enum reason_t { ref_hashing = 0, ref_reading = 1, ref_flushing = 2 };$/;"	g	struct:libtorrent::block_cache
receive_buffer	libtorrent/include/libtorrent/receive_buffer.hpp	/^struct TORRENT_EXTRA_EXPORT receive_buffer$/;"	s	namespace:libtorrent
receive_buffer_size	libtorrent/include/libtorrent/peer_info.hpp	/^		int receive_buffer_size;$/;"	m	struct:libtorrent::peer_info
receive_buffer_watermark	libtorrent/include/libtorrent/peer_info.hpp	/^		int receive_buffer_watermark;$/;"	m	struct:libtorrent::peer_info
receive_quota	libtorrent/include/libtorrent/peer_info.hpp	/^		int receive_quota;$/;"	m	struct:libtorrent::peer_info
received	libtorrent/include/libtorrent/receive_buffer.hpp	/^	void received(int bytes_transferred)$/;"	f	struct:libtorrent::receive_buffer
received_bytes	libtorrent/include/libtorrent/stat.hpp	/^		void received_bytes(int bytes_payload, int bytes_protocol)$/;"	f	class:libtorrent::stat
received_listen_port	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool received_listen_port() const { return m_received_listen_port; }$/;"	f	class:libtorrent::peer_connection
received_listen_port	libtorrent/include/libtorrent/peer_connection.hpp	/^		void received_listen_port()$/;"	f	class:libtorrent::peer_connection
received_synack	libtorrent/include/libtorrent/stat.hpp	/^		void received_synack(bool ipv6)$/;"	f	class:libtorrent::stat
recv_add_task	src/main.c	/^static int recv_add_task(struct client *cli)$/;"	f	file:
recv_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			recv_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_del_task	src/main.c	/^static int recv_del_task(struct client *cli)$/;"	f	file:
recv_failed_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			recv_failed_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_get_task_state	src/main.c	/^static int recv_get_task_state(struct client *cli)$/;"	f	file:
recv_ip_overhead_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			recv_ip_overhead_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_make_torrent	src/main.c	/^static int recv_make_torrent(struct client *cli)$/;"	f	file:
recv_payload_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			recv_payload_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_redundant_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			recv_redundant_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_socket_buffer_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			recv_socket_buffer_size,$/;"	e	enum:libtorrent::settings_pack::int_types
recv_start_bt	src/main.c	/^static int recv_start_bt(struct client *cli)$/;"	f	file:
recv_stop_bt	src/main.c	/^static int recv_stop_bt(struct client *cli)$/;"	f	file:
recv_tracker_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			recv_tracker_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
redirecting	libtorrent/include/libtorrent/error_code.hpp	/^			redirecting,$/;"	e	enum:libtorrent::errors::error_code_enum
redirects	libtorrent/include/libtorrent/torrent.hpp	/^		std::map<file_index_t, std::string> redirects;$/;"	m	struct:libtorrent::web_seed_t
redundant	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t redundant;$/;"	m	struct:libtorrent::tracker_request
redundant_pkts_in	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t redundant_pkts_in;$/;"	m	struct:libtorrent::utp_status
ref_flushing	libtorrent/include/libtorrent/block_cache.hpp	/^		enum reason_t { ref_hashing = 0, ref_reading = 1, ref_flushing = 2 };$/;"	e	enum:libtorrent::block_cache::reason_t
ref_hashing	libtorrent/include/libtorrent/block_cache.hpp	/^		enum reason_t { ref_hashing = 0, ref_reading = 1, ref_flushing = 2 };$/;"	e	enum:libtorrent::block_cache::reason_t
ref_reading	libtorrent/include/libtorrent/block_cache.hpp	/^		enum reason_t { ref_hashing = 0, ref_reading = 1, ref_flushing = 2 };$/;"	e	enum:libtorrent::block_cache::reason_t
refcount	libtorrent/include/libtorrent/block_cache.hpp	/^		std::int32_t refcount = 0;$/;"	m	struct:libtorrent::cached_piece_entry
refcount	libtorrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t refcount:29;$/;"	m	struct:libtorrent::cached_block_entry
references	libtorrent/include/libtorrent/peer_class.hpp	/^		int references;$/;"	m	struct:libtorrent::peer_class
refs	libtorrent/include/libtorrent/debug.hpp	/^		int refs;$/;"	m	struct:libtorrent::async_t
regular_file	libtorrent/include/libtorrent/aux_/path.hpp	/^			regular_file = 0x8000  \/\/ regular$/;"	e	enum:libtorrent::file_status::__anon61
reject_piece_picks	libtorrent/include/libtorrent/performance_counters.hpp	/^			reject_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
release	libtorrent/include/libtorrent/lazy_entry.hpp	/^		void release()$/;"	f	struct:libtorrent::lazy_entry
release	libtorrent/include/libtorrent/packet_pool.hpp	/^		void release(packet_ptr p)$/;"	f	struct:libtorrent::packet_pool
release_files	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, release_files$/;"	m	class:libtorrent::job_action_t
release_packet	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		void release_packet(packet_ptr p) { m_packet_pool.release(std::move(p)); }$/;"	f	struct:libtorrent::utp_socket_manager
remap_natpmp	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				remap_natpmp = 1,$/;"	e	enum:libtorrent::aux::final::remap_port_mask_t
remap_natpmp_and_upnp	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				remap_natpmp_and_upnp = 3$/;"	e	enum:libtorrent::aux::final::remap_port_mask_t
remap_port_mask_t	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			enum remap_port_mask_t$/;"	g	struct:libtorrent::aux::final
remap_upnp	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				remap_upnp = 2,$/;"	e	enum:libtorrent::aux::final::remap_port_mask_t
remote	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			udp::endpoint remote;$/;"	m	struct:libtorrent::broadcast_socket::socket_entry
remote_choked	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t remote_choked = 3_bit;$/;"	m	struct:libtorrent::peer_info
remote_dl_rate	libtorrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER int remote_dl_rate;$/;"	m	struct:libtorrent::peer_info
remote_endpoint	libtorrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type remote_endpoint() const$/;"	f	class:libtorrent::proxy_base
remote_endpoint	libtorrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type remote_endpoint(error_code& ec) const$/;"	f	class:libtorrent::proxy_base
remote_endpoint	libtorrent/include/libtorrent/ssl_stream.hpp	/^	endpoint_type remote_endpoint() const$/;"	f	class:libtorrent::ssl_stream
remote_endpoint	libtorrent/include/libtorrent/ssl_stream.hpp	/^	endpoint_type remote_endpoint(error_code& ec) const$/;"	f	class:libtorrent::ssl_stream
remote_endpoint	libtorrent/include/libtorrent/utp_stream.hpp	/^	endpoint_type remote_endpoint() const$/;"	f	struct:libtorrent::utp_stream
remote_host_must_be_wildcard	libtorrent/include/libtorrent/upnp.hpp	/^			remote_host_must_be_wildcard = 726,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
remote_interested	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t remote_interested = 2_bit;$/;"	m	struct:libtorrent::peer_info
remove	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^		void remove(socket_type_t const st, peer_class_t const peer_class)$/;"	f	namespace:libtorrent
remove_peer_from_torrent	src/trackerlogic.c	/^size_t remove_peer_from_torrent( PROTO_FLAG proto, struct ot_workstruct *ws ) {$/;"	f
remove_peer_from_torrent_proxy	src/proxy.c	/^size_t remove_peer_from_torrent_proxy( ot_hash hash, ot_peer *peer ) {$/;"	f
remove_torrent	src/torrent_view.cpp	/^void torrent_view::remove_torrent(lt::torrent_handle h)$/;"	f	class:torrent_view
remove_traversal_algorithm	libtorrent/include/libtorrent/kademlia/node.hpp	/^	void remove_traversal_algorithm(traversal_algorithm* a)$/;"	f	class:libtorrent::dht::node
remove_usb	src/tools.c	/^int remove_usb(char *buf)$/;"	f
removed	libtorrent/include/libtorrent/torrent.hpp	/^		bool removed = false;$/;"	m	struct:libtorrent::web_seed_t
removed	libtorrent/include/libtorrent/torrent.hpp	/^		void removed()$/;"	f	class:libtorrent::torrent
rename_file	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, rename_file$/;"	m	class:libtorrent::job_action_t
rename_file	libtorrent/include/libtorrent/torrent_info.hpp	/^		void rename_file(file_index_t index, std::string const& new_filename)$/;"	f	class:libtorrent::torrent_info
renamed_files	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::map<file_index_t, std::string>> renamed_files;$/;"	m	struct:libtorrent::add_torrent_params
rend	libtorrent/include/libtorrent/file_storage.hpp	/^		reverse_iterator rend() const { return m_files.rend(); }$/;"	f	class:libtorrent::file_storage
rend_deprecated	libtorrent/include/libtorrent/file_storage.hpp	/^		reverse_iterator rend_deprecated() const { return m_files.rend(); }$/;"	f	class:libtorrent::file_storage
rend_files	libtorrent/include/libtorrent/torrent_info.hpp	/^		reverse_file_iterator rend_files() const { return m_files.rend_deprecated(); }$/;"	f	class:libtorrent::torrent_info
render	src/session_view.cpp	/^void session_view::render()$/;"	f	class:session_view
render	src/torrent_view.cpp	/^void torrent_view::render()$/;"	f	class:torrent_view
rendezvous	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			rendezvous = 0,$/;"	m	class:libtorrent::bt_peer_connection::hp_message
reopen_map_ports	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr reopen_network_flags_t reopen_map_ports = 0_bit;$/;"	m	struct:libtorrent::session_handle
repeat_lengths_with_no_first_length	libtorrent/include/libtorrent/gzip.hpp	/^			repeat_lengths_with_no_first_length,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
repeat_more_than_specified_lengths	libtorrent/include/libtorrent/gzip.hpp	/^			repeat_more_than_specified_lengths,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
replacements	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	bucket_t replacements;$/;"	m	struct:libtorrent::dht::routing_table_node
reply	include/trackerlogic.h	/^  char    *reply;$/;"	m	struct:ot_workstruct
reply_size	include/trackerlogic.h	/^  ssize_t  reply_size;$/;"	m	struct:ot_workstruct
report_redundant_bytes	libtorrent/include/libtorrent/settings_pack.hpp	/^			report_redundant_bytes,$/;"	e	enum:libtorrent::settings_pack::bool_types
report_true_downloaded	libtorrent/include/libtorrent/settings_pack.hpp	/^			report_true_downloaded,$/;"	e	enum:libtorrent::settings_pack::bool_types
report_web_seed_downloads	libtorrent/include/libtorrent/settings_pack.hpp	/^			report_web_seed_downloads,$/;"	e	enum:libtorrent::settings_pack::bool_types
reqOrRes	include/packet.h	/^    u8_t   reqOrRes;            \/\/请求还是响应   例如 0x01: 请求 0x02: 响应$/;"	m	struct:yzy_packet
request	include/ot_http.h	/^  array            request;$/;"	m	struct:http_data
request	include/trackerlogic.h	/^  char    *request;$/;"	m	struct:ot_workstruct
request	libtorrent/include/libtorrent/alert_types.hpp	/^		peer_request const request;$/;"	m	struct:libtorrent::final
request_callback	libtorrent/include/libtorrent/tracker_manager.hpp	/^		request_callback() {}$/;"	f	struct:libtorrent::request_callback
request_callback	libtorrent/include/libtorrent/tracker_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT request_callback$/;"	s	namespace:libtorrent
request_code	include/packet.h	/^    u32_t  request_code;        \/\/请求编号       例如 0x00000001  用于区别每个链接每次请求的唯一性$/;"	m	struct:yzy_packet
request_large_blocks	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool request_large_blocks() const$/;"	f	class:libtorrent::peer_connection
request_large_blocks	libtorrent/include/libtorrent/peer_connection.hpp	/^		void request_large_blocks(bool b)$/;"	f	class:libtorrent::peer_connection
request_latency	libtorrent/include/libtorrent/performance_counters.hpp	/^			request_latency,$/;"	e	enum:libtorrent::counters::stats_gauge_t
request_queue_time	libtorrent/include/libtorrent/settings_pack.hpp	/^			request_queue_time,$/;"	e	enum:libtorrent::settings_pack::int_types
request_size	include/trackerlogic.h	/^  ssize_t  request_size;$/;"	m	struct:ot_workstruct
request_size	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	int request_size;$/;"	m	struct:libtorrent::bw_request
request_timeout	libtorrent/include/libtorrent/peer_info.hpp	/^		int request_timeout;$/;"	m	struct:libtorrent::peer_info
request_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			request_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
request_when_choked	libtorrent/include/libtorrent/close_reason.hpp	/^		request_when_choked,$/;"	m	class:libtorrent::close_reason_t
requested	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t requested:15;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
requested	libtorrent/include/libtorrent/torrent_handle.hpp	/^			requested,$/;"	e	enum:libtorrent::block_info::block_state_t
requested	libtorrent/include/libtorrent/torrent_handle.hpp	/^		int requested;$/;"	m	struct:libtorrent::partial_piece_info
requests_in_buffer	libtorrent/include/libtorrent/peer_info.hpp	/^		int requests_in_buffer;$/;"	m	struct:libtorrent::peer_info
requires_ssl_connection	libtorrent/include/libtorrent/error_code.hpp	/^			requires_ssl_connection,$/;"	e	enum:libtorrent::errors::error_code_enum
reserve	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void reserve(std::size_t s)$/;"	f	struct:libtorrent::aux::container_wrapper
reserve	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void reserve(underlying_index s)$/;"	f	struct:libtorrent::aux::container_wrapper
reserved	libtorrent/include/libtorrent/error_code.hpp	/^			reserved,$/;"	e	enum:libtorrent::errors::error_code_enum
reset	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		void reset()$/;"	f	struct:libtorrent::aux::crypt_hash
reset	libtorrent/include/libtorrent/copy_ptr.hpp	/^		void reset(T* t = nullptr) { m_ptr.reset(t); }$/;"	f	struct:libtorrent::copy_ptr
reset	libtorrent/include/libtorrent/disk_interface.hpp	/^		void reset()$/;"	f	struct:libtorrent::storage_holder
reset_fail_count	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	void reset_fail_count() { if (pinged()) timeout_count = 0; }$/;"	f	struct:libtorrent::dht::node_entry
reset_info_block	src/proxy.c	/^void reset_info_block( proxy_peer * peer ) {$/;"	f
resize	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void resize(std::size_t s)$/;"	f	struct:libtorrent::aux::container_wrapper
resize	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void resize(std::size_t s, T const& v)$/;"	f	struct:libtorrent::aux::container_wrapper
resize	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void resize(underlying_index s)$/;"	f	struct:libtorrent::aux::container_wrapper
resize	libtorrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void resize(underlying_index s, T const& v)$/;"	f	struct:libtorrent::aux::container_wrapper
resize_to_bit_size	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         inline void resize_to_bit_size(cpp_int_backend<MinBits, MaxBits, SignType, Checked, Allocator>& newval, unsigned bits, const mpl::false_&)$/;"	f	namespace:boost::multiprecision::detail
resize_to_bit_size	libtorrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         inline void resize_to_bit_size(cpp_int_backend<MinBits, MaxBits, SignType, Checked, Allocator>& newval, unsigned, const mpl::true_&)$/;"	f	namespace:boost::multiprecision::detail
resolve_links	libtorrent/include/libtorrent/resolve_links.hpp	/^	struct TORRENT_EXTRA_EXPORT resolve_links$/;"	s	namespace:libtorrent
resolver_cache_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			resolver_cache_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
resolver_interface	libtorrent/include/libtorrent/resolver_interface.hpp	/^struct TORRENT_EXTRA_EXPORT resolver_interface$/;"	s	namespace:libtorrent
resolving	libtorrent/include/libtorrent/torrent.hpp	/^		bool resolving = false;$/;"	m	struct:libtorrent::web_seed_t
restart_piece	libtorrent/include/libtorrent/torrent.hpp	/^		std::vector<char> restart_piece;$/;"	m	struct:libtorrent::web_seed_t
restart_request	libtorrent/include/libtorrent/torrent.hpp	/^		peer_request restart_request = { piece_index_t(-1), -1, -1};$/;"	m	struct:libtorrent::web_seed_t
restrict_mtu	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int restrict_mtu() const$/;"	f	struct:libtorrent::utp_socket_manager
restrict_mtu	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		void restrict_mtu(int const mtu)$/;"	f	struct:libtorrent::utp_socket_manager
restrict_routing_ips	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool restrict_routing_ips = true;$/;"	m	struct:libtorrent::dht::dht_settings
restrict_search_ips	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool restrict_search_ips = true;$/;"	m	struct:libtorrent::dht::dht_settings
resume_data	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<char>> TORRENT_DEPRECATED_MEMBER resume_data;$/;"	m	struct:libtorrent::add_torrent_params
resume_data	libtorrent/include/libtorrent/alert_types.hpp	/^		std::shared_ptr<entry> TORRENT_DEPRECATED_MEMBER resume_data;$/;"	m	struct:libtorrent::final
resume_data	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t resume_data = 4_bit;$/;"	m	struct:libtorrent::peer_info
resume_data_not_modified	libtorrent/include/libtorrent/error_code.hpp	/^			resume_data_not_modified,$/;"	e	enum:libtorrent::errors::error_code_enum
resume_file	src/client_test.cpp	/^std::string resume_file(lt::sha1_hash const& info_hash)$/;"	f
ret	libtorrent/include/libtorrent/disk_io_job.hpp	/^		status_t ret = status_t::no_error;$/;"	m	struct:libtorrent::disk_io_job
ret0	libowfat/t.c	/^int ret0(const char* s,void* foo) {$/;"	f
ret1	libowfat/t.c	/^int ret1(const char* s,void* foo) {$/;"	f
retry	libtorrent/include/libtorrent/torrent.hpp	/^		time_point32 retry = aux::time_now32();$/;"	m	struct:libtorrent::web_seed_t
return_peers_all	src/trackerlogic.c	/^static size_t return_peers_all( ot_peerlist *peer_list, char *reply ) {$/;"	f	file:
return_peers_for_torrent	src/trackerlogic.c	/^size_t return_peers_for_torrent( ot_torrent *torrent, size_t amount, char *reply, PROTO_FLAG proto ) {$/;"	f
return_peers_selection	src/trackerlogic.c	/^static size_t return_peers_selection( ot_peerlist *peer_list, size_t amount, char *reply ) {$/;"	f	file:
return_stats_for_tracker	src/ot_stats.c	/^size_t return_stats_for_tracker( char *reply, int mode, int format ) {$/;"	f
return_tcp_scrape_for_torrent	src/trackerlogic.c	/^size_t return_tcp_scrape_for_torrent( ot_hash *hash_list, int amount, char *reply ) {$/;"	f
return_udp_scrape_for_torrent	src/trackerlogic.c	/^size_t return_udp_scrape_for_torrent( ot_hash hash, char *reply ) {$/;"	f
reverse	libtorrent/include/libtorrent/piece_picker.hpp	/^			bool reverse() const$/;"	f	struct:libtorrent::piece_picker::piece_pos
reverse	libtorrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t reverse = 1_bit;$/;"	m	class:libtorrent::piece_picker
reverse_cursor	libtorrent/include/libtorrent/piece_picker.hpp	/^		piece_index_t reverse_cursor() const { return m_reverse_cursor; }$/;"	f	class:libtorrent::piece_picker
revision_version	libtorrent/include/libtorrent/fingerprint.hpp	/^		int revision_version;$/;"	m	struct:libtorrent::fingerprint
rhs	libtorrent/include/libtorrent/alert.hpp	/^		alert(alert const& rhs) = delete;$/;"	m	class:libtorrent::alert
rhs	libtorrent/include/libtorrent/aux_/noexcept_movable.hpp	/^		noexcept_movable& operator=(noexcept_movable&& rhs) = default;$/;"	m	struct:libtorrent::aux::noexcept_movable
rhs	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^		string_ptr& operator=(string_ptr const& rhs) = delete;$/;"	m	struct:libtorrent::aux::string_ptr
rhs	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^		string_ptr(string_ptr const& rhs) = delete;$/;"	m	struct:libtorrent::aux::string_ptr
rijndaelEncrypt128	src/ot_rijndael.c	/^void rijndaelEncrypt128(const uint32_t rk[44], const uint8_t pt[16], uint8_t ct[16]) {$/;"	f
rijndaelKeySetupEnc128	src/ot_rijndael.c	/^int rijndaelKeySetupEnc128(uint32_t rk[44], const uint8_t cipherKey[] ) {$/;"	f
rmb	libowfat/CAS.h	127;"	d
rmb	libowfat/CAS.h	139;"	d
rmb	libowfat/CAS.h	150;"	d
rmx_expire	libtorrent/include/libtorrent/aux_/route.h	/^	int32_t		rmx_expire;	\/* lifetime for route, e.g. redirect *\/$/;"	m	struct:rt_metrics
rmx_filler	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_filler[4];	\/* will be used for T\/TCP later *\/$/;"	m	struct:rt_metrics
rmx_hopcount	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_hopcount;	\/* max hops expected *\/$/;"	m	struct:rt_metrics
rmx_locks	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_locks;	\/* Kernel must leave these values alone *\/$/;"	m	struct:rt_metrics
rmx_mtu	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_mtu;	\/* MTU for this path *\/$/;"	m	struct:rt_metrics
rmx_pksent	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_pksent;	\/* packets sent using this route *\/$/;"	m	struct:rt_metrics
rmx_recvpipe	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_recvpipe;	\/* inbound delay-bandwidth product *\/$/;"	m	struct:rt_metrics
rmx_rtt	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_rtt;	\/* estimated round trip time *\/$/;"	m	struct:rt_metrics
rmx_rttvar	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_rttvar;	\/* estimated rtt variance *\/$/;"	m	struct:rt_metrics
rmx_sendpipe	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_sendpipe;	\/* outbound delay-bandwidth product *\/$/;"	m	struct:rt_metrics
rmx_ssthresh	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_ssthresh;	\/* outbound gateway buffer limit *\/$/;"	m	struct:rt_metrics
rnh_lock	libtorrent/include/libtorrent/aux_/route.h	/^__private_extern__ lck_mtx_t *rnh_lock;$/;"	v
ro_dst	libtorrent/include/libtorrent/aux_/route.h	/^	struct sockaddr	ro_dst;$/;"	m	struct:route	typeref:struct:route::sockaddr
ro_flags	libtorrent/include/libtorrent/aux_/route.h	/^	uint32_t	ro_flags;	\/* route flags (see below) *\/$/;"	m	struct:route
ro_rt	libtorrent/include/libtorrent/aux_/route.h	/^	struct rtentry	*ro_rt;$/;"	m	struct:route	typeref:struct:route::rtentry
root	libowfat/critbit.h	/^  void *root;$/;"	m	struct:__anon32
root	libowfat/ent.c	/^}* root,** cur=&root;$/;"	v	typeref:struct:entity
root	libowfat/libowfat/critbit.h	/^  void *root;$/;"	m	struct:__anon38
rootdevice	libtorrent/include/libtorrent/upnp.hpp	/^	struct rootdevice$/;"	s	struct:libtorrent::final
route	libtorrent/include/libtorrent/aux_/route.h	/^struct route {$/;"	s
route_cb	libtorrent/include/libtorrent/aux_/route.h	/^struct route_cb {$/;"	s
route_generation	libtorrent/include/libtorrent/aux_/route.h	/^__private_extern__ uint32_t route_generation;$/;"	v
router_model	libtorrent/include/libtorrent/upnp.hpp	/^	std::string router_model()$/;"	f	struct:libtorrent::final
routing_table	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^			routing_table,$/;"	e	enum:libtorrent::dht::dht_logger::module_t
routing_table	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^class TORRENT_EXTRA_EXPORT routing_table$/;"	c	namespace:libtorrent::dht
routing_table_node	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^struct routing_table_node$/;"	s	namespace:libtorrent::dht
rpc_manager	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^			rpc_manager,$/;"	e	enum:libtorrent::dht::dht_logger::module_t
rpc_manager	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^class TORRENT_EXTRA_EXPORT rpc_manager$/;"	c	namespace:libtorrent::dht
rss_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t TORRENT_DEPRECATED_MEMBER rss_notification = 12_bit;$/;"	m	class:libtorrent::alert
rt_addrinfo	libtorrent/include/libtorrent/aux_/route.h	/^struct rt_addrinfo {$/;"	s
rt_flags	libtorrent/include/libtorrent/aux_/route.h	/^	uint32_t rt_flags;		\/* up\/down?, host\/net *\/$/;"	m	struct:rtentry
rt_gateway	libtorrent/include/libtorrent/aux_/route.h	/^	struct	sockaddr *rt_gateway;	\/* value *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::sockaddr
rt_genmask	libtorrent/include/libtorrent/aux_/route.h	/^	struct	sockaddr *rt_genmask;	\/* for generation of cloned routes *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::sockaddr
rt_gwroute	libtorrent/include/libtorrent/aux_/route.h	/^	struct	rtentry *rt_gwroute;	\/* implied entry for gatewayed routes *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::rtentry
rt_ifa	libtorrent/include/libtorrent/aux_/route.h	/^	struct	ifaddr *rt_ifa;		\/* the answer: interface addr to use *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::ifaddr
rt_ifp	libtorrent/include/libtorrent/aux_/route.h	/^	struct	ifnet *rt_ifp;		\/* the answer: interface to use *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::ifnet
rt_key	libtorrent/include/libtorrent/aux_/route.h	143;"	d
rt_llinfo	libtorrent/include/libtorrent/aux_/route.h	/^	void	*rt_llinfo;		\/* pointer to link level info cache *\/$/;"	m	struct:rtentry
rt_llinfo_free	libtorrent/include/libtorrent/aux_/route.h	/^	void	(*rt_llinfo_free)(void *); \/* link level info free function *\/$/;"	m	struct:rtentry
rt_mask	libtorrent/include/libtorrent/aux_/route.h	144;"	d
rt_metrics	libtorrent/include/libtorrent/aux_/route.h	/^struct rt_metrics {$/;"	s
rt_msghdr	libtorrent/include/libtorrent/aux_/route.h	/^struct rt_msghdr {$/;"	s
rt_msghdr2	libtorrent/include/libtorrent/aux_/route.h	/^struct rt_msghdr2 {$/;"	s
rt_nodes	libtorrent/include/libtorrent/aux_/route.h	/^	struct	radix_node rt_nodes[2];	\/* tree glue, and other values *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::radix_node
rt_parent	libtorrent/include/libtorrent/aux_/route.h	/^	struct	rtentry *rt_parent;	\/* cloning parent of this route *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::rtentry
rt_refcnt	libtorrent/include/libtorrent/aux_/route.h	/^	int32_t	rt_refcnt;		\/* # held references *\/$/;"	m	struct:rtentry
rt_rmx	libtorrent/include/libtorrent/aux_/route.h	/^	struct	rt_metrics rt_rmx;	\/* metrics used by rx'ing protocols *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::rt_metrics
rt_use	libtorrent/include/libtorrent/aux_/route.h	165;"	d
rte_debug	libtorrent/include/libtorrent/aux_/route.h	/^__private_extern__ unsigned int rte_debug;$/;"	v
rtentry	libtorrent/include/libtorrent/aux_/route.h	/^struct rtentry {$/;"	s
rti_addrs	libtorrent/include/libtorrent/aux_/route.h	/^	int	rti_addrs;$/;"	m	struct:rt_addrinfo
rti_info	libtorrent/include/libtorrent/aux_/route.h	/^	struct	sockaddr *rti_info[RTAX_MAX];$/;"	m	struct:rt_addrinfo	typeref:struct:rt_addrinfo::sockaddr
rtm_addrs	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_addrs;		\/* bitmask identifying sockaddrs in msg *\/$/;"	m	struct:rt_msghdr
rtm_addrs	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_addrs;		\/* bitmask identifying sockaddrs in msg *\/$/;"	m	struct:rt_msghdr2
rtm_errno	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_errno;		\/* why failed *\/$/;"	m	struct:rt_msghdr
rtm_flags	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_flags;		\/* flags, incl. kern & message, e.g. DONE *\/$/;"	m	struct:rt_msghdr
rtm_flags	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_flags;		\/* flags, incl. kern & message, e.g. DONE *\/$/;"	m	struct:rt_msghdr2
rtm_index	libtorrent/include/libtorrent/aux_/route.h	/^	u_short	rtm_index;		\/* index for associated ifp *\/$/;"	m	struct:rt_msghdr
rtm_index	libtorrent/include/libtorrent/aux_/route.h	/^	u_short	rtm_index;		\/* index for associated ifp *\/$/;"	m	struct:rt_msghdr2
rtm_inits	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t rtm_inits;		\/* which metrics we are initializing *\/$/;"	m	struct:rt_msghdr
rtm_inits	libtorrent/include/libtorrent/aux_/route.h	/^	u_int32_t rtm_inits;		\/* which metrics we are initializing *\/$/;"	m	struct:rt_msghdr2
rtm_msglen	libtorrent/include/libtorrent/aux_/route.h	/^	u_short	rtm_msglen;		\/* to skip over non-understood messages *\/$/;"	m	struct:rt_msghdr
rtm_msglen	libtorrent/include/libtorrent/aux_/route.h	/^	u_short	rtm_msglen;		\/* to skip over non-understood messages *\/$/;"	m	struct:rt_msghdr2
rtm_parentflags	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_parentflags;	\/* flags of the parent route *\/$/;"	m	struct:rt_msghdr2
rtm_pid	libtorrent/include/libtorrent/aux_/route.h	/^	pid_t	rtm_pid;		\/* identify sender *\/$/;"	m	struct:rt_msghdr
rtm_refcnt	libtorrent/include/libtorrent/aux_/route.h	/^	int32_t	rtm_refcnt;		\/* reference count *\/$/;"	m	struct:rt_msghdr2
rtm_reserved	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_reserved;		\/* reserved field set to 0 *\/$/;"	m	struct:rt_msghdr2
rtm_rmx	libtorrent/include/libtorrent/aux_/route.h	/^	struct rt_metrics rtm_rmx;	\/* metrics themselves *\/$/;"	m	struct:rt_msghdr	typeref:struct:rt_msghdr::rt_metrics
rtm_rmx	libtorrent/include/libtorrent/aux_/route.h	/^	struct rt_metrics rtm_rmx;	\/* metrics themselves *\/$/;"	m	struct:rt_msghdr2	typeref:struct:rt_msghdr2::rt_metrics
rtm_seq	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_seq;		\/* for sender to identify action *\/$/;"	m	struct:rt_msghdr
rtm_type	libtorrent/include/libtorrent/aux_/route.h	/^	u_char	rtm_type;		\/* message type *\/$/;"	m	struct:rt_msghdr
rtm_type	libtorrent/include/libtorrent/aux_/route.h	/^	u_char	rtm_type;		\/* message type *\/$/;"	m	struct:rt_msghdr2
rtm_use	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_use;		\/* from rtentry *\/$/;"	m	struct:rt_msghdr
rtm_use	libtorrent/include/libtorrent/aux_/route.h	/^	int	rtm_use;		\/* from rtentry *\/$/;"	m	struct:rt_msghdr2
rtm_version	libtorrent/include/libtorrent/aux_/route.h	/^	u_char	rtm_version;		\/* future binary compatibility *\/$/;"	m	struct:rt_msghdr
rtm_version	libtorrent/include/libtorrent/aux_/route.h	/^	u_char	rtm_version;		\/* future binary compatibility *\/$/;"	m	struct:rt_msghdr2
rts_badredirect	libtorrent/include/libtorrent/aux_/route.h	/^	short	rts_badredirect;	\/* bogus redirect calls *\/$/;"	m	struct:rtstat
rts_dynamic	libtorrent/include/libtorrent/aux_/route.h	/^	short	rts_dynamic;		\/* routes created by redirects *\/$/;"	m	struct:rtstat
rts_newgateway	libtorrent/include/libtorrent/aux_/route.h	/^	short	rts_newgateway;		\/* routes modified by redirects *\/$/;"	m	struct:rtstat
rts_unreach	libtorrent/include/libtorrent/aux_/route.h	/^	short	rts_unreach;		\/* lookups which failed *\/$/;"	m	struct:rtstat
rts_wildcard	libtorrent/include/libtorrent/aux_/route.h	/^	short	rts_wildcard;		\/* lookups satisfied by a wildcard *\/$/;"	m	struct:rtstat
rtstat	libtorrent/include/libtorrent/aux_/route.h	/^struct	rtstat {$/;"	s
rtt	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	std::uint16_t rtt = 0xffff;$/;"	m	struct:libtorrent::dht::node_entry
rtt	libtorrent/include/libtorrent/peer_info.hpp	/^		int rtt;$/;"	m	struct:libtorrent::peer_info
rttrash	libtorrent/include/libtorrent/aux_/route.h	/^__private_extern__ int rttrash;$/;"	v
rules	libowfat/dns/dns_rcrw.c	/^static stralloc rules; \/* defined if ok *\/$/;"	v	file:
run_flag	src/main.c	/^int run_flag = 0;$/;"	v
rw_mask	libtorrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t rw_mask = read_only | write_only | read_write;$/;"	m	namespace:libtorrent::file_open_mode
rw_mask	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t rw_mask = read_only | write_only | read_write;$/;"	m	namespace:libtorrent::open_mode
s	libowfat/libowfat/stralloc.h	/^  char* s;$/;"	m	struct:stralloc
s	libowfat/stralloc.h	/^  char* s;$/;"	m	struct:stralloc
s	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::shared_ptr<aux::socket_type> s;$/;"	m	struct:libtorrent::peer_connection_args
s1	libowfat/dns.h	/^  int s1; \/* 0, or 1 + an open file descriptor *\/$/;"	m	struct:dns_transmit
s1	libowfat/libowfat/dns.h	/^  int s1; \/* 0, or 1 + an open file descriptor *\/$/;"	m	struct:dns_transmit
sa	libowfat/test/marshal.c	/^stralloc sa;$/;"	v
sa_predicate	libowfat/buffer.h	/^typedef int (*sa_predicate)(stralloc* sa);$/;"	t
sa_predicate	libowfat/libowfat/buffer.h	/^typedef int (*sa_predicate)(stralloc* sa);$/;"	t
sa_predicate	libowfat/libowfat/stralloc.h	/^typedef int (*sa_predicate)(stralloc* sa);$/;"	t
sa_predicate	libowfat/stralloc.h	/^typedef int (*sa_predicate)(stralloc* sa);$/;"	t
salt	libtorrent/include/libtorrent/kademlia/item.hpp	/^	std::string const& salt() const { return m_salt; }$/;"	f	class:libtorrent::dht::item::std
sam_connecting	libtorrent/include/libtorrent/i2p_stream.hpp	/^		sam_connecting,$/;"	e	enum:libtorrent::i2p_connection::state_t
sam_idle	libtorrent/include/libtorrent/i2p_stream.hpp	/^		sam_idle$/;"	e	enum:libtorrent::i2p_connection::state_t
sam_name_lookup	libtorrent/include/libtorrent/i2p_stream.hpp	/^		sam_name_lookup,$/;"	e	enum:libtorrent::i2p_connection::state_t
sample_infohashes_interval	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int sample_infohashes_interval = 21600;$/;"	m	struct:libtorrent::dht::dht_settings
samples_above_target	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t samples_above_target;$/;"	m	struct:libtorrent::utp_status
samples_below_target	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t samples_below_target;$/;"	m	struct:libtorrent::utp_status
save_as_map	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_as_map = 4_bit;$/;"	m	struct:libtorrent::session_handle
save_dht_proxy	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_dht_proxy = 7_bit;$/;"	m	struct:libtorrent::session_handle
save_dht_settings	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t save_dht_settings = 1_bit;$/;"	m	struct:libtorrent::session_handle
save_dht_state	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t save_dht_state = 2_bit;$/;"	m	struct:libtorrent::session_handle
save_encryption_settings	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_encryption_settings = 3_bit;$/;"	m	struct:libtorrent::session_handle
save_file	src/client_test.cpp	/^int save_file(std::string const& filename, std::vector<char> const& v)$/;"	f
save_i2p_proxy	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_i2p_proxy = 6_bit;$/;"	m	struct:libtorrent::session_handle
save_info_dict	libtorrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr resume_data_flags_t save_info_dict = 1_bit;$/;"	m	struct:libtorrent::torrent_handle
save_path	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::string save_path;$/;"	m	struct:libtorrent::add_torrent_params
save_path	libtorrent/include/libtorrent/resolve_links.hpp	/^			std::string save_path;$/;"	m	struct:libtorrent::resolve_links::link_t
save_path	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::string save_path;$/;"	m	struct:libtorrent::torrent_status
save_peer_proxy	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_peer_proxy = 8_bit;$/;"	m	struct:libtorrent::session_handle
save_proxy	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_proxy = 5_bit;$/;"	m	struct:libtorrent::session_handle
save_settings	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t save_settings = 0_bit;$/;"	m	struct:libtorrent::session_handle
save_state	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void save_state(entry&) {}$/;"	f	struct:libtorrent::plugin
save_tracker_proxy	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_tracker_proxy = 10_bit;$/;"	m	struct:libtorrent::session_handle
save_web_proxy	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_web_proxy = 9_bit;$/;"	m	struct:libtorrent::session_handle
scan_8int	libowfat/scan/scan_8int.c	/^size_t scan_8int(const char* src,unsigned int* dest) {$/;"	f
scan_8long	libowfat/scan/scan_8long.c	/^size_t scan_8long(const char *src,unsigned long *dest) {$/;"	f
scan_8longlong	libowfat/scan/scan_8longlong.c	/^size_t scan_8longlong(const char *src,unsigned long long *dest) {$/;"	f
scan_8longn	libowfat/scan/scan_8longn.c	/^size_t scan_8longn(const char *src,size_t n,unsigned long *dest) {$/;"	f
scan_8short	libowfat/scan/scan_8short.c	/^size_t scan_8short(const char* src,unsigned short* dest) {$/;"	f
scan_asn1derlength	libowfat/scan/scan_asn1derlength.c	/^size_t scan_asn1derlength(const char* src,size_t len,unsigned long long* value) {$/;"	f
scan_asn1derlengthvalue	libowfat/scan/scan_asn1derlength.c	/^size_t scan_asn1derlengthvalue(const char* src,size_t len,unsigned long long* value) {$/;"	f
scan_asn1dertag	libowfat/scan/scan_asn1dertag.c	/^size_t scan_asn1dertag(const char* src,size_t len,unsigned long long* length) {$/;"	f
scan_base64	libowfat/textcode/scan_base64.c	/^size_t scan_base64(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_base64_sa	libowfat/libowfat/textcode.h	113;"	d
scan_base64_sa	libowfat/textcode.h	113;"	d
scan_base64url	libowfat/textcode/scan_base64url.c	/^size_t scan_base64url(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_base64url_sa	libowfat/libowfat/textcode.h	114;"	d
scan_base64url_sa	libowfat/textcode.h	114;"	d
scan_cescape	libowfat/textcode/scan_cescape.c	/^size_t scan_cescape(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_cescape_sa	libowfat/libowfat/textcode.h	120;"	d
scan_cescape_sa	libowfat/textcode.h	120;"	d
scan_charsetnskip	libowfat/scan/scan_charsetnskip.c	/^size_t scan_charsetnskip(const char *s,const char *charset,size_t limit) {$/;"	f
scan_dir	src/client_test.cpp	/^void scan_dir(std::string const& dir_path, lt::session& ses)$/;"	f
scan_double	libowfat/scan/scan_double.c	/^size_t scan_double(const char *in, double *dest) {$/;"	f
scan_find_keywords	src/scan_urlencoded_query.c	/^int scan_find_keywords( const ot_keywords * keywords, char **string, SCAN_SEARCHPATH_FLAG flags) {$/;"	f
scan_fixed_int	src/scan_urlencoded_query.c	/^ssize_t scan_fixed_int( char *data, size_t len, int *tmp ) {$/;"	f
scan_fromhex	libowfat/scan/scan_fromhex.c	/^int scan_fromhex(unsigned char c) {$/;"	f
scan_hexdump	libowfat/textcode/scan_hexdump.c	/^size_t scan_hexdump(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_hexdump_sa	libowfat/libowfat/textcode.h	118;"	d
scan_hexdump_sa	libowfat/textcode.h	118;"	d
scan_html	libowfat/textcode/scan_html.c	/^size_t scan_html(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_html_inner	libowfat/textcode/scan_html.c	/^static size_t scan_html_inner(const char *src,char *dest,size_t *destlen,enum htmlmode mode) {$/;"	f	file:
scan_html_sa	libowfat/libowfat/textcode.h	119;"	d
scan_html_sa	libowfat/textcode.h	119;"	d
scan_html_tagarg	libowfat/textcode/scan_html.c	/^size_t scan_html_tagarg(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_httpdate	libowfat/scan/scan_httpdate.c	/^size_t scan_httpdate(const char *in,time_t *t) {$/;"	f
scan_int	libowfat/scan/scan_int.c	/^size_t scan_int(const char* src,int* dest) {$/;"	f
scan_ip4	libowfat/socket/scan_ip4.c	/^size_t scan_ip4(const char *s,char ip[4])$/;"	f
scan_ip6	libowfat/socket/scan_ip6.c	/^size_t scan_ip6(const char *s,char ip[16])$/;"	f
scan_ip6_flat	libowfat/socket/scan_ip6_flat.c	/^size_t scan_ip6_flat(const char *s,char ip[16])$/;"	f
scan_ip6_port	src/opentracker.c	/^static int scan_ip6_port( const char *src, ot_ip6 ip, uint16 *port ) {$/;"	f	file:
scan_ip6_port	src/proxy.c	/^static int scan_ip6_port( const char *src, ot_ip6 ip, uint16 *port ) {$/;"	f	file:
scan_ip6if	libowfat/socket/scan_ip6if.c	/^size_t scan_ip6if(const char* src,char* ip,uint32* scope_id) {$/;"	f
scan_iso8601	libowfat/scan/scan_iso8601.c	/^size_t scan_iso8601(const char* in,struct timespec* t) {$/;"	f
scan_jsonescape	libowfat/textcode/scan_jsonescape.c	/^size_t scan_jsonescape(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_jsonescape_sa	libowfat/libowfat/textcode.h	122;"	d
scan_jsonescape_sa	libowfat/textcode.h	122;"	d
scan_ldapescape	libowfat/textcode/scan_ldapescape.c	/^size_t scan_ldapescape(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_ldapescape_sa	libowfat/libowfat/textcode.h	121;"	d
scan_ldapescape_sa	libowfat/textcode.h	121;"	d
scan_long	libowfat/scan/scan_long.c	/^size_t scan_long(const char *src,long *dest) {$/;"	f
scan_longlong	libowfat/scan/scan_longlong.c	/^size_t scan_longlong(const char* src,signed long long* dest) {$/;"	f
scan_longn	libowfat/scan/scan_longn.c	/^size_t scan_longn(const char *src,size_t n,long *dest) {$/;"	f
scan_netstring	libowfat/scan/scan_netstring.c	/^size_t scan_netstring(const char* in,size_t len,char** dest,size_t* slen) {$/;"	f
scan_noncharsetnskip	libowfat/scan/scan_noncharsetnskip.c	/^size_t scan_noncharsetnskip(const char *s,const char *charset,size_t limit) {$/;"	f
scan_nonwhitenskip	libowfat/scan/scan_nonwhitenskip.c	/^size_t scan_nonwhitenskip(const char *s,size_t limit) {$/;"	f
scan_pb_tag	libowfat/scan/scan_pb_tag.c	/^size_t scan_pb_tag(const char* in,size_t len, size_t* fieldno,unsigned char* type) {$/;"	f
scan_pb_type0_int	libowfat/scan/scan_varint.c	/^size_t scan_pb_type0_int(const char* dest,size_t len,unsigned long long* l) {$/;"	f
scan_pb_type0_sint	libowfat/scan/scan_pb_type0_sint.c	/^size_t scan_pb_type0_sint(const char* in,size_t len,signed long long* l) {$/;"	f
scan_pb_type1_double	libowfat/scan/scan_pb_type1_double.c	/^size_t scan_pb_type1_double(const char* in,size_t len,double* d) {$/;"	f
scan_pb_type1_fixed64	libowfat/scan/scan_pb_type1_fixed64.c	/^size_t scan_pb_type1_fixed64(const char* in,size_t len,uint64_t* d) {$/;"	f
scan_pb_type2_stringlen	libowfat/scan/scan_pb_type2_stringlen.c	/^size_t scan_pb_type2_stringlen(const char* in,size_t len,const char** string, size_t* slen) {$/;"	f
scan_pb_type5_fixed32	libowfat/scan/scan_pb_type5_fixed32.c	/^size_t scan_pb_type5_fixed32(const char* in,size_t len,uint32_t* d) {$/;"	f
scan_pb_type5_float	libowfat/scan/scan_pb_type5_float.c	/^size_t scan_pb_type5_float(const char* in,size_t len,float* f) {$/;"	f
scan_plusminus	libowfat/scan/scan_plusminus.c	/^size_t scan_plusminus(const char *src,signed int *dest) {$/;"	f
scan_quotedprintable	libowfat/textcode/scan_quotedprintable.c	/^size_t scan_quotedprintable(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_quotedprintable_sa	libowfat/libowfat/textcode.h	115;"	d
scan_quotedprintable_sa	libowfat/textcode.h	115;"	d
scan_short	libowfat/scan/scan_short.c	/^size_t scan_short(const char* src,short* dest) {$/;"	f
scan_to_array	libowfat/textcode/scan_to_array.c	/^size_t scan_to_array(size_t (*func)(const char*,char*,size_t*),$/;"	f
scan_to_sa	libowfat/textcode/scan_to_sa.c	/^size_t scan_to_sa(size_t (*func)(const char*,char*,size_t*),$/;"	f
scan_tofrom_array	libowfat/textcode/scan_tofrom_array.c	/^size_t scan_tofrom_array(size_t (*func)(const char*,char*,size_t*),$/;"	f
scan_uint	libowfat/scan/scan_uint.c	/^size_t scan_uint(const char* src,unsigned int* dest) {$/;"	f
scan_ulong	libowfat/scan/scan_ulong.c	/^size_t scan_ulong(const char* src,unsigned long int* dest) {$/;"	f
scan_ulonglong	libowfat/scan/scan_ulonglong.c	/^size_t scan_ulonglong(const char *src,unsigned long long *dest) {$/;"	f
scan_ulongn	libowfat/scan/scan_ulongn.c	/^size_t scan_ulongn(const char* src,size_t n,unsigned long int* dest) {$/;"	f
scan_urlencoded	libowfat/textcode/scan_urlencoded.c	/^size_t scan_urlencoded(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_urlencoded2	libowfat/textcode/scan_urlencoded.c	/^size_t scan_urlencoded2(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_urlencoded_query	src/scan_urlencoded_query.c	/^ssize_t scan_urlencoded_query(char **string, char *deststring, SCAN_SEARCHPATH_FLAG flags) {$/;"	f
scan_urlencoded_sa	libowfat/libowfat/textcode.h	116;"	d
scan_urlencoded_sa	libowfat/textcode.h	116;"	d
scan_urlencoded_skipvalue	src/scan_urlencoded_query.c	/^void scan_urlencoded_skipvalue( char **string ) {$/;"	f
scan_ushort	libowfat/scan/scan_ushort.c	/^size_t scan_ushort(const char* src,unsigned short* dest) {$/;"	f
scan_utf8	libowfat/scan/scan_utf8.c	/^size_t scan_utf8(const char* in,size_t len,uint32_t* num) {$/;"	f
scan_utf8_sem	libowfat/scan/scan_utf8_sem.c	/^size_t scan_utf8_sem(const char* in,size_t len,uint32_t* num) {$/;"	f
scan_uuencoded	libowfat/textcode/scan_uuencoded.c	/^size_t scan_uuencoded(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_uuencoded_sa	libowfat/libowfat/textcode.h	112;"	d
scan_uuencoded_sa	libowfat/textcode.h	112;"	d
scan_varint	libowfat/scan/scan_varint.c	/^size_t scan_varint(const char* in,size_t len, unsigned long long* n) {$/;"	f
scan_whitenskip	libowfat/scan/scan_whitenskip.c	/^size_t scan_whitenskip(const char *s,size_t limit) {$/;"	f
scan_xint	libowfat/scan/scan_xint.c	/^size_t scan_xint(const char* src,unsigned int* dest) {$/;"	f
scan_xlong	libowfat/scan/scan_xlong.c	/^size_t scan_xlong(const char *src,unsigned long *dest) {$/;"	f
scan_xlonglong	libowfat/scan/scan_xlonglong.c	/^size_t scan_xlonglong(const char* src,unsigned long long* dest) {$/;"	f
scan_xlongn	libowfat/scan/scan_xlongn.c	/^size_t scan_xlongn(const char *src,size_t n,unsigned long *dest) {$/;"	f
scan_xshort	libowfat/scan/scan_xshort.c	/^size_t scan_xshort(const char* src,unsigned short* dest) {$/;"	f
scan_yenc	libowfat/textcode/scan_yenc.c	/^size_t scan_yenc(const char *src,char *dest,size_t *destlen) {$/;"	f
scan_yenc_sa	libowfat/libowfat/textcode.h	117;"	d
scan_yenc_sa	libowfat/textcode.h	117;"	d
scope_end	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^	scope_end_impl<Fun> scope_end(Fun f) { return scope_end_impl<Fun>(std::move(f)); }$/;"	f	namespace:libtorrent::aux
scope_end_impl	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^		explicit scope_end_impl(Fun f) : m_fun(std::move(f)) {}$/;"	f	struct:libtorrent::aux::scope_end_impl
scope_end_impl	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^	struct scope_end_impl$/;"	s	namespace:libtorrent::aux
scope_id	libowfat/dns.h	/^  unsigned int scope_id;$/;"	m	struct:dns_transmit
scope_id	libowfat/libowfat/dns.h	/^  unsigned int scope_id;$/;"	m	struct:dns_transmit
scrape	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^			scrape,$/;"	m	class:libtorrent::udp_tracker_connection::action_t
scrape_complete	libtorrent/include/libtorrent/announce_entry.hpp	/^		int scrape_complete = -1;$/;"	m	struct:libtorrent::announce_endpoint
scrape_downloaded	libtorrent/include/libtorrent/announce_entry.hpp	/^		int scrape_downloaded = -1;$/;"	m	struct:libtorrent::announce_endpoint
scrape_incomplete	libtorrent/include/libtorrent/announce_entry.hpp	/^		int scrape_incomplete = -1;$/;"	m	struct:libtorrent::announce_endpoint
scrape_not_available	libtorrent/include/libtorrent/error_code.hpp	/^			scrape_not_available = 170,$/;"	e	enum:libtorrent::errors::error_code_enum
scrape_request	libtorrent/include/libtorrent/tracker_manager.hpp	/^			scrape_request = 1,$/;"	e	enum:libtorrent::tracker_request::kind_t
search_branching	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int search_branching = 5;$/;"	m	struct:libtorrent::dht::dht_settings
search_id	libtorrent/include/libtorrent/kademlia/node.hpp	/^	std::uint32_t search_id() { return m_search_id++; }$/;"	f	class:libtorrent::dht::node
sec	libowfat/libowfat/taia.h	/^  struct tai sec;$/;"	m	struct:taia	typeref:struct:taia::tai
sec	libowfat/taia.h	/^  struct tai sec;$/;"	m	struct:taia	typeref:struct:taia::tai
second_tick	libtorrent/include/libtorrent/stat.hpp	/^		void second_tick(int tick_interval_ms)$/;"	f	class:libtorrent::stat
secret_key	libtorrent/include/libtorrent/kademlia/types.hpp	/^		explicit secret_key(char const* b)$/;"	f	struct:libtorrent::dht::secret_key
secret_key	libtorrent/include/libtorrent/kademlia/types.hpp	/^	struct secret_key$/;"	s	namespace:libtorrent::dht
seed	libowfat/dns/dns_random.c	/^static uint32 seed[32];$/;"	v	file:
seed	libtorrent/include/libtorrent/kademlia/announce_flags.hpp	/^constexpr announce_flags_t seed = 0_bit;$/;"	m	namespace:libtorrent::dht::announce
seed	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t seed = 10_bit;$/;"	m	struct:libtorrent::peer_info
seed	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool seed:1;$/;"	m	struct:libtorrent::torrent_peer
seed_choking_algorithm	libtorrent/include/libtorrent/settings_pack.hpp	/^			seed_choking_algorithm,$/;"	e	enum:libtorrent::settings_pack::int_types
seed_count	include/trackerlogic.h	/^  size_t         seed_count;$/;"	m	struct:ot_peerlist
seed_count	src/ot_stats.c	/^  unsigned long long seed_count;$/;"	m	struct:__anon5	file:
seed_mode	libtorrent/include/libtorrent/torrent.hpp	/^		bool seed_mode() const { return m_seed_mode; }$/;"	f	class:libtorrent::torrent
seed_mode	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t seed_mode = 0_bit;$/;"	m	namespace:libtorrent::torrent_flags
seed_mode	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER seed_mode = false;$/;"	m	struct:libtorrent::torrent_status
seed_mode	src/client_test.cpp	/^bool seed_mode = false;$/;"	v
seed_mode_t	libtorrent/include/libtorrent/torrent.hpp	/^		enum class seed_mode_t { check_files, skip_checking };$/;"	c	class:libtorrent::torrent
seed_rank	libtorrent/include/libtorrent/torrent_status.hpp	/^		int seed_rank = 0;$/;"	m	struct:libtorrent::torrent_status
seed_time_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			seed_time_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
seed_time_ratio_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			seed_time_ratio_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
seeding	libtorrent/include/libtorrent/torrent_status.hpp	/^			seeding,$/;"	e	enum:libtorrent::torrent_status::state_t
seeding_duration	libtorrent/include/libtorrent/torrent_status.hpp	/^		seconds seeding_duration;$/;"	m	struct:libtorrent::torrent_status
seeding_outgoing_connections	libtorrent/include/libtorrent/settings_pack.hpp	/^			seeding_outgoing_connections,$/;"	e	enum:libtorrent::settings_pack::bool_types
seeding_piece_quota	libtorrent/include/libtorrent/settings_pack.hpp	/^			seeding_piece_quota,$/;"	e	enum:libtorrent::settings_pack::int_types
seeding_time	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int seeding_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
seeding_time	libtorrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER seeding_time = 0;$/;"	m	struct:libtorrent::torrent_status
seen_complete	libtorrent/include/libtorrent/torrent.hpp	/^		void seen_complete() { m_last_seen_complete = ::time(nullptr); }$/;"	f	class:libtorrent::torrent
self	libtorrent/include/libtorrent/invariant_check.hpp	/^		T const& self;$/;"	m	struct:libtorrent::invariant_checker_impl
self	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		std::shared_ptr<dht_tracker> self()$/;"	f	struct:libtorrent::dht::final
self	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	std::shared_ptr<observer> self()$/;"	f	struct:libtorrent::dht::observer
self	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::shared_ptr<traversal_algorithm> self()$/;"	f	struct:libtorrent::dht::traversal_algorithm
self	libtorrent/include/libtorrent/lsd.hpp	/^	std::shared_ptr<lsd> self() { return shared_from_this(); }$/;"	f	struct:libtorrent::lsd
self	libtorrent/include/libtorrent/natpmp.hpp	/^	std::shared_ptr<natpmp> self() { return shared_from_this(); }$/;"	f	struct:libtorrent::natpmp
self	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::shared_ptr<peer_connection> self()$/;"	f	class:libtorrent::peer_connection
self	libtorrent/include/libtorrent/upnp.hpp	/^	std::shared_ptr<upnp> self() { return shared_from_this(); }$/;"	f	struct:libtorrent::final
self_connection	libtorrent/include/libtorrent/close_reason.hpp	/^		self_connection,$/;"	m	class:libtorrent::close_reason_t
self_connection	libtorrent/include/libtorrent/error_code.hpp	/^			self_connection,$/;"	e	enum:libtorrent::errors::error_code_enum
sem	libowfat/io.h	/^  cnd_t sem;$/;"	m	struct:iomux
sem	libowfat/io.h	/^  sem_t sem;$/;"	m	struct:iomux
sem	libowfat/libowfat/io.h	/^  cnd_t sem;$/;"	m	struct:iomux
sem	libowfat/libowfat/io.h	/^  sem_t sem;$/;"	m	struct:iomux
send_add_task	src/main.c	/^static int send_add_task(struct client *cli, int torrent_id)$/;"	f	file:
send_buffer_capacity	libtorrent/include/libtorrent/peer_connection.hpp	/^		int send_buffer_capacity() const$/;"	f	class:libtorrent::peer_connection
send_buffer_low_watermark	libtorrent/include/libtorrent/settings_pack.hpp	/^			send_buffer_low_watermark,$/;"	e	enum:libtorrent::settings_pack::int_types
send_buffer_offset	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::uint32_t send_buffer_offset:29;$/;"	m	struct:libtorrent::pending_block
send_buffer_size	libtorrent/include/libtorrent/peer_connection.hpp	/^		int send_buffer_size() const$/;"	f	class:libtorrent::peer_connection
send_buffer_size	libtorrent/include/libtorrent/peer_info.hpp	/^		int send_buffer_size;$/;"	m	struct:libtorrent::peer_info
send_buffer_watermark	libtorrent/include/libtorrent/settings_pack.hpp	/^			send_buffer_watermark,$/;"	e	enum:libtorrent::settings_pack::int_types
send_buffer_watermark_factor	libtorrent/include/libtorrent/settings_pack.hpp	/^			send_buffer_watermark_factor,$/;"	e	enum:libtorrent::settings_pack::int_types
send_buffer_watermark_too_low	libtorrent/include/libtorrent/alert_types.hpp	/^			send_buffer_watermark_too_low,$/;"	e	enum:libtorrent::final::performance_warning_t
send_code	src/main.c	/^static int send_code(struct client *cli, int code)$/;"	f	file:
send_make_torrent	src/test.c	/^static void send_make_torrent(struct client *cli)$/;"	f	file:
send_message	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void send_message(message_type const type$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
send_msg	src/socket.c	/^int send_msg(const int fd, const char *buf, const int len)$/;"	f
send_not_sent_low_watermark	libtorrent/include/libtorrent/settings_pack.hpp	/^			send_not_sent_low_watermark,$/;"	e	enum:libtorrent::settings_pack::int_types
send_packet	src/socket.c	/^int send_packet(struct client *cli)$/;"	f
send_quota	libtorrent/include/libtorrent/peer_info.hpp	/^		int send_quota;$/;"	m	struct:libtorrent::peer_info
send_redundant_have	libtorrent/include/libtorrent/settings_pack.hpp	/^			send_redundant_have,$/;"	e	enum:libtorrent::settings_pack::bool_types
send_socket_buffer_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			send_socket_buffer_size,$/;"	e	enum:libtorrent::settings_pack::int_types
send_stats	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER send_stats:1;$/;"	m	struct:libtorrent::announce_entry
send_task_state	src/main.c	/^static int send_task_state(struct client *cli)$/;"	f	file:
send_time	libtorrent/include/libtorrent/packet_pool.hpp	/^		time_point send_time;$/;"	m	struct:libtorrent::packet
send_udp_packet_hostname_listen	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void send_udp_packet_hostname_listen(aux::listen_socket_handle const& sock$/;"	f	struct:libtorrent::aux::final
send_udp_packet_listen	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void send_udp_packet_listen(aux::listen_socket_handle const& sock$/;"	f	struct:libtorrent::aux::final
sendfilequeued	libowfat/io_internal.h	/^  unsigned int sendfilequeued:2;$/;"	m	struct:__anon40
sent	libtorrent/include/libtorrent/kademlia/observer.hpp	/^	time_point sent() const { return m_sent; }$/;"	f	struct:libtorrent::dht::observer
sent_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			sent_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
sent_bytes	libtorrent/include/libtorrent/stat.hpp	/^		void sent_bytes(int bytes_payload, int bytes_protocol)$/;"	f	class:libtorrent::stat
sent_ip_overhead_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			sent_ip_overhead_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
sent_payload	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void sent_payload(int \/* bytes *\/) {}$/;"	f	struct:libtorrent::peer_plugin
sent_payload_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			sent_payload_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
sent_syn	libtorrent/include/libtorrent/stat.hpp	/^		void sent_syn(bool ipv6)$/;"	f	class:libtorrent::stat
sent_tracker_bytes	libtorrent/include/libtorrent/performance_counters.hpp	/^			sent_tracker_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
sent_unchoke	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void sent_unchoke() {}$/;"	f	struct:libtorrent::peer_plugin
seq	libtorrent/include/libtorrent/kademlia/item.hpp	/^	sequence_number seq() const { return m_seq; }$/;"	f	class:libtorrent::dht::item
seq_nr	libtorrent/include/libtorrent/utp_stream.hpp	/^	be_uint16 seq_nr;$/;"	m	struct:libtorrent::utp_header
sequence_number	libtorrent/include/libtorrent/kademlia/types.hpp	/^		explicit sequence_number(std::int64_t v) : value(v) {}$/;"	f	struct:libtorrent::dht::sequence_number
sequence_number	libtorrent/include/libtorrent/kademlia/types.hpp	/^		sequence_number() : value(0) {}$/;"	f	struct:libtorrent::dht::sequence_number
sequence_number	libtorrent/include/libtorrent/kademlia/types.hpp	/^	struct sequence_number$/;"	s	namespace:libtorrent::dht
sequence_number	libtorrent/include/libtorrent/torrent.hpp	/^		queue_position_t sequence_number() const { return m_sequence_number; }$/;"	f	class:libtorrent::torrent
sequential	libtorrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t sequential = 4_bit;$/;"	m	class:libtorrent::piece_picker
sequential_access	libtorrent/include/libtorrent/disk_interface.hpp	/^		static constexpr disk_job_flags_t sequential_access = 3_bit;$/;"	m	struct:libtorrent::disk_interface
sequential_download	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t sequential_download = 9_bit;$/;"	m	namespace:libtorrent::torrent_flags
sequential_download	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER sequential_download = false;$/;"	m	struct:libtorrent::torrent_status
sequential_download	src/client_test.cpp	/^bool sequential_download = false;$/;"	v
server_ip	src/test.c	/^const char *server_ip = "192.169.27.217";$/;"	v
server_mainloop	src/opentracker.c	/^static void * server_mainloop( void * args ) {$/;"	f	file:
server_mainloop	src/proxy.c	/^static void server_mainloop() {$/;"	f	file:
server_port	src/test.c	/^int server_port = 20001;$/;"	v
server_s	src/server.c	/^int server_s;$/;"	v
server_s	src/test.c	/^int server_s;$/;"	v
serverfailed	libowfat/dns/dns_transmit.c	/^static int serverfailed(const char *buf,unsigned int len)$/;"	f	file:
servers	libowfat/dns.h	/^  const char *servers;$/;"	m	struct:dns_transmit
servers	libowfat/libowfat/dns.h	/^  const char *servers;$/;"	m	struct:dns_transmit
serverwantstcp	libowfat/dns/dns_transmit.c	/^static int serverwantstcp(const char *buf,unsigned int len)$/;"	f	file:
service_code	include/packet.h	/^    u32_t  service_code;        \/\/请求的服务编号  例如 0xff00ff01$/;"	m	struct:yzy_packet
service_namespace	libtorrent/include/libtorrent/upnp.hpp	/^		std::string service_namespace;$/;"	m	struct:libtorrent::final::rootdevice
service_port	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int service_port = 0;$/;"	m	struct:libtorrent::dht::dht_settings
service_type	libtorrent/include/libtorrent/upnp.hpp	/^	std::string service_type;$/;"	m	struct:libtorrent::parse_state
service_unavailable	libtorrent/include/libtorrent/error_code.hpp	/^			service_unavailable = 503$/;"	e	enum:libtorrent::errors::http_errors
ses	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::session_interface* ses;$/;"	m	struct:libtorrent::peer_connection_args
session	libtorrent/include/libtorrent/session.hpp	/^		explicit session(session_params const& params)$/;"	f	class:libtorrent::session
session	libtorrent/include/libtorrent/session.hpp	/^		explicit session(session_params&& params)$/;"	f	class:libtorrent::session
session	libtorrent/include/libtorrent/session.hpp	/^		session()$/;"	f	class:libtorrent::session
session	libtorrent/include/libtorrent/session.hpp	/^		session(fingerprint const& print$/;"	f	class:libtorrent::session
session	libtorrent/include/libtorrent/session.hpp	/^		session(session_params const& params, io_service& ios)$/;"	f	class:libtorrent::session
session	libtorrent/include/libtorrent/session.hpp	/^		session(session_params&& params, io_service& ios)$/;"	f	class:libtorrent::session
session	libtorrent/include/libtorrent/session.hpp	/^		session(settings_pack const& pack$/;"	f	class:libtorrent::session
session	libtorrent/include/libtorrent/session.hpp	/^		session(settings_pack&& pack$/;"	f	class:libtorrent::session
session	libtorrent/include/libtorrent/session.hpp	/^	class TORRENT_EXPORT session : public session_handle$/;"	c	namespace:libtorrent
session	libtorrent/include/libtorrent/torrent.hpp	/^		aux::session_interface& session() { return m_ses; }$/;"	f	class:libtorrent::torrent
session_closing	libtorrent/include/libtorrent/error_code.hpp	/^			session_closing,$/;"	e	enum:libtorrent::errors::error_code_enum
session_handle	libtorrent/include/libtorrent/session_handle.hpp	/^		explicit session_handle(std::weak_ptr<aux::session_impl> impl)$/;"	f	struct:libtorrent::session_handle
session_handle	libtorrent/include/libtorrent/session_handle.hpp	/^	struct TORRENT_EXPORT session_handle$/;"	s	namespace:libtorrent
session_id	libtorrent/include/libtorrent/i2p_stream.hpp	/^	char const* session_id() const { return m_session_id.c_str(); }$/;"	f	class:libtorrent::i2p_connection
session_interface	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^	struct TORRENT_EXTRA_EXPORT session_interface$/;"	s	namespace:libtorrent::aux
session_is_closing	libtorrent/include/libtorrent/error_code.hpp	/^			session_is_closing,$/;"	e	enum:libtorrent::errors::error_code_enum
session_log	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t session_log = 13_bit;$/;"	m	namespace:libtorrent::alert_category
session_log_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t session_log_notification = 13_bit;$/;"	m	class:libtorrent::alert
session_logger	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^	struct TORRENT_EXTRA_EXPORT session_logger$/;"	s	namespace:libtorrent::aux
session_params	libtorrent/include/libtorrent/session.hpp	/^	struct TORRENT_EXPORT session_params$/;"	s	namespace:libtorrent
session_plugin_wrapper	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				explicit session_plugin_wrapper(ext_function_t f) : m_f(std::move(f)) {}$/;"	f	struct:libtorrent::aux::final::session_plugin_wrapper
session_plugin_wrapper	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			struct session_plugin_wrapper : plugin$/;"	s	struct:libtorrent::aux::final
session_proxy	libtorrent/include/libtorrent/session.hpp	/^	class TORRENT_EXPORT session_proxy$/;"	c	namespace:libtorrent
session_settings	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^	struct TORRENT_EXTRA_EXPORT session_settings$/;"	s	namespace:libtorrent::aux
session_settings_single_thread	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^	struct TORRENT_EXTRA_EXPORT session_settings_single_thread$/;"	s	namespace:libtorrent::aux
session_status	libtorrent/include/libtorrent/session_status.hpp	/^	struct TORRENT_DEPRECATED_EXPORT session_status$/;"	s	namespace:libtorrent
session_udp_socket	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		explicit session_udp_socket(io_service& ios, listen_socket_handle ls)$/;"	f	struct:libtorrent::aux::session_udp_socket
session_udp_socket	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^	struct session_udp_socket$/;"	s	namespace:libtorrent::aux
session_view	include/session_view.hpp	/^struct session_view$/;"	s
session_view	src/session_view.cpp	/^session_view::session_view()$/;"	f	class:session_view
set	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		void set(Container& c, int const name, T val$/;"	f	struct:libtorrent::aux::session_settings_single_thread
set	libtorrent/include/libtorrent/bloom_filter.hpp	/^		void set(sha1_hash const& k)$/;"	f	struct:libtorrent::bloom_filter
set_announce_to_dht	libtorrent/include/libtorrent/torrent.hpp	/^		void set_announce_to_dht(bool b) { m_announce_to_dht = b; }$/;"	f	class:libtorrent::torrent
set_announce_to_lsd	libtorrent/include/libtorrent/torrent.hpp	/^		void set_announce_to_lsd(bool b) { m_announce_to_lsd = b; }$/;"	f	class:libtorrent::torrent
set_announce_to_trackers	libtorrent/include/libtorrent/torrent.hpp	/^		void set_announce_to_trackers(bool b) { m_announce_to_trackers = b; }$/;"	f	class:libtorrent::torrent
set_bit	libtorrent/include/libtorrent/bitfield.hpp	/^		void set_bit(IndexType const index)$/;"	f	namespace:libtorrent
set_block_timer	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		void set_block_timer(int t)$/;"	f	struct:libtorrent::dht::dos_blocker
set_bool	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_bool(int name, bool value)$/;"	f	struct:libtorrent::aux::session_settings
set_bool	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_bool(int name, bool value)$/;"	f	struct:libtorrent::aux::session_settings_single_thread
set_command	libtorrent/include/libtorrent/i2p_stream.hpp	/^	void set_command(command_t c) { m_command = c; }$/;"	f	class:libtorrent::i2p_stream
set_command	libtorrent/include/libtorrent/socks5_stream.hpp	/^	void set_command(int c)$/;"	f	class:libtorrent::socks5_stream
set_config_option	src/opentracker.c	/^char * set_config_option( char **option, char *value ) {$/;"	f
set_cursor_pos	src/print.cpp	/^void set_cursor_pos(int x, int y)$/;"	f
set_data	libtorrent/include/libtorrent/kademlia/put_data.hpp	/^	void set_data(item&& data) { m_data = std::move(data); }$/;"	f	struct:libtorrent::dht::put_data
set_destination	libtorrent/include/libtorrent/i2p_stream.hpp	/^	void set_destination(string_view d) { m_dest = d.to_string(); }$/;"	f	class:libtorrent::i2p_stream
set_dst_name	libtorrent/include/libtorrent/http_stream.hpp	/^	void set_dst_name(std::string const& host)$/;"	f	class:libtorrent::http_stream
set_dst_name	libtorrent/include/libtorrent/socks5_stream.hpp	/^	void set_dst_name(std::string const& host)$/;"	f	class:libtorrent::socks5_stream
set_end	libtorrent/include/libtorrent/lazy_entry.hpp	/^		void set_end(char const* end)$/;"	f	struct:libtorrent::lazy_entry
set_filter	src/torrent_view.cpp	/^void torrent_view::set_filter(int filter)$/;"	f	class:torrent_view
set_has_metadata	libtorrent/include/libtorrent/peer_connection.hpp	/^		void set_has_metadata(bool m) { m_has_metadata = m; }$/;"	f	class:libtorrent::peer_connection
set_have	libtorrent/include/libtorrent/piece_picker.hpp	/^			void set_have() { index = we_have_index; TORRENT_ASSERT(have()); }$/;"	f	struct:libtorrent::piece_picker::piece_pos
set_host_name	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void set_host_name(std::string const& name)$/;"	f	class:libtorrent::ssl_stream
set_int	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_int(int name, int value)$/;"	f	struct:libtorrent::aux::session_settings
set_int	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_int(int name, int value)$/;"	f	struct:libtorrent::aux::session_settings_single_thread
set_int	libtorrent/include/libtorrent/settings_pack.hpp	/^		void set_int(int name, flags::bitfield_flag<Type, Tag> const val)$/;"	f	struct:libtorrent::settings_pack
set_last_seen_complete	libtorrent/include/libtorrent/peer_connection.hpp	/^		void set_last_seen_complete(int ago) { m_last_seen_complete = ::time(nullptr) - ago; }$/;"	f	class:libtorrent::peer_connection
set_load_function	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void set_load_function(user_load_function_t fun)$/;"	f	struct:libtorrent::aux::final
set_low_prio_io	libtorrent/include/libtorrent/file_pool.hpp	/^		void set_low_prio_io(bool b) { m_low_prio_io = b; }$/;"	f	struct:libtorrent::file_pool
set_merkle_tree	libtorrent/include/libtorrent/torrent_info.hpp	/^		void set_merkle_tree(std::vector<sha1_hash>& h)$/;"	f	class:libtorrent::torrent_info
set_metadata	libtorrent/include/libtorrent/torrent_handle.hpp	/^		bool set_metadata(char const* metadata, int size) const$/;"	f	struct:libtorrent::torrent_handle
set_name	libtorrent/include/libtorrent/file_storage.hpp	/^		void set_name(std::string const& n) { m_name = n; }$/;"	f	class:libtorrent::file_storage
set_name_lookup	libtorrent/include/libtorrent/i2p_stream.hpp	/^	void set_name_lookup(char const* name) { m_name_lookup = name; }$/;"	f	class:libtorrent::i2p_stream
set_need_save_resume	libtorrent/include/libtorrent/torrent.hpp	/^		void set_need_save_resume()$/;"	f	class:libtorrent::torrent
set_need_tick	libtorrent/include/libtorrent/storage.hpp	/^		bool set_need_tick()$/;"	f	struct:libtorrent::storage_interface
set_no_connect	libtorrent/include/libtorrent/http_stream.hpp	/^	void set_no_connect(bool c) { m_no_connect = c; }$/;"	f	class:libtorrent::http_stream
set_not_have	libtorrent/include/libtorrent/piece_picker.hpp	/^			void set_not_have() { index = prio_index_t(0); TORRENT_ASSERT(!have()); }$/;"	f	struct:libtorrent::piece_picker::piece_pos
set_num_pieces	libtorrent/include/libtorrent/file_storage.hpp	/^		void set_num_pieces(int n) { m_num_pieces = n; }$/;"	f	class:libtorrent::file_storage
set_option	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		error_code set_option(SettableSocketOption const& opt, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
set_option	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		void set_option(SettableSocketOption const& opt)$/;"	f	struct:libtorrent::aux::socket_type
set_option	libtorrent/include/libtorrent/proxy_base.hpp	/^	error_code set_option(SettableSocketOption const& opt, error_code& ec)$/;"	f	class:libtorrent::proxy_base
set_option	libtorrent/include/libtorrent/proxy_base.hpp	/^	void set_option(SettableSocketOption const& opt)$/;"	f	class:libtorrent::proxy_base
set_option	libtorrent/include/libtorrent/ssl_stream.hpp	/^	error_code set_option(SettableSocketOption const& opt, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
set_option	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void set_option(SettableSocketOption const& opt)$/;"	f	class:libtorrent::ssl_stream
set_option	libtorrent/include/libtorrent/udp_socket.hpp	/^		void set_option(SocketOption const& opt, error_code& ec)$/;"	f	class:libtorrent::udp_socket
set_option	libtorrent/include/libtorrent/utp_stream.hpp	/^	error_code set_option(SettableSocketOption const&, error_code& ec) { return ec; }$/;"	f	struct:libtorrent::utp_stream
set_option	libtorrent/include/libtorrent/utp_stream.hpp	/^	void set_option(SettableSocketOption const&) {}$/;"	f	struct:libtorrent::utp_stream
set_outstanding_jobs	libtorrent/include/libtorrent/block_cache.hpp	/^			set_outstanding_jobs,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
set_owner	libtorrent/include/libtorrent/storage.hpp	/^		void set_owner(std::shared_ptr<void> const& tor) { m_torrent = tor; }$/;"	f	struct:libtorrent::storage_interface
set_packet_head	src/socket.c	/^void set_packet_head(char *buf, int cmd, int data_size, char data_type, int req_flag)$/;"	f
set_peer	libtorrent/include/libtorrent/torrent_handle.hpp	/^		void set_peer(tcp::endpoint const& ep)$/;"	f	struct:libtorrent::block_info
set_pid	libtorrent/include/libtorrent/peer_connection.hpp	/^		void set_pid(peer_id const& peer_id) { m_peer_id = peer_id; }$/;"	f	class:libtorrent::peer_connection
set_piece_hashes	libtorrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t$/;"	f	namespace:libtorrent
set_piece_hashes	libtorrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::string const& p$/;"	f	namespace:libtorrent
set_piece_hashes	libtorrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::string const& p)$/;"	f	namespace:libtorrent
set_piece_hashes	libtorrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::string const& p, error_code& ec)$/;"	f	namespace:libtorrent
set_piece_hashes	libtorrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::wstring const& p$/;"	f	namespace:libtorrent
set_piece_hashes	libtorrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::wstring const& p)$/;"	f	namespace:libtorrent
set_piece_length	libtorrent/include/libtorrent/file_storage.hpp	/^		void set_piece_length(int l)  { m_piece_length = l; }$/;"	f	class:libtorrent::file_storage
set_pinged	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	void set_pinged() { if (timeout_count == 0xff) timeout_count = 0; }$/;"	f	struct:libtorrent::dht::node_entry
set_pos	src/session_view.cpp	/^void session_view::set_pos(int pos)$/;"	f	class:session_view
set_priv	libtorrent/include/libtorrent/create_torrent.hpp	/^		void set_priv(bool p) { m_private = p; }$/;"	f	struct:libtorrent::create_torrent
set_progress_ppm	libtorrent/include/libtorrent/torrent.hpp	/^		void set_progress_ppm(int p) { m_progress_ppm = std::uint32_t(p); }$/;"	f	class:libtorrent::torrent
set_proxy	libtorrent/include/libtorrent/proxy_base.hpp	/^	void set_proxy(std::string hostname, int port)$/;"	f	class:libtorrent::proxy_base
set_queue_position_impl	libtorrent/include/libtorrent/torrent.hpp	/^		void set_queue_position_impl(queue_position_t const p)$/;"	f	class:libtorrent::torrent
set_rate_limit	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		void set_rate_limit(int l)$/;"	f	struct:libtorrent::dht::dos_blocker
set_send_barrier	libtorrent/include/libtorrent/peer_connection.hpp	/^		void set_send_barrier(int bytes)$/;"	f	class:libtorrent::peer_connection
set_session_id	libtorrent/include/libtorrent/i2p_stream.hpp	/^	void set_session_id(char const* id) { m_id = id; }$/;"	f	class:libtorrent::i2p_stream
set_size	src/torrent_view.cpp	/^void torrent_view::set_size(int width, int height)$/;"	f	class:torrent_view
set_socket_buffer_size	libtorrent/include/libtorrent/aux_/set_socket_buffer.hpp	/^	void set_socket_buffer_size(Socket& s, session_settings const& sett, error_code& ec)$/;"	f	namespace:libtorrent::aux
set_source_feed_url	libtorrent/include/libtorrent/torrent.hpp	/^		void set_source_feed_url(std::string const& s) { m_source_feed_url = s; }$/;"	f	class:libtorrent::torrent
set_storage_index	libtorrent/include/libtorrent/storage.hpp	/^		void set_storage_index(storage_index_t st) { m_storage_index = st; }$/;"	f	struct:libtorrent::storage_interface
set_str	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_str(int name, std::string value)$/;"	f	struct:libtorrent::aux::session_settings
set_str	libtorrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_str(int name, std::string value)$/;"	f	struct:libtorrent::aux::session_settings_single_thread
set_torrent_params	src/client_test.cpp	/^void set_torrent_params(lt::add_torrent_params& p)$/;"	f
set_url	libtorrent/include/libtorrent/torrent.hpp	/^		void set_url(std::string const& s) { m_url = s; }$/;"	f	class:libtorrent::torrent
set_username	libtorrent/include/libtorrent/http_stream.hpp	/^	void set_username(std::string const& user$/;"	f	class:libtorrent::http_stream
set_username	libtorrent/include/libtorrent/socks5_stream.hpp	/^	void set_username(std::string const& user$/;"	f	class:libtorrent::socks5_stream
set_ut_pex	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		void set_ut_pex(std::weak_ptr<ut_pex_peer_store> ut_pex)$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
set_uuid	libtorrent/include/libtorrent/torrent.hpp	/^		void set_uuid(std::string const& s) { m_uuid = s; }$/;"	f	class:libtorrent::torrent
set_value_for_net	src/ot_accesslist.c	/^void *set_value_for_net( const ot_net *net, ot_vector *vector, const void *value, const size_t member_size ) {$/;"	f
set_verify_callback	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void set_verify_callback(T const& fun, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
set_version	libtorrent/include/libtorrent/socks5_stream.hpp	/^	void set_version(int v) { m_version = v; }$/;"	f	class:libtorrent::socks5_stream
set_width	src/session_view.cpp	/^void session_view::set_width(int width)$/;"	f	class:session_view
sett	libtorrent/include/libtorrent/peer_connection.hpp	/^		aux::session_settings const* sett;$/;"	m	class:libtorrent::peer_connection_args::aux
settings	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^	struct settings : dht_settings$/;"	s	namespace:libtorrent::dht
settings	libtorrent/include/libtorrent/kademlia/node.hpp	/^	dht::settings const& settings() const { return m_settings; }$/;"	f	class:libtorrent::dht::node::dht
settings	libtorrent/include/libtorrent/session.hpp	/^		settings_pack settings;$/;"	m	struct:libtorrent::session_params
settings	libtorrent/include/libtorrent/storage.hpp	/^		aux::session_settings const& settings() const { return *m_settings; }$/;"	f	class:libtorrent::storage_interface::aux
settings	libtorrent/include/libtorrent/tracker_manager.hpp	/^		aux::session_settings const& settings() const { return m_settings; }$/;"	f	class:libtorrent::final::aux
settings_pack	libtorrent/include/libtorrent/settings_pack.hpp	/^	struct TORRENT_EXPORT settings_pack$/;"	s	namespace:libtorrent
severity	libtorrent/include/libtorrent/alert.hpp	/^		severity_t severity() const { return warning; }$/;"	f	class:libtorrent::alert
severity_t	libtorrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	g	class:libtorrent::alert
sha1_ctx	libtorrent/include/libtorrent/sha1.hpp	/^	struct sha1_ctx$/;"	s	namespace:libtorrent
sha512_ctx	libtorrent/include/libtorrent/sha512.hpp	/^	struct sha512_ctx$/;"	s	namespace:libtorrent
share_mode	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool share_mode() const { return m_share_mode; }$/;"	f	class:libtorrent::peer_connection
share_mode	libtorrent/include/libtorrent/torrent.hpp	/^		bool share_mode() const { return m_share_mode; }$/;"	f	class:libtorrent::torrent
share_mode	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t share_mode = 2_bit;$/;"	m	namespace:libtorrent::torrent_flags
share_mode	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER share_mode = false;$/;"	m	struct:libtorrent::torrent_status
share_mode	src/client_test.cpp	/^bool share_mode = false;$/;"	v
share_mode_msg	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			share_mode_msg = 8$/;"	e	enum:libtorrent::bt_peer_connection::__anon47
share_mode_target	libtorrent/include/libtorrent/settings_pack.hpp	/^			share_mode_target,$/;"	e	enum:libtorrent::settings_pack::int_types
share_ratio_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			share_ratio_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
shared_from_this	libtorrent/include/libtorrent/http_tracker_connection.hpp	/^		std::shared_ptr<http_tracker_connection> shared_from_this()$/;"	f	class:libtorrent::http_tracker_connection
shared_from_this	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::shared_ptr<tracker_connection> shared_from_this()$/;"	f	struct:libtorrent::tracker_connection
shared_from_this	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::shared_ptr<udp_tracker_connection> shared_from_this()$/;"	f	class:libtorrent::udp_tracker_connection
short_timeout	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	static constexpr traversal_flags_t short_timeout = 1_bit;$/;"	m	struct:libtorrent::dht::traversal_algorithm
should_exit	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		bool should_exit() { return m_threads_to_exit > 0; }$/;"	f	struct:libtorrent::disk_io_thread_pool
should_post	libtorrent/include/libtorrent/alert_manager.hpp	/^		bool should_post() const$/;"	f	class:libtorrent::alert_manager
show_dht_status	src/client_test.cpp	/^bool show_dht_status = false;$/;"	v
show_pad_files	src/client_test.cpp	/^bool show_pad_files = false;$/;"	v
show_torrent	src/torrent_view.cpp	/^bool torrent_view::show_torrent(lt::torrent_status const& st)$/;"	f	class:torrent_view
shutdown	libtorrent/include/libtorrent/ssl_stream.hpp	/^	void shutdown(error_code& ec)$/;"	f	class:libtorrent::ssl_stream
sig	libtorrent/include/libtorrent/kademlia/item.hpp	/^	signature const& sig() const$/;"	f	class:libtorrent::dht::item
sig_quit_listen	src/main.c	/^static void sig_quit_listen(int e)$/;"	f	file:
signal_handler	src/client_test.cpp	/^void signal_handler(int)$/;"	f
signal_handler	src/opentracker.c	/^static void signal_handler( int s ) {$/;"	f	file:
signature	libtorrent/include/libtorrent/kademlia/types.hpp	/^		explicit signature(char const* b)$/;"	f	struct:libtorrent::dht::signature
signature	libtorrent/include/libtorrent/kademlia/types.hpp	/^	struct signature$/;"	s	namespace:libtorrent::dht
sim	libtorrent/include/libtorrent/io_service_fwd.hpp	/^namespace sim { namespace asio {$/;"	n
single_threaded	libtorrent/include/libtorrent/debug.hpp	/^		single_threaded(): m_id() {}$/;"	f	struct:libtorrent::single_threaded
single_threaded	libtorrent/include/libtorrent/debug.hpp	/^	struct TORRENT_EXTRA_EXPORT single_threaded$/;"	s	namespace:libtorrent
size	include/ot_accesslist.h	/^  size_t   size;$/;"	m	struct:ot_log
size	include/ot_vector.h	/^  size_t  size;$/;"	m	struct:__anon17
size	libowfat/cdb.h	/^  uint32 size; \/* initialized if map is nonzero *\/$/;"	m	struct:cdb
size	libowfat/libowfat/cdb.h	/^  uint32 size; \/* initialized if map is nonzero *\/$/;"	m	struct:cdb
size	libtorrent/include/libtorrent/alert_types.hpp	/^		int const size;$/;"	m	struct:libtorrent::final
size	libtorrent/include/libtorrent/aux_/bind_to_device.hpp	/^		size_t size(Protocol const&) const { return strlen(m_value) + 1; }$/;"	f	struct:libtorrent::aux::bind_to_device
size	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
size	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
size	libtorrent/include/libtorrent/bloom_filter.hpp	/^		float size() const$/;"	f	struct:libtorrent::bloom_filter
size	libtorrent/include/libtorrent/buffer.hpp	/^	difference_type size() const { return m_size; }$/;"	f	class:libtorrent::buffer
size	libtorrent/include/libtorrent/chained_buffer.hpp	/^			int size = 0; \/\/ the total size of the buffer$/;"	m	struct:libtorrent::chained_buffer
size	libtorrent/include/libtorrent/chained_buffer.hpp	/^		int size() const { return m_bytes; }$/;"	f	namespace:libtorrent
size	libtorrent/include/libtorrent/disk_buffer_holder.hpp	/^		std::size_t size() const { return m_size; }$/;"	f	struct:libtorrent::disk_buffer_holder
size	libtorrent/include/libtorrent/file_storage.hpp	/^		std::int64_t size;$/;"	m	struct:libtorrent::file_entry
size	libtorrent/include/libtorrent/file_storage.hpp	/^		std::int64_t size;$/;"	m	struct:libtorrent::file_slice
size	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t size:48;$/;"	m	struct:libtorrent::internal_file_entry
size	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		int size() const { return m_num_items; }$/;"	f	struct:libtorrent::heterogeneous_queue
size	libtorrent/include/libtorrent/kademlia/msg.hpp	/^	int size;$/;"	m	struct:libtorrent::dht::key_desc_t
size	libtorrent/include/libtorrent/kademlia/node.hpp	/^	std::tuple<int, int, int> size() const { return m_table.size(); }$/;"	f	class:libtorrent::dht::node
size	libtorrent/include/libtorrent/kademlia/routing_table.hpp	/^	std::size_t size() const { return m_ip4s.size() + m_ip6s.size(); }$/;"	f	struct:libtorrent::dht::ip_set
size	libtorrent/include/libtorrent/linked_list.hpp	/^		int size() const { return m_size; }$/;"	f	struct:libtorrent::linked_list
size	libtorrent/include/libtorrent/netlink.hpp	/^		std::size_t size() const$/;"	f	class:libtorrent::basic_nl_endpoint
size	libtorrent/include/libtorrent/packet_buffer.hpp	/^		int size() const { return m_size; }$/;"	f	class:libtorrent::packet_buffer
size	libtorrent/include/libtorrent/packet_pool.hpp	/^		std::uint16_t size;$/;"	m	struct:libtorrent::packet
size	libtorrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::dont_fragment
size	libtorrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::exclusive_address_use
size	libtorrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::traffic_class
size	libtorrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::type_of_service
size	libtorrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::v6_protection_level
size	libtorrent/include/libtorrent/socket.hpp	/^		std::size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::no_enobufs
size	libtorrent/include/libtorrent/socket.hpp	/^		std::size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::tcp_notsent_lowat
size	libtorrent/include/libtorrent/tailqueue.hpp	/^		int size() const { TORRENT_ASSERT(m_size >= 0); return m_size; }$/;"	f	struct:libtorrent::tailqueue
size_divisible	libtorrent/include/libtorrent/kademlia/msg.hpp	/^		size_divisible = 8$/;"	e	enum:libtorrent::dht::key_desc_t::__anon64
size_limit	libtorrent/include/libtorrent/file_pool.hpp	/^		int size_limit() const { return m_size; }$/;"	f	struct:libtorrent::file_pool
sizeof	libtorrent/include/libtorrent/piece_picker.hpp	/^		static_assert(sizeof(piece_pos) == sizeof(char) * 8, "unexpected struct size");$/;"	m	class:libtorrent::piece_picker
skip	src/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:
sleep_and_input	src/client_test.cpp	/^bool sleep_and_input(int* c, lt::time_duration const sleep)$/;"	f
sliding_average	libtorrent/include/libtorrent/sliding_average.hpp	/^	sliding_average(): m_mean(0), m_average_deviation(0), m_num_samples(0) {}$/;"	f	struct:libtorrent::sliding_average
sliding_average	libtorrent/include/libtorrent/sliding_average.hpp	/^struct sliding_average$/;"	s	namespace:libtorrent
slot_offset	libtorrent/include/libtorrent/part_file.hpp	/^		std::int64_t slot_offset(slot_index_t const slot) const$/;"	f	struct:libtorrent::part_file
slow	libtorrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	e	enum:libtorrent::partial_piece_info::state_t
smooth_connects	libtorrent/include/libtorrent/settings_pack.hpp	/^			smooth_connects,$/;"	e	enum:libtorrent::settings_pack::bool_types
smp_mb__after_atomic_dec	libowfat/CAS.h	132;"	d
smp_mb__after_atomic_dec	libowfat/CAS.h	143;"	d
smp_mb__after_atomic_inc	libowfat/CAS.h	134;"	d
smp_mb__after_atomic_inc	libowfat/CAS.h	145;"	d
smp_mb__before_atomic_dec	libowfat/CAS.h	131;"	d
smp_mb__before_atomic_dec	libowfat/CAS.h	142;"	d
smp_mb__before_atomic_inc	libowfat/CAS.h	133;"	d
smp_mb__before_atomic_inc	libowfat/CAS.h	144;"	d
snubbed	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t snubbed = 12_bit;$/;"	m	struct:libtorrent::peer_info
snubbed_piece_picks	libtorrent/include/libtorrent/performance_counters.hpp	/^			snubbed_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
sock	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<tcp::acceptor> sock;$/;"	m	struct:libtorrent::aux::listen_socket_t
sock	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		udp_socket sock;$/;"	m	struct:libtorrent::aux::session_udp_socket
sock	src/ot_mutex.c	/^  int64           sock;$/;"	m	struct:ot_task	file:
sock_accept	libtorrent/include/libtorrent/operations.hpp	/^		sock_accept,$/;"	m	class:libtorrent::operation_t
sock_bind	libtorrent/include/libtorrent/operations.hpp	/^		sock_bind,$/;"	m	class:libtorrent::operation_t
sock_bind_to_device	libtorrent/include/libtorrent/operations.hpp	/^		sock_bind_to_device,$/;"	m	class:libtorrent::operation_t
sock_listen	libtorrent/include/libtorrent/operations.hpp	/^		sock_listen,$/;"	m	class:libtorrent::operation_t
sock_open	libtorrent/include/libtorrent/operations.hpp	/^		sock_open,$/;"	m	class:libtorrent::operation_t
sock_option	libtorrent/include/libtorrent/operations.hpp	/^		sock_option,$/;"	m	class:libtorrent::operation_t
sock_read	libtorrent/include/libtorrent/operations.hpp	/^		sock_read,$/;"	m	class:libtorrent::operation_t
sock_type	libtorrent/include/libtorrent/alert_types.hpp	/^		socket_type_t TORRENT_DEPRECATED_MEMBER sock_type;$/;"	m	namespace:libtorrent
sock_type	libtorrent/include/libtorrent/alert_types.hpp	/^		socket_type_t TORRENT_DEPRECATED_MEMBER sock_type;$/;"	v
sock_write	libtorrent/include/libtorrent/operations.hpp	/^		sock_write,$/;"	m	class:libtorrent::operation_t
socket	libtorrent/include/libtorrent/announce_entry.hpp	/^		aux::listen_socket_handle socket;$/;"	m	struct:libtorrent::announce_endpoint
socket	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			std::shared_ptr<udp::socket> socket;$/;"	m	struct:libtorrent::broadcast_socket::socket_entry
socket	libtorrent/include/libtorrent/http_connection.hpp	/^	aux::socket_type const& socket() const { return m_sock; }$/;"	f	class:libtorrent::http_connection::aux
socket_accept4	libowfat/socket/socket_accept4.c	/^int socket_accept4(int s,char *ip,uint16 *port) {$/;"	f
socket_accept6	libowfat/socket/socket_accept6.c	/^int socket_accept6(int s,char* ip,uint16* port,uint32* scope_id)$/;"	f
socket_bind4	libowfat/socket/socket_bind4.c	/^int socket_bind4(int s,const char *ip,uint16 port) {$/;"	f
socket_bind4_reuse	libowfat/socket/socket_bind4_reuse.c	/^int socket_bind4_reuse(int s,const char *ip,uint16 port) {$/;"	f
socket_bind6	libowfat/socket/socket_bind6.c	/^int socket_bind6(int s,const char ip[16],uint16 port,uint32 scope_id)$/;"	f
socket_bind6_reuse	libowfat/socket/socket_bind6_reuse.c	/^int socket_bind6_reuse(int s,const char *ip,uint16 port,uint32 scope_id) {$/;"	f
socket_broadcast	libowfat/socket/socket_broadcast.c	/^int socket_broadcast(int s)$/;"	f
socket_connect4	libowfat/socket/socket_connect4.c	/^int socket_connect4(int s,const char *ip,uint16 port) {$/;"	f
socket_connect6	libowfat/socket/socket_connect6.c	/^int socket_connect6(int s,const char ip[16],uint16 port,uint32 scope_id)$/;"	f
socket_connected	libowfat/socket/socket_connected.c	/^int socket_connected(int s) {$/;"	f
socket_deferaccept	libowfat/socket/socket_deferaccept.c	/^void socket_deferaccept(int s,enum defermode mode) {$/;"	f
socket_entry	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			explicit socket_entry(std::shared_ptr<udp::socket> s)$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
socket_entry	libtorrent/include/libtorrent/broadcast_socket.hpp	/^			socket_entry(std::shared_ptr<udp::socket> s$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
socket_entry	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		struct socket_entry$/;"	s	class:libtorrent::broadcast_socket
socket_fastopen	libowfat/socket/socket_fastopen.c	/^int socket_fastopen(int s) {$/;"	f
socket_fastopen_connect4	libowfat/socket/socket_fastopen_connect4.c	/^ssize_t socket_fastopen_connect4(int s,const char* ip,uint16 port,const char* buf,size_t len) {$/;"	f
socket_fastopen_connect6	libowfat/socket/socket_fastopen_connect6.c	/^ssize_t socket_fastopen_connect6(int s,const char* ip,uint16 port,uint32_t scope_id,const char* buf,size_t len) {$/;"	f
socket_getifidx	libowfat/socket/socket_getifidx.c	/^uint32 socket_getifidx(const char* ifname) {$/;"	f
socket_getifname	libowfat/socket/socket_getifname.c	/^const char* socket_getifname(uint32 _interface) {$/;"	f
socket_listen	libowfat/socket/socket_listen.c	/^int socket_listen(int s,unsigned int backlog) {$/;"	f
socket_local4	libowfat/socket/socket_local4.c	/^int socket_local4(int s,char ip[4],uint16 *port)$/;"	f
socket_local6	libowfat/socket/socket_local6.c	/^int socket_local6(int s,char ip[16],uint16 *port,uint32 *scope_id)$/;"	f
socket_manager	libtorrent/include/libtorrent/kademlia/node.hpp	/^struct socket_manager$/;"	s	namespace:libtorrent::dht
socket_mchopcount6	libowfat/socket/socket_mchopcount6.c	/^int socket_mchopcount6(int s,char TTL)$/;"	f
socket_mcjoin4	libowfat/socket/socket_mcjoin4.c	/^int socket_mcjoin4(int s,const char ip[4],const char _interface[4])$/;"	f
socket_mcjoin6	libowfat/socket/socket_mcjoin6.c	/^int socket_mcjoin6(int s,const char ip[16],int _interface)$/;"	f
socket_mcleave4	libowfat/socket/socket_mcleave4.c	/^int socket_mcleave4(int s,const char ip[4])$/;"	f
socket_mcleave6	libowfat/socket/socket_mcleave6.c	/^int socket_mcleave6(int s,const char ip[16])$/;"	f
socket_mcloop4	libowfat/socket/socket_mcloop4.c	/^int socket_mcloop4(int s,char loop)$/;"	f
socket_mcloop6	libowfat/socket/socket_mcloop6.c	/^int socket_mcloop6(int s,char loop)$/;"	f
socket_mcttl4	libowfat/socket/socket_mcttl4.c	/^int socket_mcttl4(int s,char TTL)$/;"	f
socket_quickack	libowfat/socket/socket_quickack.c	/^int socket_quickack(int s,int value) {$/;"	f
socket_recv4	libowfat/socket/socket_recv4.c	/^ssize_t socket_recv4(int s,char *buf,size_t len,char ip[4],uint16 *port) {$/;"	f
socket_recv6	libowfat/socket/socket_recv6.c	/^ssize_t socket_recv6(int s,char *buf,size_t len,char ip[16],uint16 *port,uint32 *scope_id)$/;"	f
socket_recv_size10	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size10,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size11	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size11,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size12	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size12,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size13	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size13,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size14	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size14,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size15	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size15,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size16	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size16,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size17	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size17,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size18	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size18,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size19	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size19,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size20	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size20,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size3	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size3,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size4	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size4,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size5	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size5,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size6	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size6,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size7	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size7,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size8	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size8,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size9	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size9,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_remote4	libowfat/socket/socket_remote4.c	/^int socket_remote4(int s,char ip[4],uint16 *port)$/;"	f
socket_remote6	libowfat/socket/socket_remote6.c	/^int socket_remote6(int s,char ip[16],uint16 *port,uint32 *scope_id)$/;"	f
socket_sctp4	libowfat/socket/socket_sctp4.c	/^int socket_sctp4(void) {$/;"	f
socket_sctp4b	libowfat/socket/socket_sctp4b.c	/^int socket_sctp4b(void) {$/;"	f
socket_sctp6	libowfat/socket/socket_sctp6.c	/^int socket_sctp6(void) {$/;"	f
socket_sctp6b	libowfat/socket/socket_sctp6b.c	/^int socket_sctp6b(void)$/;"	f
socket_send4	libowfat/socket/socket_send4.c	/^ssize_t socket_send4(int s,const char *buf,size_t len,const char ip[4],uint16 port) {$/;"	f
socket_send4_flag	libowfat/socket/socket_send4.c	/^ssize_t socket_send4_flag(int s,const char *buf,size_t len,const char ip[4],uint16 port,int flag) {$/;"	f
socket_send6	libowfat/socket/socket_send6.c	/^ssize_t socket_send6(int s,const char *buf,size_t len,const char ip[16],uint16 port,uint32 scope_id) {$/;"	f
socket_send6_flag	libowfat/socket/socket_send6.c	/^ssize_t socket_send6_flag(int s,const char *buf,size_t len,const char ip[16],uint16 port,uint32 scope_id,int flag)$/;"	f
socket_send_size10	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size10,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size11	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size11,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size12	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size12,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size13	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size13,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size14	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size14,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size15	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size15,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size16	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size16,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size17	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size17,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size18	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size18,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size19	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size19,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size20	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size20,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size3	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size3,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size4	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size4,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size5	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size5,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size6	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size6,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size7	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size7,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size8	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size8,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size9	libtorrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size9,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_tcp	libowfat/libowfat/socket.h	28;"	d
socket_tcp	libowfat/socket.h	28;"	d
socket_tcp4	libowfat/socket/socket_tcp4.c	/^int socket_tcp4(void) {$/;"	f
socket_tcp4b	libowfat/socket/socket_tcp4b.c	/^int socket_tcp4b(void) {$/;"	f
socket_tcp6	libowfat/socket/socket_tcp6.c	/^int socket_tcp6(void) {$/;"	f
socket_tcp6b	libowfat/socket/socket_tcp6b.c	/^int socket_tcp6b(void)$/;"	f
socket_tryreservein	libowfat/socket/socket_tryreservein.c	/^void socket_tryreservein(int s,int size)$/;"	f
socket_type	libtorrent/include/libtorrent/alert_types.hpp	/^		int const socket_type;$/;"	m	struct:libtorrent::final
socket_type	libtorrent/include/libtorrent/alert_types.hpp	/^		lt::socket_type_t const socket_type;$/;"	m	class:libtorrent::lt
socket_type	libtorrent/include/libtorrent/alert_types.hpp	/^		lt::socket_type_t const socket_type;$/;"	m	class:lt
socket_type	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		explicit socket_type(io_service& ios): m_io_service(ios), m_type(0) {}$/;"	f	struct:libtorrent::aux::socket_type
socket_type	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct TORRENT_EXTRA_EXPORT socket_type$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<http_stream>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<i2p_stream>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<socks5_stream>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<ssl_stream<http_stream>>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<ssl_stream<socks5_stream>>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<ssl_stream<tcp::socket>>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<ssl_stream<utp_stream>>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<tcp::socket>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<utp_stream>$/;"	s	namespace:libtorrent::aux
socket_type_t	libtorrent/include/libtorrent/alert_types.hpp	/^	enum class socket_type_t : std::uint8_t$/;"	c	namespace:libtorrent
socket_udp	libowfat/libowfat/socket.h	29;"	d
socket_udp	libowfat/socket.h	29;"	d
socket_udp4	libowfat/socket/socket_udp4.c	/^int socket_udp4(void) {$/;"	f
socket_udp4b	libowfat/socket/socket_udp4.c	/^int socket_udp4b(void) {$/;"	f
socket_udp6	libowfat/socket/socket_udp6.c	/^int socket_udp6(void) {$/;"	f
socket_udp6b	libowfat/socket/socket_udp6.c	/^int socket_udp6b(void)$/;"	f
socketfree	libowfat/dns/dns_transmit.c	/^static void socketfree(struct dns_transmit *d)$/;"	f	file:
socks5	libtorrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
socks5_connect	libtorrent/include/libtorrent/socks5_stream.hpp	/^		socks5_connect = 1,$/;"	e	enum:libtorrent::socks5_stream::__anon66
socks5_stream	libtorrent/include/libtorrent/socks5_stream.hpp	/^	explicit socks5_stream(io_service& io_service)$/;"	f	class:libtorrent::socks5_stream
socks5_stream	libtorrent/include/libtorrent/socks5_stream.hpp	/^class socks5_stream : public proxy_base$/;"	c	namespace:libtorrent
socks5_udp_associate	libtorrent/include/libtorrent/socks5_stream.hpp	/^		socks5_udp_associate = 3$/;"	e	enum:libtorrent::socks5_stream::__anon66
socks_error	libtorrent/include/libtorrent/socks5_stream.hpp	/^namespace socks_error {$/;"	n	namespace:libtorrent
socks_error_code	libtorrent/include/libtorrent/socks5_stream.hpp	/^	enum socks_error_code$/;"	g	namespace:libtorrent::socks_error
sorted_insert	libtorrent/include/libtorrent/vector_utils.hpp	/^	void sorted_insert(std::vector<T>& container, U v)$/;"	f	namespace:libtorrent
source	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t source:4;$/;"	m	struct:libtorrent::announce_entry
source	libtorrent/include/libtorrent/peer_info.hpp	/^		peer_source_flags_t source;$/;"	m	struct:libtorrent::peer_info
source	libtorrent/include/libtorrent/peer_info.hpp	/^		std::uint8_t source;$/;"	m	struct:libtorrent::peer_list_entry
source	libtorrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t source:6;$/;"	m	struct:libtorrent::torrent_peer
sourceExhausted	libtorrent/include/libtorrent/ConvertUTF.h	/^	sourceExhausted,  \/* partial character in source, but hit end *\/$/;"	e	enum:ConversionResult
sourceIllegal	libtorrent/include/libtorrent/ConvertUTF.h	/^	sourceIllegal     \/* source sequence is illegal\/malformed *\/$/;"	e	enum:ConversionResult
source_client	libtorrent/include/libtorrent/announce_entry.hpp	/^			source_client = 2,$/;"	e	enum:libtorrent::announce_entry::tracker_source
source_dht	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr ip_source_t source_dht = 1_bit;$/;"	m	struct:libtorrent::aux::session_interface
source_exhausted	libtorrent/include/libtorrent/utf8.hpp	/^			source_exhausted,$/;"	e	enum:libtorrent::utf8_errors::error_code_enum
source_feed_url	libtorrent/include/libtorrent/torrent.hpp	/^		std::string const& source_feed_url() const { return m_source_feed_url; }$/;"	f	class:libtorrent::torrent::std
source_hint	libtorrent/include/libtorrent/enum_net.hpp	/^		address source_hint;$/;"	m	struct:libtorrent::ip_route
source_illegal	libtorrent/include/libtorrent/utf8.hpp	/^			source_illegal$/;"	e	enum:libtorrent::utf8_errors::error_code_enum
source_ip_cannot_be_wildcarded	libtorrent/include/libtorrent/upnp.hpp	/^			source_ip_cannot_be_wildcarded = 715,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
source_magnet_link	libtorrent/include/libtorrent/announce_entry.hpp	/^			source_magnet_link = 4,$/;"	e	enum:libtorrent::announce_entry::tracker_source
source_peer	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr ip_source_t source_peer = 2_bit;$/;"	m	struct:libtorrent::aux::session_interface
source_router	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr ip_source_t source_router = 4_bit;$/;"	m	struct:libtorrent::aux::session_interface
source_tex	libtorrent/include/libtorrent/announce_entry.hpp	/^			source_tex = 8$/;"	e	enum:libtorrent::announce_entry::tracker_source
source_torrent	libtorrent/include/libtorrent/announce_entry.hpp	/^			source_torrent = 1,$/;"	e	enum:libtorrent::announce_entry::tracker_source
source_tracker	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr ip_source_t source_tracker = 3_bit;$/;"	m	struct:libtorrent::aux::session_interface
space	include/ot_vector.h	/^  size_t  space;$/;"	m	struct:__anon17
space_exhausted	libtorrent/include/libtorrent/gzip.hpp	/^			space_exhausted,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
span	libtorrent/include/libtorrent/packet_buffer.hpp	/^		index_type span() const { return (m_last - m_first) & 0xffff; }$/;"	f	class:libtorrent::packet_buffer
span	libtorrent/include/libtorrent/span.hpp	/^		span(Cont const& c) \/\/ NOLINT$/;"	f	struct:libtorrent::span
span	libtorrent/include/libtorrent/span.hpp	/^		span(Cont& c) \/\/ NOLINT$/;"	f	struct:libtorrent::span
span	libtorrent/include/libtorrent/span.hpp	/^	struct span$/;"	s	namespace:libtorrent
sparse	libtorrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t sparse = 2_bit;$/;"	m	namespace:libtorrent::file_open_mode
sparse	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t sparse = 2_bit;$/;"	m	namespace:libtorrent::open_mode
split	libowfat/cdb_make.h	/^  struct cdb_hp *split; \/* includes space for hash *\/$/;"	m	struct:cdb_make	typeref:struct:cdb_make::cdb_hp
split	libowfat/libowfat/cdb_make.h	/^  struct cdb_hp *split; \/* includes space for hash *\/$/;"	m	struct:cdb_make	typeref:struct:cdb_make::cdb_hp
sqn	libtorrent/include/libtorrent/kademlia/types.hpp	/^		sequence_number(sequence_number const& sqn) = default;$/;"	m	struct:libtorrent::dht::sequence_number
src	libtorrent/include/libtorrent/kademlia/dos_blocker.hpp	/^			address src;$/;"	m	struct:libtorrent::dht::dos_blocker::node_ban_entry
ssl	libtorrent/include/libtorrent/aux_/openssl.hpp	/^namespace ssl {$/;"	n	namespace:libtorrent
ssl	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			transport ssl;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
ssl	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		transport ssl = transport::plaintext;$/;"	m	struct:libtorrent::aux::listen_socket_t
ssl	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	libtorrent/include/libtorrent/http_connection.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	libtorrent/include/libtorrent/string_util.hpp	/^		bool ssl;$/;"	m	struct:libtorrent::listen_interface_t
ssl	libtorrent/include/libtorrent/torrent.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	libtorrent/include/libtorrent/tracker_manager.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl_ctx	libtorrent/include/libtorrent/torrent.hpp	/^		boost::asio::ssl::context* ssl_ctx() const { return m_ssl_ctx.get(); }$/;"	f	class:libtorrent::torrent
ssl_ctx	libtorrent/include/libtorrent/tracker_manager.hpp	/^		boost::asio::ssl::context* ssl_ctx = nullptr;$/;"	m	struct:libtorrent::tracker_request
ssl_handshake	libtorrent/include/libtorrent/operations.hpp	/^		ssl_handshake,$/;"	m	class:libtorrent::operation_t
ssl_listen	libtorrent/include/libtorrent/settings_pack.hpp	/^			ssl_listen TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
ssl_socket	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t ssl_socket = 18_bit;$/;"	m	struct:libtorrent::peer_info
ssl_stream	libtorrent/include/libtorrent/ssl_stream.hpp	/^	explicit ssl_stream(io_service& io_service, ssl::context& ctx)$/;"	f	class:libtorrent::ssl_stream
ssl_stream	libtorrent/include/libtorrent/ssl_stream.hpp	/^class ssl_stream$/;"	c	namespace:libtorrent
ssl_tcp_socket	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^			ssl_tcp_socket,$/;"	m	struct:libtorrent::peer_class_type_filter	typeref:enum:libtorrent::peer_class_type_filter::
ssl_torrent	libtorrent/include/libtorrent/kademlia/announce_flags.hpp	/^constexpr announce_flags_t ssl_torrent = 2_bit;$/;"	m	namespace:libtorrent::dht::announce
ssl_utp_socket	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^			ssl_utp_socket,$/;"	m	struct:libtorrent::peer_class_type_filter	typeref:enum:libtorrent::peer_class_type_filter::
stack	libtorrent/include/libtorrent/debug.hpp	/^		std::string stack;$/;"	m	struct:libtorrent::async_t
stack_allocator	libtorrent/include/libtorrent/stack_allocator.hpp	/^		stack_allocator() {}$/;"	f	struct:libtorrent::stack_allocator
stack_allocator	libtorrent/include/libtorrent/stack_allocator.hpp	/^	struct TORRENT_EXTRA_EXPORT stack_allocator$/;"	s	namespace:libtorrent
standard_bittorrent	libtorrent/include/libtorrent/peer_info.hpp	/^			standard_bittorrent = 0,$/;"	e	enum:libtorrent::peer_info::connection_type_t
start	libowfat/cdb_make.h	/^  uint32 start[256];$/;"	m	struct:cdb_make
start	libowfat/libowfat/cdb_make.h	/^  uint32 start[256];$/;"	m	struct:cdb_make
start	libtorrent/include/libtorrent/ip_filter.hpp	/^			Addr start;$/;"	m	struct:libtorrent::detail::filter_impl::range
start	libtorrent/include/libtorrent/lazy_entry.hpp	/^			char const* start;$/;"	m	union:libtorrent::lazy_entry::data_t
start	libtorrent/include/libtorrent/peer_request.hpp	/^		int start;$/;"	m	struct:libtorrent::peer_request
start	libtorrent/include/libtorrent/web_peer_connection.hpp	/^			std::int64_t start;$/;"	m	struct:libtorrent::web_peer_connection::file_request_t
start_bt	src/client_test.cpp	/^int start_bt(int argc, char *argv[])$/;"	f
start_bt	src/test.cpp	/^int start_bt(const char *save_path, const char *torrent_path, const int port, uint64_t physic_offset)$/;"	f
start_bt	src/torrent.cpp	/^int start_bt(const char *save_path, const char *torrent_path, const int port, uint64_t physic_offset)$/;"	f
start_default_features	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr session_flags_t TORRENT_DEPRECATED_MEMBER start_default_features = 1_bit;$/;"	m	struct:libtorrent::session_handle
start_offset	libtorrent/include/libtorrent/bdecode.hpp	/^	int start_offset() const { TORRENT_ASSERT(type == string); return int(header) + 2; }$/;"	f	namespace:libtorrent::detail
start_sent	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER start_sent:1;$/;"	m	struct:libtorrent::announce_entry
start_sent	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool start_sent : 1;$/;"	m	struct:libtorrent::announce_endpoint
start_track_server	src/opentracker.c	/^int start_track_server(int port)$/;"	f
started	libtorrent/include/libtorrent/torrent.hpp	/^		time_point32 started() const { return m_started; }$/;"	f	class:libtorrent::torrent
started	libtorrent/include/libtorrent/tracker_manager.hpp	/^			started,$/;"	e	enum:libtorrent::tracker_request::event_t
stat	libtorrent/include/libtorrent/stat.hpp	/^	class TORRENT_EXTRA_EXPORT stat$/;"	c	namespace:libtorrent
stat_cache	libtorrent/include/libtorrent/stat_cache.hpp	/^	struct TORRENT_EXTRA_EXPORT stat_cache$/;"	s	namespace:libtorrent
stat_cache_t	libtorrent/include/libtorrent/stat_cache.hpp	/^			explicit stat_cache_t(std::int64_t s): file_size(s) {}$/;"	f	struct:libtorrent::stat_cache::stat_cache_t
stat_cache_t	libtorrent/include/libtorrent/stat_cache.hpp	/^		struct stat_cache_t$/;"	s	struct:libtorrent::stat_cache
stat_channel	libtorrent/include/libtorrent/stat.hpp	/^		stat_channel()$/;"	f	class:libtorrent::stat_channel
stat_channel	libtorrent/include/libtorrent/stat.hpp	/^	class TORRENT_EXTRA_EXPORT stat_channel$/;"	c	namespace:libtorrent
stat_increase_network_count	src/ot_stats.c	/^static int stat_increase_network_count( stats_network_node **pnode, int depth, uintptr_t ip ) {$/;"	f	file:
state	libowfat/test/proxy.c	/^struct state {$/;"	s	file:
state	libtorrent/include/libtorrent/alert_types.hpp	/^		torrent_status::state_t const state;$/;"	m	class:libtorrent::final::torrent_status
state	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			void set_dht_state(dht::dht_state const& state) = delete;$/;"	m	struct:libtorrent::aux::final
state	libtorrent/include/libtorrent/piece_picker.hpp	/^			download_queue_t state() const { return download_queue_t(download_state); }$/;"	f	struct:libtorrent::piece_picker::piece_pos
state	libtorrent/include/libtorrent/piece_picker.hpp	/^			unsigned state:2;$/;"	m	struct:libtorrent::piece_picker::block_info
state	libtorrent/include/libtorrent/piece_picker.hpp	/^			void state(download_queue_t q) { download_state = static_cast<std::uint8_t>(q); }$/;"	f	struct:libtorrent::piece_picker::piece_pos
state	libtorrent/include/libtorrent/sha1.hpp	/^		std::uint32_t state[5];$/;"	m	struct:libtorrent::sha1_ctx
state	libtorrent/include/libtorrent/sha512.hpp	/^		std::uint64_t state[8];$/;"	m	struct:libtorrent::sha512_ctx
state	libtorrent/include/libtorrent/torrent.hpp	/^		torrent_status::state_t state() const$/;"	f	class:libtorrent::torrent
state	libtorrent/include/libtorrent/torrent_handle.hpp	/^		unsigned state:2;$/;"	m	struct:libtorrent::block_info
state	libtorrent/include/libtorrent/torrent_status.hpp	/^		state_t state = checking_resume_data;$/;"	m	struct:libtorrent::torrent_status
state	src/bt.cpp	/^char const *state(lt::torrent_status::state_t s)$/;"	f
state	src/proxy.c	/^  int      state;           \/* Whether we want to connect, how far our handshake is, etc. *\/$/;"	m	struct:__anon10	file:
state_finished	libtorrent/include/libtorrent/piece_picker.hpp	/^			enum { state_none, state_requested, state_writing, state_finished };$/;"	e	enum:libtorrent::piece_picker::block_info::__anon57
state_none	libtorrent/include/libtorrent/piece_picker.hpp	/^			enum { state_none, state_requested, state_writing, state_finished };$/;"	e	enum:libtorrent::piece_picker::block_info::__anon57
state_requested	libtorrent/include/libtorrent/piece_picker.hpp	/^			enum { state_none, state_requested, state_writing, state_finished };$/;"	e	enum:libtorrent::piece_picker::block_info::__anon57
state_t	libtorrent/include/libtorrent/i2p_stream.hpp	/^	enum state_t$/;"	g	class:libtorrent::i2p_connection
state_t	libtorrent/include/libtorrent/i2p_stream.hpp	/^	enum state_t$/;"	g	class:libtorrent::i2p_stream
state_t	libtorrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	g	struct:libtorrent::partial_piece_info
state_t	libtorrent/include/libtorrent/torrent_status.hpp	/^		enum state_t$/;"	g	struct:libtorrent::torrent_status
state_writing	libtorrent/include/libtorrent/piece_picker.hpp	/^			enum { state_none, state_requested, state_writing, state_finished };$/;"	e	enum:libtorrent::piece_picker::block_info::__anon57
static_cast	libtorrent/include/libtorrent/span.hpp	/^			: m_ptr(&str[0]), m_len(static_cast<difference_type>(str.size())) {}$/;"	f	struct:libtorrent::span
static_cast	libtorrent/include/libtorrent/span.hpp	/^			: m_ptr(arr.data()), m_len(static_cast<difference_type>(arr.size())) {}$/;"	f	struct:libtorrent::span
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::connect;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::dht | alert_category::tracker;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::error;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::peer | alert_category::error;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::peer;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::performance_warning;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::status | alert_category::error;$/;"	m	namespace:libtorrent
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::status$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::status;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::status;$/;"	v
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::storage$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::storage;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::tracker | alert_category::error;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::tracker;$/;"	m	struct:libtorrent::final
static_category	libtorrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category =$/;"	m	struct:libtorrent::final
statistics	libtorrent/include/libtorrent/torrent.hpp	/^		stat statistics() const { return m_stat; }$/;"	f	class:libtorrent::torrent
stats	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t stats = 11_bit;$/;"	m	namespace:libtorrent::alert_category
stats_cleanup	src/ot_stats.c	/^void stats_cleanup() {$/;"	f
stats_connections_mrtg	src/ot_stats.c	/^static size_t stats_connections_mrtg( char * reply ) {$/;"	f	file:
stats_counter_t	libtorrent/include/libtorrent/performance_counters.hpp	/^		enum stats_counter_t$/;"	g	struct:libtorrent::counters
stats_counters	libtorrent/include/libtorrent/kademlia/node.hpp	/^	counters& stats_counters() const { return m_counters; }$/;"	f	class:libtorrent::dht::node
stats_counters	libtorrent/include/libtorrent/peer_connection.hpp	/^		counters& stats_counters() const { return m_counters; }$/;"	f	class:libtorrent::peer_connection
stats_counters	libtorrent/include/libtorrent/peer_connection.hpp	/^		counters* stats_counters;$/;"	m	struct:libtorrent::peer_connection_args
stats_deinit	src/ot_stats.c	/^void stats_deinit( ) {$/;"	f
stats_deliver	src/ot_stats.c	/^void stats_deliver( int64 sock, int tasktype ) {$/;"	f
stats_enabled	src/client_test.cpp	/^bool stats_enabled = false;$/;"	v
stats_fullscrapes_mrtg	src/ot_stats.c	/^static size_t stats_fullscrapes_mrtg( char * reply ) {$/;"	f	file:
stats_gauge_t	libtorrent/include/libtorrent/performance_counters.hpp	/^		enum stats_gauge_t$/;"	g	struct:libtorrent::counters
stats_get_highscore_networks	src/ot_stats.c	/^static size_t stats_get_highscore_networks( stats_network_node *node, int depth, ot_ip6 node_value, size_t *scores, ot_ip6 *networks, int network_count, int limit ) {$/;"	f	file:
stats_httperrors_txt	src/ot_stats.c	/^static size_t stats_httperrors_txt ( char * reply ) {$/;"	f	file:
stats_init	src/ot_stats.c	/^void stats_init( ) {$/;"	f
stats_issue_event	src/ot_stats.c	/^void stats_issue_event( ot_status_event event, PROTO_FLAG proto, uintptr_t event_data ) {$/;"	f
stats_issue_event	src/proxy.c	/^void stats_issue_event( ot_status_event event, PROTO_FLAG proto, uintptr_t event_data ) {$/;"	f
stats_make	src/ot_stats.c	/^static void stats_make( int *iovec_entries, struct iovec **iovector, ot_tasktype mode ) {$/;"	f	file:
stats_metric	libtorrent/include/libtorrent/session_stats.hpp	/^	struct TORRENT_EXPORT stats_metric$/;"	s	namespace:libtorrent
stats_network_counters_root	src/ot_stats.c	/^static stats_network_node *stats_network_counters_root;$/;"	v	file:
stats_network_node	src/ot_stats.c	/^typedef union stats_network_node stats_network_node;$/;"	t	typeref:union:stats_network_node	file:
stats_network_node	src/ot_stats.c	/^union stats_network_node {$/;"	u	file:
stats_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t stats_notification = 11_bit;$/;"	m	class:libtorrent::alert
stats_peers_mrtg	src/ot_stats.c	/^static size_t stats_peers_mrtg( char * reply ) {$/;"	f	file:
stats_return_busy_networks	src/ot_stats.c	/^static size_t stats_return_busy_networks( char * reply, stats_network_node *tree, int amount, int limit ) {$/;"	f	file:
stats_return_completed_mrtg	src/ot_stats.c	/^static size_t stats_return_completed_mrtg( char * reply ) {$/;"	f	file:
stats_return_everything	src/ot_stats.c	/^static size_t stats_return_everything( char * reply ) {$/;"	f	file:
stats_return_fulllog	src/ot_stats.c	/^static void stats_return_fulllog( int *iovec_entries, struct iovec **iovector, char *r ) {$/;"	f	file:
stats_return_numwants	src/ot_stats.c	/^static size_t stats_return_numwants( char * reply ) {$/;"	f	file:
stats_return_renew_bucket	src/ot_stats.c	/^static size_t stats_return_renew_bucket( char * reply ) {$/;"	f	file:
stats_return_sync_mrtg	src/ot_stats.c	/^static size_t stats_return_sync_mrtg( char * reply ) {$/;"	f	file:
stats_return_tracker_version	src/ot_stats.c	/^size_t stats_return_tracker_version( char *reply ) {$/;"	f
stats_return_woodpeckers	src/ot_stats.c	/^static size_t stats_return_woodpeckers( char * reply, int amount ) {$/;"	f	file:
stats_scrape_mrtg	src/ot_stats.c	/^static size_t stats_scrape_mrtg( char * reply ) {$/;"	f	file:
stats_shift_down_network_count	src/ot_stats.c	/^static int stats_shift_down_network_count( stats_network_node **node, int depth, int shift ) {$/;"	f	file:
stats_slash24s_txt	src/ot_stats.c	/^static size_t stats_slash24s_txt( char *reply, size_t amount ) {$/;"	f	file:
stats_tcpconnections_mrtg	src/ot_stats.c	/^static size_t stats_tcpconnections_mrtg( char * reply ) {$/;"	f	file:
stats_top_txt	src/ot_stats.c	/^size_t stats_top_txt( char * reply, int amount ) {$/;"	f
stats_torrents_mrtg	src/ot_stats.c	/^static size_t stats_torrents_mrtg( char * reply )$/;"	f	file:
stats_udpconnections_mrtg	src/ot_stats.c	/^static size_t stats_udpconnections_mrtg( char * reply ) {$/;"	f	file:
stats_woodpeckers_tree	src/ot_stats.c	/^static stats_network_node *stats_woodpeckers_tree;$/;"	v	file:
stats_worker	src/ot_stats.c	/^static void * stats_worker( void * args ) {$/;"	f	file:
status	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t status = 6_bit;$/;"	m	namespace:libtorrent::alert_category
status_code	libtorrent/include/libtorrent/alert_types.hpp	/^		int const TORRENT_DEPRECATED_MEMBER status_code;$/;"	m	struct:libtorrent::final
status_code	libtorrent/include/libtorrent/http_parser.hpp	/^		int status_code() const { return m_status_code; }$/;"	f	class:libtorrent::http_parser
status_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t status_notification = 6_bit;$/;"	m	class:libtorrent::alert
status_t	libtorrent/include/libtorrent/storage_defs.hpp	/^	enum class status_t : std::uint8_t$/;"	c	namespace:libtorrent
std	libtorrent/include/libtorrent/sha1_hash.hpp	/^namespace std$/;"	n
std	libtorrent/include/libtorrent/torrent_handle.hpp	/^namespace std$/;"	n
std	libtorrent/include/libtorrent/torrent_status.hpp	/^namespace std$/;"	n
std	libtorrent/include/libtorrent/units.hpp	/^namespace std {$/;"	n
stop_torrent	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, stop_torrent$/;"	m	class:libtorrent::job_action_t
stop_tracker_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			stop_tracker_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
stop_when_ready	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t stop_when_ready = 10_bit;$/;"	m	namespace:libtorrent::torrent_flags
stop_when_ready	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER stop_when_ready = false;$/;"	m	struct:libtorrent::torrent_status
stopped	libtorrent/include/libtorrent/tracker_manager.hpp	/^			stopped,$/;"	e	enum:libtorrent::tracker_request::event_t
stopping_torrent	libtorrent/include/libtorrent/error_code.hpp	/^			stopping_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
storage	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<storage_constructor_type> storage;$/;"	m	struct:libtorrent::add_torrent_params
storage	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t storage = 3_bit;$/;"	m	namespace:libtorrent::alert_category
storage	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		handler_storage<Size>& storage;$/;"	m	struct:libtorrent::aux::allocating_handler
storage	libtorrent/include/libtorrent/block_cache.hpp	/^		std::shared_ptr<storage_interface> storage;$/;"	m	struct:libtorrent::cached_piece_entry
storage	libtorrent/include/libtorrent/disk_io_job.hpp	/^		std::shared_ptr<storage_interface> storage;$/;"	m	struct:libtorrent::disk_io_job
storage	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		storage_interface* storage;$/;"	m	struct:libtorrent::cached_piece_info
storage	libtorrent/include/libtorrent/torrent.hpp	/^		storage_index_t storage() const { return m_storage; }$/;"	f	class:libtorrent::torrent
storage_error	libtorrent/include/libtorrent/error_code.hpp	/^		explicit storage_error(error_code e): ec(e), file_idx(-1), operation(operation_t::unknown) {}$/;"	f	struct:libtorrent::storage_error
storage_error	libtorrent/include/libtorrent/error_code.hpp	/^		storage_error(): file_idx(-1), operation(operation_t::unknown) {}$/;"	f	struct:libtorrent::storage_error
storage_error	libtorrent/include/libtorrent/error_code.hpp	/^	struct TORRENT_EXPORT storage_error$/;"	s	namespace:libtorrent
storage_holder	libtorrent/include/libtorrent/disk_interface.hpp	/^		storage_holder(storage_index_t idx, disk_interface& disk_io)$/;"	f	struct:libtorrent::storage_holder
storage_holder	libtorrent/include/libtorrent/disk_interface.hpp	/^	struct storage_holder$/;"	s	namespace:libtorrent
storage_index	libtorrent/include/libtorrent/storage.hpp	/^		storage_index_t storage_index() const { return m_storage_index; }$/;"	f	struct:libtorrent::storage_interface
storage_interface	libtorrent/include/libtorrent/storage.hpp	/^		explicit storage_interface(file_storage const& fs) : m_files(fs) {}$/;"	f	struct:libtorrent::storage_interface
storage_interface	libtorrent/include/libtorrent/storage.hpp	/^	struct TORRENT_EXPORT storage_interface$/;"	s	namespace:libtorrent
storage_interface	libtorrent/include/libtorrent/storage_defs.hpp	/^	struct TORRENT_EXPORT storage_interface;$/;"	m	namespace:libtorrent	typeref:struct:libtorrent::TORRENT_EXPORT
storage_mode	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		storage_mode_t storage_mode = storage_mode_sparse;$/;"	m	struct:libtorrent::add_torrent_params
storage_mode	libtorrent/include/libtorrent/torrent_status.hpp	/^		storage_mode_t storage_mode = storage_mode_sparse;$/;"	m	struct:libtorrent::torrent_status
storage_mode_allocate	libtorrent/include/libtorrent/storage_defs.hpp	/^		storage_mode_allocate,$/;"	e	enum:libtorrent::storage_mode_t
storage_mode_sparse	libtorrent/include/libtorrent/storage_defs.hpp	/^		storage_mode_sparse$/;"	e	enum:libtorrent::storage_mode_t
storage_mode_t	libtorrent/include/libtorrent/storage_defs.hpp	/^	enum storage_mode_t$/;"	g	namespace:libtorrent
storage_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t storage_notification = 3_bit;$/;"	m	class:libtorrent::alert
storage_params	libtorrent/include/libtorrent/storage_defs.hpp	/^		storage_params(file_storage const& f, file_storage const* mf$/;"	f	struct:libtorrent::storage_params
storage_params	libtorrent/include/libtorrent/storage_defs.hpp	/^	struct TORRENT_EXPORT storage_params$/;"	s	namespace:libtorrent
storage_piece_set	libtorrent/include/libtorrent/aux_/storage_piece_set.hpp	/^	struct TORRENT_EXPORT storage_piece_set$/;"	s	namespace:libtorrent::aux
str_chr	libowfat/str/str_chr.c	/^size_t str_chr(const char *in, char needle) {$/;"	f
str_copy	libowfat/str/str_copy.c	/^size_t str_copy(char *out,const char *in) {$/;"	f
str_diff	libowfat/str/str_diff.c	/^int str_diff(const char* a, const char* b) {$/;"	f
str_diffn	libowfat/str/str_diffn.c	/^int str_diffn(const char* a, const char* b, size_t limit) {$/;"	f
str_equal	libowfat/libowfat/str.h	52;"	d
str_equal	libowfat/str.h	52;"	d
str_len	libowfat/libowfat/str.h	36;"	d
str_len	libowfat/str.h	36;"	d
str_len	libowfat/str/str_len.c	/^size_t str_len(const char* in) {$/;"	f
str_rchr	libowfat/str/str_rchr.c	/^size_t str_rchr(const char *in, char needle) {$/;"	f
str_start	libowfat/str/str_start.c	/^int str_start(const char* a, const char* b) {$/;"	f
stralloc	libowfat/libowfat/stralloc.h	/^typedef struct stralloc {$/;"	s
stralloc	libowfat/libowfat/stralloc.h	/^} stralloc;$/;"	t	typeref:struct:stralloc
stralloc	libowfat/stralloc.h	/^typedef struct stralloc {$/;"	s
stralloc	libowfat/stralloc.h	/^} stralloc;$/;"	t	typeref:struct:stralloc
stralloc_0	libowfat/libowfat/stralloc.h	120;"	d
stralloc_0	libowfat/stralloc.h	120;"	d
stralloc_APPEND	libowfat/libowfat/stralloc.h	/^static inline int stralloc_APPEND(stralloc* sa,const char* in) {$/;"	f
stralloc_APPEND	libowfat/stralloc.h	/^static inline int stralloc_APPEND(stralloc* sa,const char* in) {$/;"	f
stralloc_append	libowfat/stralloc/stralloc_append.c	/^int stralloc_append(stralloc *sa,const char *in) {$/;"	f
stralloc_cat	libowfat/stralloc/stralloc_cat.c	/^extern int stralloc_cat(stralloc *sa,const stralloc *sa2) {$/;"	f
stralloc_catb	libowfat/stralloc/stralloc_catb.c	/^int stralloc_catb(stralloc *sa,const char *buf,size_t len) {$/;"	f
stralloc_catint	libowfat/libowfat/stralloc.h	137;"	d
stralloc_catint	libowfat/stralloc.h	137;"	d
stralloc_catint0	libowfat/libowfat/stralloc.h	136;"	d
stralloc_catint0	libowfat/stralloc.h	136;"	d
stralloc_catlong	libowfat/libowfat/stralloc.h	133;"	d
stralloc_catlong	libowfat/stralloc.h	133;"	d
stralloc_catlong0	libowfat/stralloc/stralloc_catlong0.c	/^int stralloc_catlong0(stralloc *sa,signed long int in,size_t n) {$/;"	f
stralloc_catm	libowfat/libowfat/stralloc.h	75;"	d
stralloc_catm	libowfat/stralloc.h	75;"	d
stralloc_catm_internal	libowfat/stralloc/stralloc_catm_internal.c	/^int stralloc_catm_internal(stralloc* sa, ...) {$/;"	f
stralloc_cats	libowfat/stralloc/stralloc_cats.c	/^extern int stralloc_cats(stralloc *sa,const char *buf) {$/;"	f
stralloc_catuint	libowfat/libowfat/stralloc.h	138;"	d
stralloc_catuint	libowfat/stralloc.h	138;"	d
stralloc_catuint0	libowfat/libowfat/stralloc.h	135;"	d
stralloc_catuint0	libowfat/stralloc.h	135;"	d
stralloc_catulong	libowfat/libowfat/stralloc.h	134;"	d
stralloc_catulong	libowfat/stralloc.h	134;"	d
stralloc_catulong0	libowfat/stralloc/stralloc_catulong0.c	/^int stralloc_catulong0(stralloc *sa,unsigned long int in,size_t n) {$/;"	f
stralloc_chomp	libowfat/stralloc/stralloc_chomp.c	/^int stralloc_chomp(stralloc* sa) {$/;"	f
stralloc_chop	libowfat/stralloc/stralloc_chop.c	/^int stralloc_chop(stralloc* sa) {$/;"	f
stralloc_copy	libowfat/stralloc/stralloc_copy.c	/^extern int stralloc_copy(stralloc *sa,const stralloc *sa2) {$/;"	f
stralloc_copyb	libowfat/stralloc/stralloc_copyb.c	/^int stralloc_copyb(stralloc *sa,const char *buf,size_t len) {$/;"	f
stralloc_copym	libowfat/libowfat/stralloc.h	76;"	d
stralloc_copym	libowfat/stralloc.h	76;"	d
stralloc_copys	libowfat/stralloc/stralloc_copys.c	/^extern int stralloc_copys(stralloc *sa,const char *buf) {$/;"	f
stralloc_diff	libowfat/stralloc/stralloc_diff.c	/^extern int stralloc_diff(const stralloc* a,const stralloc* b) {$/;"	f
stralloc_diffs	libowfat/stralloc/stralloc_diffs.c	/^extern int stralloc_diffs(const stralloc* a,const char* b) {$/;"	f
stralloc_equal	libowfat/libowfat/stralloc.h	116;"	d
stralloc_equal	libowfat/stralloc.h	116;"	d
stralloc_equals	libowfat/libowfat/stralloc.h	117;"	d
stralloc_equals	libowfat/stralloc.h	117;"	d
stralloc_free	libowfat/stralloc/stralloc_free.c	/^void stralloc_free(stralloc *sa) {$/;"	f
stralloc_init	libowfat/stralloc/stralloc_init.c	/^void stralloc_init(stralloc* sa) {$/;"	f
stralloc_ready	libowfat/stralloc/stralloc_ready.c	/^int stralloc_ready(stralloc *sa,size_t len) {$/;"	f
stralloc_readyplus	libowfat/stralloc/stralloc_readyplus.c	/^int stralloc_readyplus(stralloc *sa,size_t len) {$/;"	f
stralloc_starts	libowfat/stralloc/stralloc_starts.c	/^extern int stralloc_starts(stralloc *sa,const char *in) {$/;"	f
stralloc_zero	libowfat/stralloc/stralloc_zero.c	/^void stralloc_zero(stralloc* sa) {$/;"	f
strallocwrite	libowfat/buffer/buffer_tosa.c	/^static ssize_t strallocwrite(int fd,char* buf,size_t len,void* myself) {$/;"	f	file:
streamsync_worker	src/proxy.c	/^static void * streamsync_worker( void * args ) {$/;"	f	file:
strictConversion	libtorrent/include/libtorrent/ConvertUTF.h	/^	strictConversion = 0,$/;"	e	enum:__anon48
strict_end_game_mode	libtorrent/include/libtorrent/settings_pack.hpp	/^			strict_end_game_mode,$/;"	e	enum:libtorrent::settings_pack::bool_types
strict_super_seeding	libtorrent/include/libtorrent/settings_pack.hpp	/^			strict_super_seeding TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
string	include/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
string	libtorrent/include/libtorrent/aux_/escape_string.hpp	/^	namespace string$/;"	n	namespace:libtorrent
string	libtorrent/include/libtorrent/bdecode.hpp	/^	{ none, dict, list, string, integer, end };$/;"	m	struct:libtorrent::detail::bdecode_token	typeref:enum:libtorrent::detail::bdecode_token::
string_cstr	libtorrent/include/libtorrent/lazy_entry.hpp	/^		char const* string_cstr() const$/;"	f	struct:libtorrent::lazy_entry
string_length	libtorrent/include/libtorrent/lazy_entry.hpp	/^		int string_length() const$/;"	f	struct:libtorrent::lazy_entry
string_predicate	libowfat/buffer.h	/^typedef int (*string_predicate)(const char* x,size_t len);$/;"	t
string_predicate	libowfat/libowfat/buffer.h	/^typedef int (*string_predicate)(const char* x,size_t len);$/;"	t
string_pstr	libtorrent/include/libtorrent/lazy_entry.hpp	/^		pascal_string string_pstr() const$/;"	f	struct:libtorrent::lazy_entry
string_ptr	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^		explicit string_ptr(string_view str) : m_ptr(new char[str.size() + 1])$/;"	f	struct:libtorrent::aux::string_ptr
string_ptr	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^		string_ptr(string_ptr&& rhs)$/;"	f	struct:libtorrent::aux::string_ptr
string_ptr	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^	struct string_ptr$/;"	s	namespace:libtorrent::aux
string_ptr	libtorrent/include/libtorrent/lazy_entry.hpp	/^		char const* string_ptr() const$/;"	f	struct:libtorrent::lazy_entry
string_t	libtorrent/include/libtorrent/bdecode.hpp	/^		string_t,$/;"	e	enum:bdecode_node::type_t
string_t	libtorrent/include/libtorrent/entry.hpp	/^			string_t,$/;"	e	enum:libtorrent::entry::data_type
string_t	libtorrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
string_type_base	libtorrent/include/libtorrent/settings_pack.hpp	/^			string_type_base = 0x0000,$/;"	e	enum:libtorrent::settings_pack::type_bases
string_types	libtorrent/include/libtorrent/settings_pack.hpp	/^		enum string_types$/;"	g	struct:libtorrent::settings_pack
string_value	libtorrent/include/libtorrent/lazy_entry.hpp	/^		std::string string_value() const$/;"	f	struct:libtorrent::lazy_entry
strong_typedef	libtorrent/include/libtorrent/units.hpp	/^		constexpr explicit strong_typedef(UnderlyingType val) : m_val(val) {}$/;"	f	struct:libtorrent::aux::strong_typedef
strong_typedef	libtorrent/include/libtorrent/units.hpp	/^		constexpr strong_typedef(UnderlyingType val) : m_val(val) {}$/;"	f	struct:libtorrent::aux::strong_typedef
strong_typedef	libtorrent/include/libtorrent/units.hpp	/^	struct strong_typedef$/;"	s	namespace:libtorrent::aux
strview_less	libtorrent/include/libtorrent/entry.hpp	/^		struct strview_less$/;"	s	namespace:libtorrent::aux
sub_of	libowfat/libowfat/rangecheck.h	154;"	d
sub_of	libowfat/libowfat/rangecheck.h	162;"	d
sub_of	libowfat/rangecheck.h	154;"	d
sub_of	libowfat/rangecheck.h	162;"	d
subspan	libtorrent/include/libtorrent/span.hpp	/^		span<T> subspan(index_type const offset) const$/;"	f	struct:libtorrent::span
subspan	libtorrent/include/libtorrent/span.hpp	/^		span<T> subspan(index_type const offset, difference_type const count) const$/;"	f	struct:libtorrent::span
suffix_object	src/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:
suggest_mode	libtorrent/include/libtorrent/settings_pack.hpp	/^			suggest_mode,$/;"	e	enum:libtorrent::settings_pack::int_types
suggest_piece	libtorrent/include/libtorrent/aux_/suggest_piece.hpp	/^struct suggest_piece$/;"	s	namespace:libtorrent::aux
suggest_read_cache	libtorrent/include/libtorrent/settings_pack.hpp	/^		enum suggest_mode_t : std::uint8_t { no_piece_suggestions = 0, suggest_read_cache = 1 };$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
suggested_pieces	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::vector<piece_index_t> const& suggested_pieces() const { return m_suggested_pieces; }$/;"	f	class:libtorrent::peer_connection::std
super_seeded_piece	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool super_seeded_piece(piece_index_t index) const$/;"	f	class:libtorrent::peer_connection
super_seeding	libtorrent/include/libtorrent/torrent.hpp	/^		bool super_seeding() const$/;"	f	class:libtorrent::torrent
super_seeding	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t super_seeding = 8_bit;$/;"	m	namespace:libtorrent::torrent_flags
super_seeding	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER super_seeding = false;$/;"	m	struct:libtorrent::torrent_status
supplementary	include/packet.h	/^    u16_t  supplementary;       \/\/补充协议头长度  没有就是 0x0000$/;"	m	struct:yzy_packet
support_extensions	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		bool support_extensions() const { return m_supports_extensions; }$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
support_merkle_torrents	libtorrent/include/libtorrent/settings_pack.hpp	/^			support_merkle_torrents,$/;"	e	enum:libtorrent::settings_pack::bool_types
support_share_mode	libtorrent/include/libtorrent/settings_pack.hpp	/^			support_share_mode,$/;"	e	enum:libtorrent::settings_pack::bool_types
supports_encryption	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		bool supports_encryption() const$/;"	f	class:libtorrent::bt_peer_connection
supports_extensions	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t supports_extensions = 4_bit;$/;"	m	struct:libtorrent::peer_info
supports_holepunch	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		bool supports_holepunch() const { return m_holepunch_id != 0; }$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
supports_holepunch	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool supports_holepunch:1;$/;"	m	struct:libtorrent::torrent_peer
supports_keepalive	libtorrent/include/libtorrent/torrent.hpp	/^		bool supports_keepalive = true;$/;"	m	struct:libtorrent::web_seed_t
supports_specific_external	libtorrent/include/libtorrent/upnp.hpp	/^		bool supports_specific_external = true;$/;"	m	struct:libtorrent::final::rootdevice
supports_utp	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool supports_utp:1;$/;"	m	struct:libtorrent::torrent_peer
surf	libowfat/dns/dns_random.c	/^static void surf(void)$/;"	f	file:
swap	libtorrent/include/libtorrent/buffer.hpp	/^	void swap(buffer& b)$/;"	f	class:libtorrent::buffer
swap	libtorrent/include/libtorrent/copy_ptr.hpp	/^		void swap(copy_ptr<T>& p) { std::swap(*this, p); }$/;"	f	struct:libtorrent::copy_ptr
swap	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		void swap(heterogeneous_queue& rhs)$/;"	f	struct:libtorrent::heterogeneous_queue
swap	libtorrent/include/libtorrent/lazy_entry.hpp	/^		void swap(lazy_entry& e)$/;"	f	struct:libtorrent::lazy_entry
swap	libtorrent/include/libtorrent/tailqueue.hpp	/^		void swap(tailqueue<T>& rhs)$/;"	f	struct:libtorrent::tailqueue
symlink	libtorrent/include/libtorrent/operations.hpp	/^		symlink,$/;"	m	class:libtorrent::operation_t
symlink_attribute	libtorrent/include/libtorrent/file_storage.hpp	/^		bool symlink_attribute:1;$/;"	m	struct:libtorrent::file_entry
symlink_attribute	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t symlink_attribute:1;$/;"	m	struct:libtorrent::internal_file_entry
symlink_index	libtorrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t symlink_index:15;$/;"	m	struct:libtorrent::internal_file_entry
symlink_path	libtorrent/include/libtorrent/file_storage.hpp	/^		std::string symlink_path;$/;"	m	struct:libtorrent::file_entry
symlinks	libtorrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t symlinks = 3_bit;$/;"	m	struct:libtorrent::create_torrent
syn_resends	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int syn_resends() const { return m_sett.get_int(settings_pack::utp_syn_resends); }$/;"	f	struct:libtorrent::utp_socket_manager
sync_deinit	include/ot_sync.h	20;"	d
sync_deinit	src/ot_sync.c	/^void sync_deinit( ) {$/;"	f
sync_deliver	src/ot_sync.c	/^void sync_deliver( int64 socket ) {$/;"	f
sync_hash_not_found	libtorrent/include/libtorrent/error_code.hpp	/^			sync_hash_not_found,$/;"	e	enum:libtorrent::errors::error_code_enum
sync_init	include/ot_sync.h	19;"	d
sync_init	src/ot_sync.c	/^void sync_init( ) {$/;"	f
sync_make	src/ot_sync.c	/^static void sync_make( int *iovec_entries, struct iovec **iovector ) {$/;"	f	file:
sync_to_tracker	sync_daemon.pl	/^sub sync_to_tracker {$/;"	s
sync_worker	src/ot_sync.c	/^static void * sync_worker( void * args) {$/;"	f	file:
system	libtorrent/include/libtorrent/bdecode.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	libtorrent/include/libtorrent/error_code.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	libtorrent/include/libtorrent/gzip.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	libtorrent/include/libtorrent/i2p_stream.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	libtorrent/include/libtorrent/natpmp.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	libtorrent/include/libtorrent/socks5_stream.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	libtorrent/include/libtorrent/upnp.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
t	libtorrent/include/libtorrent/session_handle.hpp	/^		session_handle(session_handle const& t) = default;$/;"	m	struct:libtorrent::session_handle
t	libtorrent/include/libtorrent/torrent_handle.hpp	/^		torrent_handle(torrent_handle const& t) = default;$/;"	m	struct:libtorrent::torrent_handle
tab	libowfat/entities.h	/^  uint32_t tab[9854];$/;"	m	struct:__anon42
tag_stack	libtorrent/include/libtorrent/upnp.hpp	/^	std::vector<string_view> tag_stack;$/;"	m	struct:libtorrent::parse_state
tag_version	libtorrent/include/libtorrent/fingerprint.hpp	/^		int tag_version;$/;"	m	struct:libtorrent::fingerprint
tai	libowfat/libowfat/tai.h	/^typedef struct tai {$/;"	s
tai	libowfat/tai.h	/^typedef struct tai {$/;"	s
tai64	libowfat/libowfat/tai.h	/^} tai64;$/;"	t	typeref:struct:tai
tai64	libowfat/tai.h	/^} tai64;$/;"	t	typeref:struct:tai
tai6464	libowfat/libowfat/taia.h	/^} tai6464;$/;"	t	typeref:struct:taia
tai6464	libowfat/taia.h	/^} tai6464;$/;"	t	typeref:struct:taia
tai_add	libowfat/tai/tai_add.c	/^void tai_add(struct tai *t,const struct tai *u,const struct tai *v)$/;"	f
tai_approx	libowfat/libowfat/tai.h	44;"	d
tai_approx	libowfat/tai.h	44;"	d
tai_less	libowfat/libowfat/tai.h	53;"	d
tai_less	libowfat/tai.h	53;"	d
tai_now	libowfat/tai/tai_now.c	/^void tai_now(struct tai *t)$/;"	f
tai_pack	libowfat/tai/tai_pack.c	/^void tai_pack(char *s,const struct tai *t)$/;"	f
tai_sub	libowfat/tai/tai_sub.c	/^void tai_sub(struct tai *t,const struct tai *u,const struct tai *v)$/;"	f
tai_uint	libowfat/tai/tai_uint.c	/^void tai_uint(struct tai *t,unsigned int u)$/;"	f
tai_unix	libowfat/libowfat/tai.h	30;"	d
tai_unix	libowfat/tai.h	30;"	d
tai_unpack	libowfat/tai/tai_unpack.c	/^void tai_unpack(const char *s,struct tai *t)$/;"	f
taia	libowfat/libowfat/taia.h	/^typedef struct taia {$/;"	s
taia	libowfat/taia.h	/^typedef struct taia {$/;"	s
taia_add	libowfat/taia/taia_add.c	/^void taia_add(struct taia *t,const struct taia *u,const struct taia *v)$/;"	f
taia_addsec	libowfat/taia/taia_addsec.c	/^void taia_addsec(struct taia *t,const struct taia *u,long secs)$/;"	f
taia_approx	libowfat/taia/taia_approx.c	/^double taia_approx(const struct taia *t)$/;"	f
taia_frac	libowfat/taia/taia_frac.c	/^double taia_frac(const struct taia *t)$/;"	f
taia_half	libowfat/taia/taia_half.c	/^void taia_half(tai6464* t,const tai6464* u) {$/;"	f
taia_less	libowfat/taia/taia_less.c	/^int taia_less(const struct taia *t,const struct taia *u)$/;"	f
taia_now	libowfat/taia/taia_now.c	/^void taia_now(struct taia *t)$/;"	f
taia_pack	libowfat/taia/taia_pack.c	/^void taia_pack(char *s,const struct taia *t)$/;"	f
taia_sub	libowfat/taia/taia_sub.c	/^void taia_sub(struct taia *t,const struct taia *u,const struct taia *v)$/;"	f
taia_tai	libowfat/taia/taia_tai.c	/^void taia_tai(const struct taia *ta,struct tai *t)$/;"	f
taia_uint	libowfat/taia/taia_uint.c	/^void taia_uint(struct taia *t,unsigned int s)$/;"	f
taia_unpack	libowfat/taia/taia_unpack.c	/^void taia_unpack(const char* s,struct taia* t)$/;"	f
tailqueue	libtorrent/include/libtorrent/tailqueue.hpp	/^		tailqueue(): m_first(nullptr), m_last(nullptr), m_size(0) {}$/;"	f	struct:libtorrent::tailqueue
tailqueue	libtorrent/include/libtorrent/tailqueue.hpp	/^	struct tailqueue$/;"	s	namespace:libtorrent
tailqueue_iterator	libtorrent/include/libtorrent/tailqueue.hpp	/^		explicit tailqueue_iterator(T* cur)$/;"	f	struct:libtorrent::tailqueue_iterator
tailqueue_iterator	libtorrent/include/libtorrent/tailqueue.hpp	/^	struct tailqueue_iterator$/;"	s	namespace:libtorrent
tailqueue_node	libtorrent/include/libtorrent/tailqueue.hpp	/^		tailqueue_node() : next(nullptr) {}$/;"	f	struct:libtorrent::tailqueue_node
tailqueue_node	libtorrent/include/libtorrent/tailqueue.hpp	/^	struct tailqueue_node$/;"	s	namespace:libtorrent
target	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	node_id const& target() const { return m_target; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
targetExhausted	libtorrent/include/libtorrent/ConvertUTF.h	/^	targetExhausted,  \/* insuff. room in target for conversion *\/$/;"	e	enum:ConversionResult
target_delay	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^		int target_delay() const { return m_sett.get_int(settings_pack::utp_target_delay) * 1000; }$/;"	f	struct:libtorrent::utp_socket_manager
target_dl_queue_length	libtorrent/include/libtorrent/peer_info.hpp	/^		int target_dl_queue_length;$/;"	m	struct:libtorrent::peer_info
target_exhausted	libtorrent/include/libtorrent/utf8.hpp	/^			target_exhausted,$/;"	e	enum:libtorrent::utf8_errors::error_code_enum
task_events_info_count	libtorrent/include/libtorrent/debug.hpp	/^const mach_msg_type_number_t task_events_info_count = TASK_EVENTS_INFO_COUNT;$/;"	v
taskid	src/ot_mutex.c	/^  ot_taskid       taskid;$/;"	m	struct:ot_task	file:
tasklist	src/ot_mutex.c	/^static struct ot_task *tasklist;$/;"	v	typeref:struct:ot_task	file:
tasklist_being_filled	src/ot_mutex.c	/^static pthread_cond_t tasklist_being_filled;$/;"	v	file:
tasklist_mutex	src/ot_mutex.c	/^static pthread_mutex_t tasklist_mutex;$/;"	v	file:
tasktype	src/ot_mutex.c	/^  ot_tasktype     tasktype;$/;"	m	struct:ot_task	file:
tcp	libtorrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
tcp	libtorrent/include/libtorrent/portmap.hpp	/^		none, tcp, udp$/;"	m	class:libtorrent::portmap_protocol
tcp	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr portmap_protocol tcp = portmap_protocol::tcp;$/;"	m	struct:libtorrent::session_handle
tcp_external_port	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		int tcp_external_port()$/;"	f	struct:libtorrent::aux::listen_socket_t
tcp_keepalive_idle	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		explicit tcp_keepalive_idle(int seconds): m_value(seconds) {}$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
tcp_keepalive_idle	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^	struct tcp_keepalive_idle$/;"	s	namespace:libtorrent::aux
tcp_keepalive_interval	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^		explicit tcp_keepalive_interval(int seconds): m_value(seconds) {}$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
tcp_keepalive_interval	libtorrent/include/libtorrent/aux_/keepalive.hpp	/^	struct tcp_keepalive_interval$/;"	s	namespace:libtorrent::aux
tcp_loop	src/main.c	/^static void tcp_loop(int listenfd)$/;"	f	file:
tcp_loop	src/server.c	/^static void tcp_loop(int listenfd)$/;"	f	file:
tcp_loop	src/test.c	/^void tcp_loop()$/;"	f
tcp_notsent_lowat	libtorrent/include/libtorrent/socket.hpp	/^		explicit tcp_notsent_lowat(int val) : m_value(val) {}$/;"	f	struct:libtorrent::tcp_notsent_lowat
tcp_notsent_lowat	libtorrent/include/libtorrent/socket.hpp	/^	struct tcp_notsent_lowat$/;"	s	namespace:libtorrent
tcp_port_mapping	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		aux::array<listen_port_mapping, 2, portmap_transport> tcp_port_mapping;$/;"	m	struct:libtorrent::aux::listen_socket_t
tcp_ssl	libtorrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
tcpstate	libowfat/dns.h	/^  int tcpstate;$/;"	m	struct:dns_transmit
tcpstate	libowfat/libowfat/dns.h	/^  int tcpstate;$/;"	m	struct:dns_transmit
terminal_size	src/print.cpp	/^std::pair<int, int> terminal_size()$/;"	f
test_decode	sync_daemon.pl	/^sub test_decode {$/;"	s
text	libowfat/test/byte_copy.c	/^char text[128];$/;"	v
th	libtorrent/include/libtorrent/aux_/route.h	/^	void	*th;				\/* thread ptr *\/$/;"	m	struct:ctrace
thistcp	libowfat/dns/dns_transmit.c	/^static int thistcp(struct dns_transmit *d)$/;"	f	file:
thisudp	libowfat/dns/dns_transmit.c	/^static int thisudp(struct dns_transmit *d)$/;"	f	file:
thread	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				std::thread thread;$/;"	m	struct:libtorrent::aux::final::work_thread_t
thread_bt	src/main.c	/^void *thread_bt(void *param)$/;"	f
thread_id	src/ot_accesslist.c	/^static pthread_t thread_id;$/;"	v	file:
thread_id	src/ot_clean.c	/^static pthread_t thread_id;$/;"	v	file:
thread_id	src/ot_fullscrape.c	/^static pthread_t thread_id;$/;"	v	file:
thread_id	src/ot_livesync.c	/^static pthread_t thread_id;$/;"	v	file:
thread_id	src/ot_stats.c	/^static pthread_t thread_id;$/;"	v	file:
thread_id	src/ot_sync.c	/^static pthread_t thread_id;$/;"	v	file:
thread_idle	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		void thread_idle() { ++m_num_idle_threads; }$/;"	f	struct:libtorrent::disk_io_thread_pool
thread_server	src/main.c	/^void *thread_server(void *param)$/;"	f
thread_started	libtorrent/include/libtorrent/debug.hpp	/^		void thread_started()$/;"	f	struct:libtorrent::single_threaded
thread_tcp	src/server.c	/^void *thread_tcp(void *param)$/;"	f
thread_track	src/main.c	/^void *thread_track(void *param)$/;"	f
throttle	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^	int throttle() const$/;"	f	struct:libtorrent::bandwidth_channel
throw_ex	libtorrent/include/libtorrent/aux_/throw.hpp	/^	[[noreturn]] void throw_ex(Args&&...) {$/;"	f	namespace:libtorrent::aux
ti	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::shared_ptr<torrent_info> ti;$/;"	m	struct:libtorrent::add_torrent_params
ti	libtorrent/include/libtorrent/resolve_links.hpp	/^			std::shared_ptr<const torrent_info> ti;$/;"	m	struct:libtorrent::resolve_links::link_t
tick	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void tick() {}$/;"	f	struct:libtorrent::peer_plugin
tick	libtorrent/include/libtorrent/extensions.hpp	/^		virtual void tick() {}$/;"	f	struct:libtorrent::torrent_plugin
tick	libtorrent/include/libtorrent/storage.hpp	/^		virtual bool tick() { return false; }$/;"	f	struct:libtorrent::storage_interface
tick_feature	libtorrent/include/libtorrent/extensions.hpp	/^		static constexpr feature_flags_t tick_feature = 2_bit;$/;"	m	struct:libtorrent::plugin
tick_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			tick_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
tier	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t tier = 0;$/;"	m	struct:libtorrent::announce_entry
time	include/ot_accesslist.h	/^  ot_time  time;$/;"	m	struct:ot_log
time_critical	libtorrent/include/libtorrent/peer_connection.hpp	/^		static constexpr request_flags_t time_critical = 0_bit;$/;"	m	class:libtorrent::peer_connection
time_critical_mode	libtorrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t time_critical_mode = 5_bit;$/;"	m	class:libtorrent::piece_picker
time_critical_piece	libtorrent/include/libtorrent/torrent.hpp	/^	struct time_critical_piece$/;"	s	namespace:libtorrent
time_of_last_unchoke	libtorrent/include/libtorrent/peer_connection.hpp	/^		time_point time_of_last_unchoke() const$/;"	f	class:libtorrent::peer_connection
time_since_complete	libtorrent/include/libtorrent/torrent.hpp	/^		int time_since_complete() const { return int(::time(nullptr) - m_last_seen_complete); }$/;"	f	class:libtorrent::torrent
time_since_download	libtorrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER time_since_download = 0;$/;"	m	struct:libtorrent::torrent_status
time_since_upload	libtorrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER time_since_upload = 0;$/;"	m	struct:libtorrent::torrent_status
timed_out	libtorrent/include/libtorrent/error_code.hpp	/^			timed_out,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	void timed_out() { if (pinged() && timeout_count < 0xfe) ++timeout_count; }$/;"	f	struct:libtorrent::dht::node_entry
timed_out	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::uint32_t timed_out:1;$/;"	m	struct:libtorrent::pending_block
timed_out	libtorrent/include/libtorrent/torrent.hpp	/^		int timed_out;$/;"	m	struct:libtorrent::time_critical_piece
timed_out_activity	libtorrent/include/libtorrent/close_reason.hpp	/^		timed_out_activity,$/;"	m	class:libtorrent::close_reason_t
timed_out_handshake	libtorrent/include/libtorrent/close_reason.hpp	/^		timed_out_handshake,$/;"	m	class:libtorrent::close_reason_t
timed_out_inactivity	libtorrent/include/libtorrent/error_code.hpp	/^			timed_out_inactivity,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out_interest	libtorrent/include/libtorrent/close_reason.hpp	/^		timed_out_interest,$/;"	m	class:libtorrent::close_reason_t
timed_out_no_handshake	libtorrent/include/libtorrent/error_code.hpp	/^			timed_out_no_handshake,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out_no_interest	libtorrent/include/libtorrent/error_code.hpp	/^			timed_out_no_interest,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out_no_request	libtorrent/include/libtorrent/error_code.hpp	/^			timed_out_no_request,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out_request	libtorrent/include/libtorrent/close_reason.hpp	/^		timed_out_request,$/;"	m	class:libtorrent::close_reason_t
timed_out_requests	libtorrent/include/libtorrent/peer_info.hpp	/^		int timed_out_requests;$/;"	m	struct:libtorrent::peer_info
timeout	libowfat/io_internal.h	/^  tai6464 timeout;$/;"	m	struct:__anon40
timeout	libtorrent/include/libtorrent/close_reason.hpp	/^		timeout,$/;"	m	class:libtorrent::close_reason_t
timeout	libtorrent/include/libtorrent/i2p_stream.hpp	/^			timeout,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
timeout	libtorrent/include/libtorrent/session_status.hpp	/^		std::uint64_t timeout;$/;"	m	struct:libtorrent::utp_status
timeout_count	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	std::uint8_t timeout_count = 0xff;$/;"	m	struct:libtorrent::dht::node_entry
timeout_handler	libtorrent/include/libtorrent/tracker_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT timeout_handler$/;"	s	namespace:libtorrent
timeout_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			timeout_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
timeouts	libowfat/dns/dns_transmit.c	/^static const int timeouts[4] = { 1, 3, 11, 45 };$/;"	v	file:
times_in_row	libtorrent/include/libtorrent/alert_types.hpp	/^		int const times_in_row;$/;"	m	struct:libtorrent::final
timestamp	libtorrent/include/libtorrent/debug.hpp	/^		time_point timestamp;$/;"	m	struct:libtorrent::wakeup_t
timestamp	src/client_test.cpp	/^char const* timestamp()$/;"	f
timestamp_difference_microseconds	libtorrent/include/libtorrent/utp_stream.hpp	/^	be_uint32 timestamp_difference_microseconds;$/;"	m	struct:libtorrent::utp_header
timestamp_history	libtorrent/include/libtorrent/timestamp_history.hpp	/^struct TORRENT_EXTRA_EXPORT timestamp_history$/;"	s	namespace:libtorrent
timestamp_microseconds	libtorrent/include/libtorrent/utp_stream.hpp	/^	be_uint32 timestamp_microseconds;$/;"	m	struct:libtorrent::utp_header
tmp	libowfat/ent.c	/^char tmp[20];$/;"	v
tmp	libowfat/tryuint128.c	/^__uint128_t tmp;$/;"	v
tmp	libtorrent/include/libtorrent/bandwidth_limit.hpp	/^	int tmp;$/;"	m	struct:libtorrent::bandwidth_channel
tmp2	libowfat/ent.c	/^char tmp2[20];$/;"	v
to_hex	libtorrent/include/libtorrent/hex.hpp	/^	inline std::string to_hex(std::string const& s)$/;"	f	namespace:libtorrent
to_hex	libtorrent/include/libtorrent/hex.hpp	/^	inline void to_hex(char const* in, int len, char* out)$/;"	f	namespace:libtorrent
to_hex	src/client_test.cpp	/^std::string to_hex(lt::sha1_hash const& s)$/;"	f
to_hex	src/ot_fullscrape.c	/^static char*to_hex(char*d,uint8_t*s){char*m="0123456789ABCDEF";char *t=d;char*e=d+40;while(d<e){*d++=m[*s>>4];*d++=m[*s++&15];}*d=0;return t;}$/;"	f	file:
to_hex	src/ot_stats.c	/^static char*to_hex(char*d,uint8_t*s){char*m="0123456789ABCDEF";char *t=d;char*e=d+40;while(d<e){*d++=m[*s>>4];*d++=m[*s++&15];}*d=0;return t;}$/;"	f	file:
to_string	libtorrent/include/libtorrent/aux_/portmap.hpp	/^	inline char const* to_string(portmap_action const act)$/;"	f	namespace:libtorrent::aux
to_string	libtorrent/include/libtorrent/aux_/portmap.hpp	/^	inline char const* to_string(portmap_protocol const p)$/;"	f	namespace:libtorrent::aux
to_string	libtorrent/include/libtorrent/bloom_filter.hpp	/^		std::string to_string() const$/;"	f	struct:libtorrent::bloom_filter
to_string	libtorrent/include/libtorrent/sha1_hash.hpp	/^		std::string to_string() const$/;"	f	class:libtorrent::digest32
to_string	libtorrent/include/libtorrent/units.hpp	/^	std::string to_string(strong_typedef<T, Tag> const t)$/;"	f	namespace:libtorrent::aux
to_string	src/print.cpp	/^std::string to_string(int v, int width)$/;"	f
todo	libowfat/test/proxy.c	/^  int done,todo;$/;"	m	struct:state	file:
tohex	libowfat/dns/dns_nd6.c	/^static char tohex(char c) {$/;"	f	file:
tohex	libowfat/fmt/fmt_xlong.c	/^static inline char tohex(char c) {$/;"	f	file:
tohex	libowfat/fmt/fmt_xlonglong.c	/^static inline char tohex(char c) {$/;"	f	file:
token	include/client.h	/^    unsigned char *token;$/;"	m	struct:client
tokenLength	include/packet.h	/^    u16_t  tokenLength;         \/\/token长度     没有就是 0x0000$/;"	m	struct:yzy_packet
token_size	include/client.h	/^    int token_size;$/;"	m	struct:client
too_few_file_descriptors	libtorrent/include/libtorrent/alert_types.hpp	/^			too_few_file_descriptors,$/;"	e	enum:libtorrent::final::performance_warning_t
too_few_outgoing_ports	libtorrent/include/libtorrent/alert_types.hpp	/^			too_few_outgoing_ports,$/;"	e	enum:libtorrent::final::performance_warning_t
too_frequent_pex	libtorrent/include/libtorrent/error_code.hpp	/^			too_frequent_pex,$/;"	e	enum:libtorrent::errors::error_code_enum
too_high_disk_queue_limit	libtorrent/include/libtorrent/alert_types.hpp	/^			too_high_disk_queue_limit,$/;"	e	enum:libtorrent::final::performance_warning_t
too_many_connections	libtorrent/include/libtorrent/close_reason.hpp	/^		too_many_connections,$/;"	m	class:libtorrent::close_reason_t
too_many_connections	libtorrent/include/libtorrent/error_code.hpp	/^			too_many_connections,$/;"	e	enum:libtorrent::errors::error_code_enum
too_many_corrupt_pieces	libtorrent/include/libtorrent/error_code.hpp	/^			too_many_corrupt_pieces,$/;"	e	enum:libtorrent::errors::error_code_enum
too_many_files	libtorrent/include/libtorrent/close_reason.hpp	/^		too_many_files,$/;"	m	class:libtorrent::close_reason_t
too_many_length_or_distance_codes	libtorrent/include/libtorrent/gzip.hpp	/^			too_many_length_or_distance_codes,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
too_many_optimistic_unchoke_slots	libtorrent/include/libtorrent/alert_types.hpp	/^			too_many_optimistic_unchoke_slots,$/;"	e	enum:libtorrent::final::performance_warning_t
too_many_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			too_many_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
too_many_pieces_in_torrent	libtorrent/include/libtorrent/error_code.hpp	/^			too_many_pieces_in_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
too_many_requests_when_choked	libtorrent/include/libtorrent/error_code.hpp	/^			too_many_requests_when_choked,$/;"	e	enum:libtorrent::errors::error_code_enum
too_many_slots	libtorrent/include/libtorrent/error_code.hpp	/^			too_many_slots,$/;"	e	enum:libtorrent::errors::error_code_enum
top_tags	libtorrent/include/libtorrent/upnp.hpp	/^	bool top_tags(string_view str1, string_view str2)$/;"	f	struct:libtorrent::parse_state
tor	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::weak_ptr<torrent> tor;$/;"	m	struct:libtorrent::peer_connection_args
torrent	libtorrent/include/libtorrent/torrent.hpp	/^	class TORRENT_EXTRA_EXPORT torrent$/;"	c	namespace:libtorrent
torrent	src/ot_stats.c	/^typedef struct { size_t val; ot_torrent * torrent; } ot_record;$/;"	m	struct:__anon6	file:
torrent_aborted	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_aborted,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_alert	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_alert : alert$/;"	s	namespace:libtorrent
torrent_connect_boost	libtorrent/include/libtorrent/settings_pack.hpp	/^			torrent_connect_boost,$/;"	e	enum:libtorrent::settings_pack::int_types
torrent_count	src/ot_stats.c	/^  unsigned long long torrent_count;$/;"	m	struct:__anon5	file:
torrent_download_limit	src/client_test.cpp	/^int torrent_download_limit = 0;$/;"	v
torrent_evicted_counter	libtorrent/include/libtorrent/performance_counters.hpp	/^			torrent_evicted_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
torrent_file	libtorrent/include/libtorrent/torrent.hpp	/^		torrent_info const& torrent_file() const$/;"	f	class:libtorrent::torrent
torrent_file	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::weak_ptr<const torrent_info> torrent_file;$/;"	m	struct:libtorrent::torrent_status
torrent_file_parse_failed	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_file_parse_failed,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_finished	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_finished,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_flags	libtorrent/include/libtorrent/torrent_flags.hpp	/^namespace torrent_flags {$/;"	n	namespace:libtorrent
torrent_handle	libtorrent/include/libtorrent/torrent_handle.hpp	/^		explicit torrent_handle(std::weak_ptr<torrent> const& t)$/;"	f	struct:libtorrent::torrent_handle
torrent_handle	libtorrent/include/libtorrent/torrent_handle.hpp	/^	struct TORRENT_EXPORT torrent_handle$/;"	s	namespace:libtorrent
torrent_hot_members	libtorrent/include/libtorrent/torrent.hpp	/^	struct TORRENT_EXTRA_EXPORT torrent_hot_members$/;"	s	namespace:libtorrent
torrent_id	src/main.c	/^int torrent_id = 0;$/;"	v
torrent_info	libtorrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(bdecode_node const& torrent_file, error_code& ec, int)$/;"	f	class:libtorrent::torrent_info
torrent_info	libtorrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(char const* buffer, int size)$/;"	f	class:libtorrent::torrent_info
torrent_info	libtorrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(char const* buffer, int size, error_code& ec)$/;"	f	class:libtorrent::torrent_info
torrent_info	libtorrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(char const* buffer, int size, error_code& ec, int)$/;"	f	class:libtorrent::torrent_info
torrent_info	libtorrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(char const* buffer, int size, int)$/;"	f	class:libtorrent::torrent_info
torrent_info	libtorrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(std::string const& filename, error_code& ec, int)$/;"	f	class:libtorrent::torrent_info
torrent_info	libtorrent/include/libtorrent/torrent_info.hpp	/^	class TORRENT_EXPORT torrent_info$/;"	c	namespace:libtorrent
torrent_info_no_dict	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_info_no_dict,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_invalid_hashes	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_invalid_hashes,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_invalid_length	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_invalid_length,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_invalid_name	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_invalid_name,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_is_no_dict	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_is_no_dict,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_log	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t torrent_log = 14_bit;$/;"	m	namespace:libtorrent::alert_category
torrent_log_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t torrent_log_notification = 14_bit;$/;"	m	class:libtorrent::alert
torrent_missing_info	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_missing_info,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_missing_name	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_missing_name,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_missing_piece_length	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_missing_piece_length,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_missing_pieces	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_missing_pieces,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_not_ready	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_not_ready,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_paused	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_paused,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_peer	libtorrent/include/libtorrent/torrent_peer.hpp	/^	struct TORRENT_EXTRA_EXPORT torrent_peer$/;"	s	namespace:libtorrent
torrent_peer_allocator_interface	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^	struct TORRENT_EXTRA_EXPORT torrent_peer_allocator_interface$/;"	s	namespace:libtorrent
torrent_plugin	libtorrent/include/libtorrent/extensions.hpp	/^	struct TORRENT_EXPORT torrent_plugin$/;"	s	namespace:libtorrent
torrent_removed	libtorrent/include/libtorrent/close_reason.hpp	/^		torrent_removed,$/;"	m	class:libtorrent::close_reason_t
torrent_removed	libtorrent/include/libtorrent/error_code.hpp	/^			torrent_removed,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_state	libtorrent/include/libtorrent/peer_list.hpp	/^	struct torrent_state$/;"	s	namespace:libtorrent
torrent_state	src/torrent_view.cpp	/^std::string torrent_state(lt::torrent_status const& s)$/;"	f
torrent_stats	src/ot_stats.c	/^} torrent_stats;$/;"	t	typeref:struct:__anon5	file:
torrent_statter	src/ot_stats.c	/^static int torrent_statter( ot_torrent *torrent, uintptr_t data ) {$/;"	f	file:
torrent_status	libtorrent/include/libtorrent/torrent_status.hpp	/^	struct TORRENT_EXPORT torrent_status$/;"	s	namespace:libtorrent
torrent_upload_limit	src/client_test.cpp	/^int torrent_upload_limit = 0;$/;"	v
torrent_view	include/torrent_view.hpp	/^struct torrent_view$/;"	s
torrent_view	src/torrent_view.cpp	/^torrent_view::torrent_view()$/;"	f	class:torrent_view
torrents	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^		std::int32_t torrents = 0;$/;"	m	struct:libtorrent::dht::dht_storage_counters
torrents_all	include/torrent_view.hpp	/^		torrents_all,$/;"	e	enum:torrent_view::__anon25
torrents_checking	include/torrent_view.hpp	/^		torrents_checking,$/;"	e	enum:torrent_view::__anon25
torrents_downloading	include/torrent_view.hpp	/^		torrents_downloading,$/;"	e	enum:torrent_view::__anon25
torrents_max	include/torrent_view.hpp	/^		torrents_max$/;"	e	enum:torrent_view::__anon25
torrents_not_paused	include/torrent_view.hpp	/^		torrents_not_paused,$/;"	e	enum:torrent_view::__anon25
torrents_queued	include/torrent_view.hpp	/^		torrents_queued,$/;"	e	enum:torrent_view::__anon25
torrents_seeding	include/torrent_view.hpp	/^		torrents_seeding,$/;"	e	enum:torrent_view::__anon25
torrents_stopped	include/torrent_view.hpp	/^		torrents_stopped,$/;"	e	enum:torrent_view::__anon25
total	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t total() const { return m_total_counter; }$/;"	f	class:libtorrent::stat_channel
total	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total = 0;$/;"	m	struct:libtorrent::torrent_status
total_allocations	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		std::uint64_t total_allocations() const { return m_total_allocations; }$/;"	f	struct:libtorrent::final
total_bytes	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		std::uint64_t total_bytes() const { return m_total_bytes; }$/;"	f	struct:libtorrent::final
total_dht_download	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_dht_download;$/;"	m	struct:libtorrent::session_status
total_dht_upload	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_dht_upload;$/;"	m	struct:libtorrent::session_status
total_done	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_done = 0;$/;"	m	struct:libtorrent::torrent_status
total_download	libtorrent/include/libtorrent/peer_info.hpp	/^		std::int64_t total_download;$/;"	m	struct:libtorrent::peer_info
total_download	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_download;$/;"	m	struct:libtorrent::session_status
total_download	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t total_download() const$/;"	f	class:libtorrent::stat
total_download	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_download = 0;$/;"	m	struct:libtorrent::torrent_status
total_downloaded	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::int64_t total_downloaded = 0;$/;"	m	struct:libtorrent::add_torrent_params
total_failed_bytes	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_failed_bytes;$/;"	m	struct:libtorrent::session_status
total_failed_bytes	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_failed_bytes = 0;$/;"	m	struct:libtorrent::torrent_status
total_ip_overhead_download	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_ip_overhead_download;$/;"	m	struct:libtorrent::session_status
total_ip_overhead_upload	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_ip_overhead_upload;$/;"	m	struct:libtorrent::session_status
total_microseconds	libtorrent/include/libtorrent/time.hpp	/^	std::int64_t total_microseconds(T td)$/;"	f	namespace:libtorrent
total_milliseconds	libtorrent/include/libtorrent/time.hpp	/^	std::int64_t total_milliseconds(T td)$/;"	f	namespace:libtorrent
total_payload_download	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_payload_download;$/;"	m	struct:libtorrent::session_status
total_payload_download	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t total_payload_download() const$/;"	f	class:libtorrent::stat
total_payload_download	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_payload_download = 0;$/;"	m	struct:libtorrent::torrent_status
total_payload_upload	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_payload_upload;$/;"	m	struct:libtorrent::session_status
total_payload_upload	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t total_payload_upload() const$/;"	f	class:libtorrent::stat
total_payload_upload	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_payload_upload = 0;$/;"	m	struct:libtorrent::torrent_status
total_protocol_download	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t total_protocol_download() const$/;"	f	class:libtorrent::stat
total_protocol_upload	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t total_protocol_upload() const$/;"	f	class:libtorrent::stat
total_read_back	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int total_read_back;$/;"	m	struct:libtorrent::cache_status
total_redundant_bytes	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_redundant_bytes;$/;"	m	struct:libtorrent::session_status
total_redundant_bytes	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_redundant_bytes = 0;$/;"	m	struct:libtorrent::torrent_status
total_seconds	libtorrent/include/libtorrent/time.hpp	/^	std::int64_t total_seconds(T td)$/;"	f	namespace:libtorrent
total_size	libtorrent/include/libtorrent/file_storage.hpp	/^		std::int64_t total_size() const { return m_total_size; }$/;"	f	class:libtorrent::file_storage
total_size	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::int64_t total_size() const { return m_files.total_size(); }$/;"	f	class:libtorrent::torrent_info
total_tracker_download	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_tracker_download;$/;"	m	struct:libtorrent::session_status
total_tracker_upload	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_tracker_upload;$/;"	m	struct:libtorrent::session_status
total_transfer	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t total_transfer(int channel) const$/;"	f	class:libtorrent::stat
total_upload	libtorrent/include/libtorrent/peer_info.hpp	/^		std::int64_t total_upload;$/;"	m	struct:libtorrent::peer_info
total_upload	libtorrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_upload;$/;"	m	struct:libtorrent::session_status
total_upload	libtorrent/include/libtorrent/stat.hpp	/^		std::int64_t total_upload() const$/;"	f	class:libtorrent::stat
total_upload	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_upload = 0;$/;"	m	struct:libtorrent::torrent_status
total_uploaded	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::int64_t total_uploaded = 0;$/;"	m	struct:libtorrent::add_torrent_params
total_used_buffers	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		mutable int total_used_buffers;$/;"	m	struct:libtorrent::cache_status
total_wanted	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_wanted = 0;$/;"	m	struct:libtorrent::torrent_status
total_wanted_done	libtorrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_wanted_done = 0;$/;"	m	struct:libtorrent::torrent_status
track_flag	src/main.c	/^int track_flag = 0;$/;"	v
track_ip	src/main.c	/^char *track_ip = NULL;$/;"	v
track_port	src/main.c	/^int track_port;$/;"	v
tracker	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t tracker = 4_bit;$/;"	m	namespace:libtorrent::alert_category
tracker	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^			tracker,$/;"	e	enum:libtorrent::dht::dht_logger::module_t
tracker	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t tracker = 0_bit;$/;"	m	struct:libtorrent::peer_info
tracker	src/main.c	/^char tracker[128] = {0};$/;"	v
tracker_alert	libtorrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_alert : torrent_alert$/;"	s	namespace:libtorrent
tracker_backoff	libtorrent/include/libtorrent/settings_pack.hpp	/^			tracker_backoff,$/;"	e	enum:libtorrent::settings_pack::int_types
tracker_completion_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			tracker_completion_timeout = int_type_base,$/;"	e	enum:libtorrent::settings_pack::int_types
tracker_connection	libtorrent/include/libtorrent/tracker_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT tracker_connection$/;"	s	namespace:libtorrent
tracker_connection	libtorrent/include/libtorrent/udp_socket.hpp	/^		static constexpr udp_send_flags_t tracker_connection = 1_bit;$/;"	m	class:libtorrent::udp_socket
tracker_download_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int tracker_download_rate;$/;"	m	struct:libtorrent::session_status
tracker_failure	libtorrent/include/libtorrent/error_code.hpp	/^			tracker_failure,$/;"	e	enum:libtorrent::errors::error_code_enum
tracker_id	src/proxy.c	/^  uint32_t tracker_id;      \/* How the other end greeted *\/$/;"	m	struct:__anon10	file:
tracker_logger	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		struct tracker_logger : request_callback$/;"	s	namespace:libtorrent::aux
tracker_maximum_response_length	libtorrent/include/libtorrent/settings_pack.hpp	/^			tracker_maximum_response_length,$/;"	e	enum:libtorrent::settings_pack::int_types
tracker_node	libtorrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		struct tracker_node$/;"	s	struct:libtorrent::dht::final
tracker_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t tracker_notification = 4_bit;$/;"	m	class:libtorrent::alert
tracker_receive_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			tracker_receive_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
tracker_req	libtorrent/include/libtorrent/tracker_manager.hpp	/^		tracker_request const& tracker_req() const { return m_req; }$/;"	f	struct:libtorrent::tracker_connection
tracker_request	libtorrent/include/libtorrent/tracker_manager.hpp	/^		tracker_request()$/;"	f	struct:libtorrent::tracker_request
tracker_request	libtorrent/include/libtorrent/tracker_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT tracker_request$/;"	s	namespace:libtorrent
tracker_response	libtorrent/include/libtorrent/tracker_manager.hpp	/^		tracker_response()$/;"	f	struct:libtorrent::tracker_response
tracker_response	libtorrent/include/libtorrent/tracker_manager.hpp	/^	struct tracker_response$/;"	s	namespace:libtorrent
tracker_scrape_response	libtorrent/include/libtorrent/tracker_manager.hpp	/^		virtual void tracker_scrape_response(tracker_request const& \/*req*\/$/;"	f	struct:libtorrent::request_callback
tracker_source	libtorrent/include/libtorrent/announce_entry.hpp	/^		enum tracker_source$/;"	g	struct:libtorrent::announce_entry
tracker_tiers	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<int>> tracker_tiers;$/;"	m	struct:libtorrent::add_torrent_params
tracker_upload_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int tracker_upload_rate;$/;"	m	struct:libtorrent::session_status
trackerid	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::string trackerid;$/;"	m	struct:libtorrent::add_torrent_params
trackerid	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::string trackerid;$/;"	m	struct:libtorrent::announce_entry
trackerid	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::string trackerid;$/;"	m	struct:libtorrent::tracker_request
trackerid	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::string trackerid;$/;"	m	struct:libtorrent::tracker_response
trackerlogic_deinit	src/trackerlogic.c	/^void trackerlogic_deinit( void ) {$/;"	f
trackerlogic_init	src/trackerlogic.c	/^void trackerlogic_init( ) {$/;"	f
trackers	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<std::string>> trackers;$/;"	m	struct:libtorrent::add_torrent_params
trackers	libtorrent/include/libtorrent/torrent.hpp	/^		std::vector<announce_entry> const& trackers() const$/;"	f	class:libtorrent::torrent::std
trackers	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<announce_entry> const& trackers() const { return m_urls; }$/;"	f	class:libtorrent::torrent_info::std
traffic_class	libtorrent/include/libtorrent/socket.hpp	/^		explicit traffic_class(char val): m_value(val) {}$/;"	f	struct:libtorrent::traffic_class
traffic_class	libtorrent/include/libtorrent/socket.hpp	/^	struct traffic_class$/;"	s	namespace:libtorrent
trancieve_ip_packet	libtorrent/include/libtorrent/stat.hpp	/^		void trancieve_ip_packet(int bytes_transferred, bool ipv6)$/;"	f	class:libtorrent::stat
transaction_id	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::uint32_t transaction_id() const { return m_transaction_id; }$/;"	f	class:libtorrent::udp_tracker_connection
transfer_rate	libtorrent/include/libtorrent/stat.hpp	/^		int transfer_rate(int channel) const$/;"	f	class:libtorrent::stat
transport	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^	enum class transport : std::uint8_t { plaintext, ssl };$/;"	c	namespace:libtorrent::aux
transport_timeout_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			transport_timeout_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
traversal	libtorrent/include/libtorrent/kademlia/dht_observer.hpp	/^			traversal$/;"	e	enum:libtorrent::dht::dht_logger::module_t
traversal_algorithm	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^struct TORRENT_EXTRA_EXPORT traversal_algorithm$/;"	s	namespace:libtorrent::dht
traversal_observer	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	traversal_observer($/;"	f	struct:libtorrent::dht::traversal_observer
traversal_observer	libtorrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^struct traversal_observer : observer$/;"	s	namespace:libtorrent::dht
traverse	libowfat/critbit/critbit.c	/^static void traverse(void* top) {$/;"	f	file:
triggered_manually	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER triggered_manually:1;$/;"	m	struct:libtorrent::announce_entry
triggered_manually	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool triggered_manually : 1;$/;"	m	struct:libtorrent::announce_endpoint
triggered_manually	libtorrent/include/libtorrent/tracker_manager.hpp	/^		bool triggered_manually;$/;"	m	struct:libtorrent::tracker_request
trim	src/tools.c	/^char *trim(char *output, const char *input)$/;"	f
trim_cache	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, trim_cache$/;"	m	class:libtorrent::job_action_t
trust_points	libtorrent/include/libtorrent/torrent_peer.hpp	/^		signed trust_points:4; \/\/ [-7, 8]$/;"	m	struct:libtorrent::torrent_peer
try_flush_write_blocks	libtorrent/include/libtorrent/block_cache.hpp	/^			try_flush_write_blocks,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
try_flush_write_blocks2	libtorrent/include/libtorrent/block_cache.hpp	/^			try_flush_write_blocks2,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
try_push_back	libtorrent/include/libtorrent/packet_pool.hpp	/^		void try_push_back(packet_ptr &p)$/;"	f	struct:libtorrent::packet_slab
ttl	libtorrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	int ttl;$/;"	m	struct:libtorrent::bw_request
type	include/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
type	libowfat/iob_internal.h	/^  enum { FROMBUF, FROMFILE } type;$/;"	m	struct:iob_entry	typeref:enum:iob_entry::__anon44
type	libowfat/test/httpd.c	/^static struct mimeentry { const char* name, *type; } mimetab[] = {$/;"	m	struct:mimeentry	file:
type	libtorrent/include/libtorrent/aux_/aligned_storage.hpp	/^	struct type$/;"	s	struct:libtorrent::aux::aligned_storage
type	libtorrent/include/libtorrent/aux_/aligned_union.hpp	/^	struct type$/;"	s	struct:libtorrent::aux::aligned_union
type	libtorrent/include/libtorrent/aux_/io.hpp	/^	template <class T> struct type {};$/;"	s	namespace:libtorrent::aux
type	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^		settings_pack::proxy_type_t type = settings_pack::none;$/;"	m	struct:libtorrent::aux::proxy_settings
type	libtorrent/include/libtorrent/extensions.hpp	/^		virtual string_view type() const { return {}; }$/;"	f	struct:libtorrent::peer_plugin
type	libtorrent/include/libtorrent/io.hpp	/^		template <class T> struct type {};$/;"	s	namespace:libtorrent::detail
type	libtorrent/include/libtorrent/kademlia/msg.hpp	/^	int type;$/;"	m	struct:libtorrent::dht::key_desc_t
type	libtorrent/include/libtorrent/lazy_entry.hpp	/^		entry_type_t type() const { return entry_type_t(m_type); }$/;"	f	struct:libtorrent::lazy_entry
type	libtorrent/include/libtorrent/netlink.hpp	/^		int type() const$/;"	f	class:libtorrent::netlink
type	libtorrent/include/libtorrent/session_stats.hpp	/^		metric_type_t type;$/;"	m	struct:libtorrent::stats_metric
type	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::uint8_t type;$/;"	m	struct:libtorrent::web_seed_entry
type_bases	libtorrent/include/libtorrent/settings_pack.hpp	/^		enum type_bases$/;"	g	struct:libtorrent::settings_pack
type_counter	libtorrent/include/libtorrent/session_stats.hpp	/^		static constexpr metric_type_t TORRENT_DEPRECATED_MEMBER type_counter = metric_type_t::counter;$/;"	m	struct:libtorrent::stats_metric
type_gauge	libtorrent/include/libtorrent/session_stats.hpp	/^		static constexpr metric_type_t TORRENT_DEPRECATED_MEMBER type_gauge = metric_type_t::gauge;$/;"	m	struct:libtorrent::stats_metric
type_mask	libtorrent/include/libtorrent/settings_pack.hpp	/^			type_mask =        0xc000,$/;"	e	enum:libtorrent::settings_pack::type_bases
type_of_service	libtorrent/include/libtorrent/socket.hpp	/^		explicit type_of_service(char val) : m_value(tos_t(val)) {}$/;"	f	struct:libtorrent::type_of_service
type_of_service	libtorrent/include/libtorrent/socket.hpp	/^	struct type_of_service$/;"	s	namespace:libtorrent
type_t	libtorrent/include/libtorrent/bdecode.hpp	/^	enum type_t$/;"	g	struct:bdecode_node
type_t	libtorrent/include/libtorrent/torrent_info.hpp	/^		enum type_t { url_seed, http_seed };$/;"	g	struct:libtorrent::web_seed_entry
type_ver	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::uint8_t type_ver;$/;"	m	struct:libtorrent::utp_header
typed_bitfield	libtorrent/include/libtorrent/bitfield.hpp	/^	struct typed_bitfield : bitfield$/;"	s	namespace:libtorrent
u16_t	include/packet.h	/^typedef unsigned short u16_t;$/;"	t
u32_t	include/packet.h	/^typedef unsigned int   u32_t;$/;"	t
u8_t	include/packet.h	/^typedef unsigned char  u8_t;$/;"	t
udp	libtorrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
udp	libtorrent/include/libtorrent/session_handle.hpp	/^		static constexpr portmap_protocol udp = portmap_protocol::udp;$/;"	m	struct:libtorrent::session_handle
udp_external_port	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		int udp_external_port()$/;"	f	struct:libtorrent::aux::listen_socket_t
udp_generate_rijndael_round_key	src/ot_udp.c	/^static void udp_generate_rijndael_round_key() {$/;"	f	file:
udp_handler_storage	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		aux::handler_storage<TORRENT_READ_HANDLER_MAX_SIZE> udp_handler_storage;$/;"	m	struct:libtorrent::aux::listen_socket_t
udp_handler_storage	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		aux::handler_storage<TORRENT_READ_HANDLER_MAX_SIZE> udp_handler_storage;$/;"	m	struct:libtorrent::aux::session_udp_socket
udp_init	src/ot_udp.c	/^void udp_init( int64 sock, unsigned int worker_count ) {$/;"	f
udp_make_connectionid	src/ot_udp.c	/^static void udp_make_connectionid( uint32_t connid[2], const ot_ip6 remoteip, int age ) {$/;"	f	file:
udp_port_mapping	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		aux::array<listen_port_mapping, 2, portmap_transport> udp_port_mapping;$/;"	m	struct:libtorrent::aux::listen_socket_t
udp_sock	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<aux::session_udp_socket> udp_sock;$/;"	m	struct:libtorrent::aux::listen_socket_t
udp_socket	libtorrent/include/libtorrent/udp_socket.hpp	/^	class TORRENT_EXTRA_EXPORT udp_socket : single_threaded$/;"	c	namespace:libtorrent
udp_tracker_connection	libtorrent/include/libtorrent/udp_tracker_connection.hpp	/^	class TORRENT_EXTRA_EXPORT udp_tracker_connection: public tracker_connection$/;"	c	namespace:libtorrent
udp_tracker_token_expiry	libtorrent/include/libtorrent/settings_pack.hpp	/^			udp_tracker_token_expiry,$/;"	e	enum:libtorrent::settings_pack::int_types
udp_worker	src/ot_udp.c	/^static void* udp_worker( void * args ) {$/;"	f	file:
udploop	libowfat/dns.h	/^  unsigned int udploop;$/;"	m	struct:dns_transmit
udploop	libowfat/libowfat/dns.h	/^  unsigned int udploop;$/;"	m	struct:dns_transmit
uint16	libowfat/libowfat/uint16.h	/^typedef uint16_t uint16;$/;"	t
uint16	libowfat/uint16.h	/^typedef uint16_t uint16;$/;"	t
uint16_pack	libowfat/libowfat/uint16.h	/^static inline void uint16_pack(char* out,uint16 in) {$/;"	f
uint16_pack	libowfat/uint/uint16_pack.c	/^void uint16_pack(char *out,uint16 in) {$/;"	f
uint16_pack	libowfat/uint16.h	/^static inline void uint16_pack(char* out,uint16 in) {$/;"	f
uint16_pack_big	libowfat/libowfat/uint16.h	/^static inline void uint16_pack_big(char* out,uint16 in) {$/;"	f
uint16_pack_big	libowfat/uint/uint16_pack_big.c	/^void uint16_pack_big(char *out,uint16 in) {$/;"	f
uint16_pack_big	libowfat/uint16.h	/^static inline void uint16_pack_big(char* out,uint16 in) {$/;"	f
uint16_read	libowfat/libowfat/uint16.h	/^static inline uint16 uint16_read(const char* in) {$/;"	f
uint16_read	libowfat/uint/uint16_read.c	/^uint16 uint16_read(const char *in) {$/;"	f
uint16_read	libowfat/uint16.h	/^static inline uint16 uint16_read(const char* in) {$/;"	f
uint16_read_big	libowfat/libowfat/uint16.h	/^static inline uint16 uint16_read_big(const char* in) {$/;"	f
uint16_read_big	libowfat/uint/uint16_read_big.c	/^uint16 uint16_read_big(const char *in) {$/;"	f
uint16_read_big	libowfat/uint16.h	/^static inline uint16 uint16_read_big(const char* in) {$/;"	f
uint16_unpack	libowfat/libowfat/uint16.h	/^static inline void uint16_unpack(const char *in,uint16* out) {$/;"	f
uint16_unpack	libowfat/uint/uint16_unpack.c	/^void uint16_unpack(const char *in,uint16 *out) {$/;"	f
uint16_unpack	libowfat/uint16.h	/^static inline void uint16_unpack(const char *in,uint16* out) {$/;"	f
uint16_unpack_big	libowfat/libowfat/uint16.h	/^static inline void uint16_unpack_big(const char *in,uint16* out) {$/;"	f
uint16_unpack_big	libowfat/uint/uint16_unpack_big.c	/^void uint16_unpack_big(const char *in,uint16 *out) {$/;"	f
uint16_unpack_big	libowfat/uint16.h	/^static inline void uint16_unpack_big(const char *in,uint16* out) {$/;"	f
uint32	libowfat/libowfat/uint32.h	/^typedef uint32_t uint32;$/;"	t
uint32	libowfat/uint32.h	/^typedef uint32_t uint32;$/;"	t
uint32_pack	libowfat/libowfat/uint32.h	/^static inline void uint32_pack(char* out,uint32 in) {$/;"	f
uint32_pack	libowfat/uint/uint32_pack.c	/^void uint32_pack(char *out,uint32 in) {$/;"	f
uint32_pack	libowfat/uint32.h	/^static inline void uint32_pack(char* out,uint32 in) {$/;"	f
uint32_pack_big	libowfat/libowfat/uint32.h	/^static inline void uint32_pack_big(char *out,uint32 in) {$/;"	f
uint32_pack_big	libowfat/uint/uint32_pack_big.c	/^void uint32_pack_big(char *out,uint32 in) {$/;"	f
uint32_pack_big	libowfat/uint32.h	/^static inline void uint32_pack_big(char *out,uint32 in) {$/;"	f
uint32_read	libowfat/libowfat/uint32.h	/^static inline uint32 uint32_read(const char* in) {$/;"	f
uint32_read	libowfat/uint/uint32_read.c	/^uint32 uint32_read(const char *in) {$/;"	f
uint32_read	libowfat/uint32.h	/^static inline uint32 uint32_read(const char* in) {$/;"	f
uint32_read_big	libowfat/libowfat/uint32.h	/^static inline uint32 uint32_read_big(const char *in) {$/;"	f
uint32_read_big	libowfat/uint/uint32_read_big.c	/^uint32 uint32_read_big(const char *in) {$/;"	f
uint32_read_big	libowfat/uint32.h	/^static inline uint32 uint32_read_big(const char *in) {$/;"	f
uint32_unpack	libowfat/libowfat/uint32.h	/^static inline void uint32_unpack(const char *in,uint32* out) {$/;"	f
uint32_unpack	libowfat/uint/uint32_unpack.c	/^void uint32_unpack(const char *in,uint32 *out) {$/;"	f
uint32_unpack	libowfat/uint32.h	/^static inline void uint32_unpack(const char *in,uint32* out) {$/;"	f
uint32_unpack_big	libowfat/libowfat/uint32.h	/^static inline void uint32_unpack_big(const char *in,uint32* out) {$/;"	f
uint32_unpack_big	libowfat/uint/uint32_unpack_big.c	/^void uint32_unpack_big(const char *in,uint32 *out) {$/;"	f
uint32_unpack_big	libowfat/uint32.h	/^static inline void uint32_unpack_big(const char *in,uint32* out) {$/;"	f
uint64	libowfat/libowfat/uint64.h	/^typedef uint64_t uint64;$/;"	t
uint64	libowfat/uint64.h	/^typedef uint64_t uint64;$/;"	t
uint64_pack	libowfat/libowfat/uint64.h	15;"	d
uint64_pack	libowfat/uint/uint64_pack.c	/^void uint64_pack(char *out,uint64 in) {$/;"	f
uint64_pack	libowfat/uint64.h	15;"	d
uint64_pack_big	libowfat/uint/uint64_pack_big.c	/^void uint64_pack_big(char *out,uint64 in) {$/;"	f
uint64_read	libowfat/libowfat/uint64.h	17;"	d
uint64_read	libowfat/uint/uint64_read.c	/^uint64 uint64_read(const char *in) {$/;"	f
uint64_read	libowfat/uint64.h	17;"	d
uint64_read_big	libowfat/uint/uint64_read_big.c	/^uint64 uint64_read_big(const char *in) {$/;"	f
uint64_unpack	libowfat/libowfat/uint64.h	16;"	d
uint64_unpack	libowfat/uint/uint64_unpack.c	/^void uint64_unpack(const char *in,uint64 *out) {$/;"	f
uint64_unpack	libowfat/uint64.h	16;"	d
uint64_unpack_big	libowfat/uint/uint64_unpack_big.c	/^void uint64_unpack_big(const char *in,uint64 *out) {$/;"	f
ullrand	src/tools.c	/^unsigned long long ullrand(void)$/;"	f
ulrand	src/tools.c	/^unsigned long ulrand(void)$/;"	f
umult16	libowfat/libowfat/safemult.h	/^static inline int umult16(uint16 a,uint16 b,uint16* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
umult16	libowfat/mult/umult16.c	/^int umult16(uint16 a,uint16 b,uint16* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
umult16	libowfat/mult/umult16.c	/^int umult16(uint16 a,uint16 b,uint16* c) {$/;"	f
umult16	libowfat/safemult.h	/^static inline int umult16(uint16 a,uint16 b,uint16* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
umult32	libowfat/libowfat/safemult.h	/^static inline int umult32(uint32 a,uint32 b,uint32* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
umult32	libowfat/mult/umult32.c	/^int umult32(uint32 a,uint32 b,uint32* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
umult32	libowfat/mult/umult32.c	/^int umult32(uint32 a,uint32 b,uint32* c) {$/;"	f
umult32	libowfat/safemult.h	/^static inline int umult32(uint32 a,uint32 b,uint32* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
umult64	libowfat/libowfat/safemult.h	/^static inline int umult64(uint64 a,uint64 b,uint64* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
umult64	libowfat/mult/umult64.c	/^int umult64(uint64 a,uint64 b,uint64* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
umult64	libowfat/mult/umult64.c	/^int umult64(uint64 a,uint64 b,uint64* c) {$/;"	f
umult64	libowfat/safemult.h	/^static inline int umult64(uint64 a,uint64 b,uint64* c) { return !__builtin_mul_overflow(a,b,c); }$/;"	f
un	libtorrent/include/libtorrent/disk_io_job.hpp	/^			un() {}$/;"	f	union:libtorrent::disk_io_job::un
un	libtorrent/include/libtorrent/disk_io_job.hpp	/^		union un$/;"	u	struct:libtorrent::disk_io_job
unauthorized	libtorrent/include/libtorrent/error_code.hpp	/^			unauthorized = 401,$/;"	e	enum:libtorrent::errors::http_errors
unchoke_counter	libtorrent/include/libtorrent/session_status.hpp	/^		int unchoke_counter;$/;"	m	struct:libtorrent::session_status
unchoke_interval	libtorrent/include/libtorrent/settings_pack.hpp	/^			unchoke_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
unchoke_piece_picks	libtorrent/include/libtorrent/performance_counters.hpp	/^			unchoke_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
unchoke_slots_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			unchoke_slots_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
undefined_t	libtorrent/include/libtorrent/entry.hpp	/^			undefined_t,$/;"	e	enum:libtorrent::entry::data_type
underlying_index_t	libtorrent/include/libtorrent/units.hpp	/^	struct underlying_index_t { using type = T; };$/;"	s	namespace:libtorrent::aux
underlying_index_t	libtorrent/include/libtorrent/units.hpp	/^	struct underlying_index_t<T, typename std::enable_if<std::is_enum<T>::value>::type>$/;"	s	namespace:libtorrent::aux
underlying_index_t	libtorrent/include/libtorrent/units.hpp	/^	struct underlying_index_t<aux::strong_typedef<U, Tag>> { using type = U; };$/;"	s	namespace:libtorrent::aux
unexpected_eof	libtorrent/include/libtorrent/bdecode.hpp	/^		unexpected_eof,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
unexpected_eof	libtorrent/include/libtorrent/error_code.hpp	/^			unexpected_eof,$/;"	e	enum:libtorrent::errors::error_code_enum
unfinished_pieces	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::map<piece_index_t, bitfield>> unfinished_pieces;$/;"	m	struct:libtorrent::add_torrent_params
unicode_to_utf8	src/tools.c	/^char *unicode_to_utf8(unsigned int *unic, char *pOutput)$/;"	f
uninitialized_default_construct	libtorrent/include/libtorrent/aux_/alloca.hpp	/^inline void uninitialized_default_construct(ForwardIt first, ForwardIt last)$/;"	f	namespace:libtorrent::aux
uninteresting_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			uninteresting_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
uninteresting_upload_peer	libtorrent/include/libtorrent/error_code.hpp	/^			uninteresting_upload_peer,$/;"	e	enum:libtorrent::errors::error_code_enum
union_address	libtorrent/include/libtorrent/union_endpoint.hpp	/^		explicit union_address(address const& a) { *this = a; }$/;"	f	struct:libtorrent::union_address
union_address	libtorrent/include/libtorrent/union_endpoint.hpp	/^		union_address() { *this = address(); }$/;"	f	struct:libtorrent::union_address
union_address	libtorrent/include/libtorrent/union_endpoint.hpp	/^	struct union_address$/;"	s	namespace:libtorrent
union_endpoint	libtorrent/include/libtorrent/union_endpoint.hpp	/^		explicit union_endpoint(tcp::endpoint const& ep) { *this = ep; }$/;"	f	struct:libtorrent::union_endpoint
union_endpoint	libtorrent/include/libtorrent/union_endpoint.hpp	/^		explicit union_endpoint(udp::endpoint const& ep) { *this = ep; }$/;"	f	struct:libtorrent::union_endpoint
union_endpoint	libtorrent/include/libtorrent/union_endpoint.hpp	/^		union_endpoint() { *this = tcp::endpoint(); }$/;"	f	struct:libtorrent::union_endpoint
union_endpoint	libtorrent/include/libtorrent/union_endpoint.hpp	/^	struct union_endpoint$/;"	s	namespace:libtorrent
unique_ptr	libtorrent/include/libtorrent/aux_/unique_ptr.hpp	/^		explicit unique_ptr(T* arr) : base(arr) {}$/;"	f	struct:libtorrent::aux::unique_ptr
unique_ptr	libtorrent/include/libtorrent/aux_/unique_ptr.hpp	/^	struct unique_ptr<T[], IndexType> : std::unique_ptr<T[]>$/;"	s	namespace:libtorrent::aux
unknown	libtorrent/include/libtorrent/operations.hpp	/^		unknown,$/;"	m	class:libtorrent::operation_t
unknown_gzip_error	libtorrent/include/libtorrent/gzip.hpp	/^			unknown_gzip_error,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
unlink	libtorrent/include/libtorrent/link.hpp	/^		void unlink(aux::vector<T*>& list$/;"	f	struct:libtorrent::link
unload	libtorrent/include/libtorrent/torrent_info.hpp	/^		void unload() {}$/;"	f	class:libtorrent::torrent_info
unpackme	sync_daemon.pl	/^sub unpackme {$/;"	s
unreachable_peers	libtorrent/include/libtorrent/performance_counters.hpp	/^			unreachable_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
unreverse	libtorrent/include/libtorrent/piece_picker.hpp	/^			void unreverse()$/;"	f	struct:libtorrent::piece_picker::piece_pos
unsupported_authentication_method	libtorrent/include/libtorrent/socks5_stream.hpp	/^		unsupported_authentication_method,$/;"	e	enum:libtorrent::socks_error::socks_error_code
unsupported_authentication_version	libtorrent/include/libtorrent/socks5_stream.hpp	/^		unsupported_authentication_version,$/;"	e	enum:libtorrent::socks_error::socks_error_code
unsupported_encryption_mode	libtorrent/include/libtorrent/error_code.hpp	/^			unsupported_encryption_mode,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_encryption_mode_selected	libtorrent/include/libtorrent/error_code.hpp	/^			unsupported_encryption_mode_selected,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_opcode	libtorrent/include/libtorrent/error_code.hpp	/^			unsupported_opcode TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_protocol_version	libtorrent/include/libtorrent/error_code.hpp	/^			unsupported_protocol_version TORRENT_DEPRECATED_ENUM = 120,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_url_protocol	libtorrent/include/libtorrent/error_code.hpp	/^			unsupported_url_protocol,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_version	libtorrent/include/libtorrent/socks5_stream.hpp	/^		unsupported_version,$/;"	e	enum:libtorrent::socks_error::socks_error_code
unurl	libowfat/test/unurl.c	/^void unurl(const char* s) {$/;"	f
up_bandwidth_bytes_queue	libtorrent/include/libtorrent/session_status.hpp	/^		int up_bandwidth_bytes_queue;$/;"	m	struct:libtorrent::session_status
up_bandwidth_queue	libtorrent/include/libtorrent/session_status.hpp	/^		int up_bandwidth_queue;$/;"	m	struct:libtorrent::session_status
up_bandwidth_queue	libtorrent/include/libtorrent/torrent_status.hpp	/^		int up_bandwidth_queue = 0;$/;"	m	struct:libtorrent::torrent_status
up_speed	libtorrent/include/libtorrent/peer_info.hpp	/^		int up_speed;$/;"	m	struct:libtorrent::peer_info
update	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		void update(span<char const> data)$/;"	f	struct:libtorrent::aux::crypt_hash
update_counters	src/session_view.cpp	/^void session_view::update_counters(span<std::int64_t const> stats_counters$/;"	f	class:session_view
update_filtered_torrents	src/torrent_view.cpp	/^void torrent_view::update_filtered_torrents()$/;"	f	class:torrent_view
update_last_upload	libtorrent/include/libtorrent/torrent.hpp	/^		void update_last_upload() { m_last_upload = aux::time_now32(); }$/;"	f	class:libtorrent::torrent
update_max_failcount	libtorrent/include/libtorrent/torrent.hpp	/^		void update_max_failcount()$/;"	f	class:libtorrent::torrent
update_node_id	libtorrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	void update_node_id(node_id const& id) { m_our_id = id; }$/;"	f	class:libtorrent::dht::rpc_manager
update_subscribe	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t update_subscribe = 7_bit;$/;"	m	namespace:libtorrent::torrent_flags
update_torrents	src/torrent_view.cpp	/^void torrent_view::update_torrents(std::vector<lt::torrent_status> st)$/;"	f	class:torrent_view
updating	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER updating:1;$/;"	m	struct:libtorrent::announce_entry
updating	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool updating : 1;$/;"	m	struct:libtorrent::announce_endpoint
upload	libtorrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t upload = 23_bit;$/;"	m	namespace:libtorrent::alert_category
upload_channel	libtorrent/include/libtorrent/peer_connection.hpp	/^			upload_channel,$/;"	e	enum:libtorrent::peer_connection::channels
upload_ip_overhead	libtorrent/include/libtorrent/stat.hpp	/^		int upload_ip_overhead() const { return m_stat[upload_ip_protocol].counter(); }$/;"	f	class:libtorrent::stat
upload_ip_protocol	libtorrent/include/libtorrent/stat.hpp	/^			upload_ip_protocol,$/;"	e	enum:libtorrent::stat::__anon67
upload_limit	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int upload_limit = -1;$/;"	m	struct:libtorrent::add_torrent_params
upload_limit	libtorrent/include/libtorrent/peer_class.hpp	/^		int upload_limit;$/;"	m	struct:libtorrent::peer_class_info
upload_limit	libtorrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER int upload_limit;$/;"	m	struct:libtorrent::peer_info
upload_limit_too_low	libtorrent/include/libtorrent/alert_types.hpp	/^			upload_limit_too_low,$/;"	e	enum:libtorrent::final::performance_warning_t
upload_mode	libtorrent/include/libtorrent/torrent.hpp	/^		bool upload_mode() const { return m_upload_mode || m_graceful_pause_mode; }$/;"	f	class:libtorrent::torrent
upload_mode	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t upload_mode = 1_bit;$/;"	m	namespace:libtorrent::torrent_flags
upload_mode	libtorrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER upload_mode = false;$/;"	m	struct:libtorrent::torrent_status
upload_notification	libtorrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t upload_notification = 23_bit;$/;"	m	class:libtorrent::alert
upload_only	libtorrent/include/libtorrent/peer_connection.hpp	/^		bool upload_only() const { return m_upload_only; }$/;"	f	class:libtorrent::peer_connection
upload_only	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t upload_only = 13_bit;$/;"	m	struct:libtorrent::peer_info
upload_only_msg	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^			upload_only_msg = 3,$/;"	e	enum:libtorrent::bt_peer_connection::__anon47
upload_payload	libtorrent/include/libtorrent/stat.hpp	/^			upload_payload,$/;"	e	enum:libtorrent::stat::__anon67
upload_payload_rate	libtorrent/include/libtorrent/stat.hpp	/^		int upload_payload_rate() const$/;"	f	class:libtorrent::stat
upload_payload_rate	libtorrent/include/libtorrent/torrent_status.hpp	/^		int upload_payload_rate = 0;$/;"	m	struct:libtorrent::torrent_status
upload_priority	libtorrent/include/libtorrent/peer_class.hpp	/^		int upload_priority;$/;"	m	struct:libtorrent::peer_class_info
upload_protocol	libtorrent/include/libtorrent/stat.hpp	/^			upload_protocol,$/;"	e	enum:libtorrent::stat::__anon67
upload_queue_length	libtorrent/include/libtorrent/peer_info.hpp	/^		int upload_queue_length;$/;"	m	struct:libtorrent::peer_info
upload_rate	libtorrent/include/libtorrent/session_status.hpp	/^		int upload_rate;$/;"	m	struct:libtorrent::session_status
upload_rate	libtorrent/include/libtorrent/stat.hpp	/^		int upload_rate() const$/;"	f	class:libtorrent::stat
upload_rate	libtorrent/include/libtorrent/torrent_status.hpp	/^		int upload_rate = 0;$/;"	m	struct:libtorrent::torrent_status
upload_rate_limit	libtorrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int upload_rate_limit = 8000;$/;"	m	struct:libtorrent::dht::dht_settings
upload_rate_limit	libtorrent/include/libtorrent/settings_pack.hpp	/^			upload_rate_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
upload_rate_peak	libtorrent/include/libtorrent/peer_info.hpp	/^		int upload_rate_peak;$/;"	m	struct:libtorrent::peer_info
upload_to_upload	libtorrent/include/libtorrent/close_reason.hpp	/^		upload_to_upload,$/;"	m	class:libtorrent::close_reason_t
upload_upload_connection	libtorrent/include/libtorrent/error_code.hpp	/^			upload_upload_connection,$/;"	e	enum:libtorrent::errors::error_code_enum
uploaded	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t uploaded;$/;"	m	struct:libtorrent::tracker_request
uploaded_in_last_round	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t uploaded_in_last_round() const$/;"	f	class:libtorrent::peer_connection
uploaded_since_unchoked	libtorrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t uploaded_since_unchoked() const$/;"	f	class:libtorrent::peer_connection
uploads_limit	libtorrent/include/libtorrent/torrent_status.hpp	/^		int uploads_limit = 0;$/;"	m	struct:libtorrent::torrent_status
upnp_connection	libtorrent/include/libtorrent/upnp.hpp	/^		mutable std::shared_ptr<http_connection> upnp_connection;$/;"	m	struct:libtorrent::final::rootdevice
upnp_errors	libtorrent/include/libtorrent/upnp.hpp	/^	namespace upnp_errors$/;"	n	namespace:libtorrent
upnp_ignore_nonrouters	libtorrent/include/libtorrent/settings_pack.hpp	/^			upnp_ignore_nonrouters,$/;"	e	enum:libtorrent::settings_pack::bool_types
upnp_lease_duration	libtorrent/include/libtorrent/settings_pack.hpp	/^			upnp_lease_duration,$/;"	e	enum:libtorrent::settings_pack::int_types
upnp_mapper	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<upnp> upnp_mapper;$/;"	m	struct:libtorrent::aux::listen_socket_t
upnp_state_t	libtorrent/include/libtorrent/upnp.hpp	/^	struct upnp_state_t$/;"	s	struct:libtorrent::final
url	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER url;$/;"	m	struct:libtorrent::add_torrent_params
url	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER url;$/;"	m	struct:libtorrent::final
url	libtorrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER url;$/;"	m	struct:libtorrent::tracker_alert
url	libtorrent/include/libtorrent/announce_entry.hpp	/^		std::string url;$/;"	m	struct:libtorrent::announce_entry
url	libtorrent/include/libtorrent/torrent.hpp	/^		std::string const& url() const { return m_url; }$/;"	f	class:libtorrent::torrent::std
url	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::string url;$/;"	m	struct:libtorrent::web_seed_entry
url	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::string url;$/;"	m	struct:libtorrent::tracker_request
url	libtorrent/include/libtorrent/upnp.hpp	/^		std::string url;$/;"	m	struct:libtorrent::final::rootdevice
url_base	libtorrent/include/libtorrent/upnp.hpp	/^	std::string url_base;$/;"	m	struct:libtorrent::parse_state
url_parse_error	libtorrent/include/libtorrent/error_code.hpp	/^			url_parse_error,$/;"	e	enum:libtorrent::errors::error_code_enum
url_seed	libtorrent/include/libtorrent/peer_connection.hpp	/^		url_seed,$/;"	m	class:libtorrent::connection_type
url_seed	libtorrent/include/libtorrent/torrent_info.hpp	/^		enum type_t { url_seed, http_seed };$/;"	e	enum:libtorrent::web_seed_entry::type_t
url_seeds	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<std::string>> url_seeds;$/;"	m	struct:libtorrent::add_torrent_params
urlencode	libowfat/test/urlencode.c	/^void urlencode(const char* c) {$/;"	f
urlseed_max_request_bytes	libtorrent/include/libtorrent/settings_pack.hpp	/^			urlseed_max_request_bytes,$/;"	e	enum:libtorrent::settings_pack::int_types
urlseed_pipeline_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			urlseed_pipeline_size,$/;"	e	enum:libtorrent::settings_pack::int_types
urlseed_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			urlseed_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
urlseed_wait_retry	libtorrent/include/libtorrent/settings_pack.hpp	/^			urlseed_wait_retry,$/;"	e	enum:libtorrent::settings_pack::int_types
usage	src/opentracker.c	/^static void usage( char *name ) {$/;"	f	file:
usage	src/proxy.c	/^int usage( char *self ) {$/;"	f
use_dht_as_fallback	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_dht_as_fallback,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_disk_cache_pool	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_disk_cache_pool TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_disk_read_ahead	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_disk_read_ahead TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_lease_duration	libtorrent/include/libtorrent/upnp.hpp	/^		bool use_lease_duration = true;$/;"	m	struct:libtorrent::final::rootdevice
use_localtime	src/tools.c	/^int use_localtime = 0; \/\/夏时令$/;"	v
use_parole_mode	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_parole_mode,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_read_cache	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_read_cache,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_resume_save_path	libtorrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER use_resume_save_path = 17_bit;$/;"	m	namespace:libtorrent::torrent_flags
use_routegenid	libtorrent/include/libtorrent/aux_/route.h	/^__private_extern__ int use_routegenid;$/;"	v
use_write_cache	libtorrent/include/libtorrent/settings_pack.hpp	/^			use_write_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
used	libowfat/ent.c	/^size_t used;$/;"	v
used	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		bool used;$/;"	m	struct:libtorrent::aux::handler_storage
used_receive_buffer	libtorrent/include/libtorrent/peer_info.hpp	/^		int used_receive_buffer;$/;"	m	struct:libtorrent::peer_info
used_send_buffer	libtorrent/include/libtorrent/peer_info.hpp	/^		int used_send_buffer;$/;"	m	struct:libtorrent::peer_info
used_size	libtorrent/include/libtorrent/chained_buffer.hpp	/^			int used_size = 0; \/\/ this is the number of bytes to send\/receive$/;"	m	struct:libtorrent::chained_buffer
useddata	libowfat/ent.c	/^size_t useddata;$/;"	v
user_agent	libtorrent/include/libtorrent/settings_pack.hpp	/^			user_agent = string_type_base,$/;"	e	enum:libtorrent::settings_pack::string_types
user_alert_id	libtorrent/include/libtorrent/alert_types.hpp	/^	constexpr int user_alert_id = 10000;$/;"	m	namespace:libtorrent
user_have_piece	libtorrent/include/libtorrent/torrent.hpp	/^		bool user_have_piece(piece_index_t index) const$/;"	f	class:libtorrent::torrent
userdata	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		void* userdata = nullptr;$/;"	m	struct:libtorrent::add_torrent_params
username	libtorrent/include/libtorrent/aux_/proxy_settings.hpp	/^		std::string username;$/;"	m	struct:libtorrent::aux::proxy_settings
username_required	libtorrent/include/libtorrent/socks5_stream.hpp	/^		username_required,$/;"	e	enum:libtorrent::socks_error::socks_error_code
uses	libowfat/dns/dns_rcip.c	/^static unsigned int uses;$/;"	v	file:
uses	libowfat/dns/dns_rcrw.c	/^static unsigned int uses;$/;"	v	file:
ustime	src/tools.c	/^long long ustime(void)$/;"	f
ut_pex_peer_store	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^	struct TORRENT_EXTRA_EXPORT ut_pex_peer_store$/;"	s	namespace:libtorrent
utf8	libowfat/ent.c	/^  char utf8[10];$/;"	m	struct:entity	file:
utf8_errors	libtorrent/include/libtorrent/utf8.hpp	/^	namespace utf8_errors$/;"	n	namespace:libtorrent
utp_close_reason	libtorrent/include/libtorrent/utp_stream.hpp	/^{ utp_no_extension = 0, utp_sack = 1, utp_close_reason = 3 };$/;"	e	enum:libtorrent::utp_extensions_t
utp_connect_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_connect_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_cwnd_reduce_timer	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_cwnd_reduce_timer,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_delayed_ack	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_delayed_ack TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_extensions_t	libtorrent/include/libtorrent/utp_stream.hpp	/^enum utp_extensions_t$/;"	g	namespace:libtorrent
utp_fast_retransmit	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_fast_retransmit,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_fin_resends	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_fin_resends,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_gain_factor	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_gain_factor,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_header	libtorrent/include/libtorrent/utp_stream.hpp	/^struct utp_header$/;"	s	namespace:libtorrent
utp_invalid_pkts_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_invalid_pkts_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_loss_multiplier	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_loss_multiplier,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_min_timeout	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_min_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_no_extension	libtorrent/include/libtorrent/utp_stream.hpp	/^{ utp_no_extension = 0, utp_sack = 1, utp_close_reason = 3 };$/;"	e	enum:libtorrent::utp_extensions_t
utp_num_resends	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_num_resends,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_packet_loss	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_packet_loss,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_packet_resend	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_packet_resend,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_packets_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_packets_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_packets_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_packets_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_payload_pkts_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_payload_pkts_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_payload_pkts_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_payload_pkts_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_redundant_pkts_in	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_redundant_pkts_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_sack	libtorrent/include/libtorrent/utp_stream.hpp	/^{ utp_no_extension = 0, utp_sack = 1, utp_close_reason = 3 };$/;"	e	enum:libtorrent::utp_extensions_t
utp_samples_above_target	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_samples_above_target,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_samples_below_target	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_samples_below_target,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_socket	libtorrent/include/libtorrent/peer_class_type_filter.hpp	/^			utp_socket,$/;"	m	struct:libtorrent::peer_class_type_filter	typeref:enum:libtorrent::peer_class_type_filter::
utp_socket	libtorrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t utp_socket = 17_bit;$/;"	m	struct:libtorrent::peer_info
utp_socket_interface	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT utp_socket_interface$/;"	s	namespace:libtorrent
utp_socket_manager	libtorrent/include/libtorrent/utp_socket_manager.hpp	/^	struct utp_socket_manager$/;"	s	namespace:libtorrent
utp_socket_state_t	libtorrent/include/libtorrent/utp_stream.hpp	/^enum utp_socket_state_t$/;"	g	namespace:libtorrent
utp_stats	libtorrent/include/libtorrent/session_status.hpp	/^		utp_status utp_stats;$/;"	m	struct:libtorrent::session_status
utp_status	libtorrent/include/libtorrent/session_status.hpp	/^	struct TORRENT_DEPRECATED_EXPORT utp_status$/;"	s	namespace:libtorrent
utp_stream	libtorrent/include/libtorrent/utp_stream.hpp	/^struct TORRENT_EXTRA_EXPORT utp_stream$/;"	s	namespace:libtorrent
utp_syn_resends	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_syn_resends,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_target_delay	libtorrent/include/libtorrent/settings_pack.hpp	/^			utp_target_delay,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_timeout	libtorrent/include/libtorrent/performance_counters.hpp	/^			utp_timeout,$/;"	e	enum:libtorrent::counters::stats_counter_t
uuid	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER uuid;$/;"	m	struct:libtorrent::add_torrent_params
uuid	libtorrent/include/libtorrent/torrent.hpp	/^		std::string const& uuid() const { return m_uuid; }$/;"	f	class:libtorrent::torrent::std
v4	libtorrent/include/libtorrent/kademlia/observer.hpp	/^		address_v4::bytes_type v4;$/;"	m	union:libtorrent::dht::observer::addr_t
v4	libtorrent/include/libtorrent/torrent_handle.hpp	/^			address_v4::bytes_type v4;$/;"	m	union:libtorrent::block_info::addr_t
v4	libtorrent/include/libtorrent/union_endpoint.hpp	/^			address_v4::bytes_type v4;$/;"	m	union:libtorrent::union_address::addr_t
v4	libtorrent/include/libtorrent/union_endpoint.hpp	/^		bool v4:1;$/;"	m	struct:libtorrent::union_address
v6	libtorrent/include/libtorrent/kademlia/observer.hpp	/^		address_v6::bytes_type v6;$/;"	m	union:libtorrent::dht::observer::addr_t
v6	libtorrent/include/libtorrent/torrent_handle.hpp	/^			address_v6::bytes_type v6;$/;"	m	union:libtorrent::block_info::addr_t
v6	libtorrent/include/libtorrent/union_endpoint.hpp	/^			address_v6::bytes_type v6;$/;"	m	union:libtorrent::union_address::addr_t
v6_protection_level	libtorrent/include/libtorrent/socket.hpp	/^		explicit v6_protection_level(int level): m_value(level) {}$/;"	f	struct:libtorrent::v6_protection_level
v6_protection_level	libtorrent/include/libtorrent/socket.hpp	/^	struct v6_protection_level$/;"	s	namespace:libtorrent
val	libtorrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry val;$/;"	m	struct:libtorrent::lazy_dict_entry
val	src/ot_stats.c	/^typedef struct { size_t val; ot_torrent * torrent; } ot_record;$/;"	m	struct:__anon6	file:
valid_metadata	libtorrent/include/libtorrent/torrent.hpp	/^		bool valid_metadata() const$/;"	f	class:libtorrent::torrent
validate_https_trackers	libtorrent/include/libtorrent/settings_pack.hpp	/^			validate_https_trackers,$/;"	e	enum:libtorrent::settings_pack::bool_types
value	include/scan_urlencoded_query.h	/^  int   value;$/;"	m	struct:__anon18
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 0; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 1; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 2; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 3; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 4; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 5; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 6; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 7; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 8; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 9; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	libtorrent/include/libtorrent/bdecode.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	libtorrent/include/libtorrent/error_code.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	libtorrent/include/libtorrent/gzip.hpp	/^{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	libtorrent/include/libtorrent/gzip.hpp	/^{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_condition_enum
value	libtorrent/include/libtorrent/i2p_stream.hpp	/^{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	libtorrent/include/libtorrent/kademlia/item.hpp	/^	entry const& value() const { return m_value; }$/;"	f	class:libtorrent::dht::item
value	libtorrent/include/libtorrent/kademlia/types.hpp	/^		std::int64_t value;$/;"	m	struct:libtorrent::dht::sequence_number
value	libtorrent/include/libtorrent/natpmp.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	libtorrent/include/libtorrent/socks5_stream.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	libtorrent/include/libtorrent/span.hpp	/^		static const bool value = std::is_same<From, To>::value$/;"	m	struct:libtorrent::aux::compatible_type
value	libtorrent/include/libtorrent/upnp.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value_index	libtorrent/include/libtorrent/session_stats.hpp	/^		int value_index;$/;"	m	struct:libtorrent::stats_metric
value_not_in_array	libtorrent/include/libtorrent/upnp.hpp	/^			value_not_in_array = 714,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
value_or	libtorrent/include/libtorrent/optional.hpp	/^	T value_or(boost::optional<T> opt, U def)$/;"	f	namespace:libtorrent
valuedouble	include/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	include/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuestring	include/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
vector_clean_list	src/ot_vector.c	/^void vector_clean_list( ot_vector * vector, int num_buckets ) {$/;"	f
vector_compare_hash	src/ot_accesslist.c	/^static int vector_compare_hash(const void *hash1, const void *hash2 ) {$/;"	f	file:
vector_compare_peer	src/ot_vector.c	/^static int vector_compare_peer(const void *peer1, const void *peer2 ) {$/;"	f	file:
vector_find_or_insert	src/ot_vector.c	/^void *vector_find_or_insert( ot_vector *vector, void *key, size_t member_size, size_t compare_size, int *exactmatch ) {$/;"	f
vector_find_or_insert_peer	src/ot_vector.c	/^ot_peer *vector_find_or_insert_peer( ot_vector *vector, ot_peer *peer, int *exactmatch ) {$/;"	f
vector_fixup_peers	src/ot_vector.c	/^void vector_fixup_peers( ot_vector * vector ) {$/;"	f
vector_hash_peer	src/ot_vector.c	/^static uint8_t vector_hash_peer( ot_peer *peer, int bucket_count ) {$/;"	f	file:
vector_redistribute_buckets	src/ot_vector.c	/^void vector_redistribute_buckets( ot_peerlist * peer_list ) {$/;"	f
vector_remove_peer	src/ot_vector.c	/^int vector_remove_peer( ot_vector *vector, ot_peer *peer ) {$/;"	f
vector_remove_torrent	src/ot_vector.c	/^void vector_remove_torrent( ot_vector *vector, ot_torrent *match ) {$/;"	f
verified	libtorrent/include/libtorrent/announce_entry.hpp	/^		bool verified:1;$/;"	m	struct:libtorrent::announce_entry
verified	libtorrent/include/libtorrent/kademlia/node_entry.hpp	/^	bool verified = false;$/;"	m	struct:libtorrent::dht::node_entry
verified_piece	libtorrent/include/libtorrent/torrent.hpp	/^		bool verified_piece(piece_index_t piece) const$/;"	f	class:libtorrent::torrent
verified_pieces	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		typed_bitfield<piece_index_t> verified_pieces;$/;"	m	struct:libtorrent::add_torrent_params
verified_pieces	libtorrent/include/libtorrent/torrent_status.hpp	/^		typed_bitfield<piece_index_t> verified_pieces;$/;"	m	struct:libtorrent::torrent_status
verify_message	libtorrent/include/libtorrent/kademlia/msg.hpp	/^bool verify_message(bdecode_node const& msg, key_desc_t const (&desc)[Size]$/;"	f	namespace:libtorrent::dht
verifying	libtorrent/include/libtorrent/torrent.hpp	/^		void verifying(piece_index_t const piece)$/;"	f	class:libtorrent::torrent
verifying_piece	libtorrent/include/libtorrent/torrent.hpp	/^		bool verifying_piece(piece_index_t const piece) const$/;"	f	class:libtorrent::torrent
version	libtorrent/include/libtorrent/add_torrent_params.hpp	/^		int version = LIBTORRENT_VERSION_NUM;$/;"	m	struct:libtorrent::add_torrent_params
version_chief	include/packet.h	/^    u16_t  version_chief;       \/\/主版本号       例如  0x0001$/;"	m	struct:yzy_packet
version_natpmp	libtorrent/include/libtorrent/natpmp.hpp	/^		version_natpmp = 0,$/;"	e	enum:libtorrent::natpmp::protocol_version
version_pcp	libtorrent/include/libtorrent/natpmp.hpp	/^		version_pcp = 2,$/;"	e	enum:libtorrent::natpmp::protocol_version
version_sub	include/packet.h	/^    u16_t  version_sub;         \/\/次要版本号     例如  0x0001$/;"	m	struct:yzy_packet
volatile_read	libtorrent/include/libtorrent/disk_interface.hpp	/^		static constexpr disk_job_flags_t volatile_read = 4_bit;$/;"	m	struct:libtorrent::disk_interface
volatile_read_cache	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		enum kind_t { read_cache = 0, write_cache = 1, volatile_read_cache = 2 };$/;"	e	enum:libtorrent::cached_piece_info::kind_t
volatile_read_cache	libtorrent/include/libtorrent/settings_pack.hpp	/^			volatile_read_cache,$/;"	e	enum:libtorrent::settings_pack::bool_types
volatile_read_lru	libtorrent/include/libtorrent/block_cache.hpp	/^			volatile_read_lru,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
voters	libtorrent/include/libtorrent/ip_voter.hpp	/^			bloom_filter<16> voters;$/;"	m	struct:libtorrent::ip_voter::external_ip_t
wait_input	src/test.c	/^char wait_input()$/;"	f
wakeup_t	libtorrent/include/libtorrent/debug.hpp	/^	struct wakeup_t$/;"	s	namespace:libtorrent
wantread	libowfat/io_internal.h	/^  unsigned int wantread:1;	\/* does the app want to read\/write? *\/$/;"	m	struct:__anon40
wantwrite	libowfat/io_internal.h	/^  unsigned int wantwrite:1;$/;"	m	struct:__anon40
warning	libtorrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
warning_code	libtorrent/include/libtorrent/alert_types.hpp	/^		performance_warning_t const warning_code;$/;"	m	struct:libtorrent::final
warning_message	libtorrent/include/libtorrent/tracker_manager.hpp	/^		std::string warning_message;$/;"	m	struct:libtorrent::tracker_response
was_expanded	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^		static constexpr listen_socket_flags_t was_expanded = 2_bit;$/;"	m	struct:libtorrent::aux::listen_socket_t
was_introduced_by	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		bool was_introduced_by(tcp::endpoint const& ep) const$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
waste_piece_cancelled	libtorrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_cancelled,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_closing	libtorrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_closing,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_end_game	libtorrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_end_game,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_seed	libtorrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_seed,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_timed_out	libtorrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_timed_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_unknown	libtorrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_unknown,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_reason	libtorrent/include/libtorrent/torrent.hpp	/^	enum class waste_reason$/;"	c	namespace:libtorrent
watermark	libtorrent/include/libtorrent/receive_buffer.hpp	/^	int watermark() const { return aux::numeric_cast<int>(m_watermark.mean()); }$/;"	f	struct:libtorrent::receive_buffer
we_have	libtorrent/include/libtorrent/alert_types.hpp	/^		bool const we_have;$/;"	m	struct:libtorrent::final
web_connection_base	libtorrent/include/libtorrent/web_connection_base.hpp	/^	class TORRENT_EXTRA_EXPORT web_connection_base$/;"	c	namespace:libtorrent
web_peer_connection	libtorrent/include/libtorrent/web_peer_connection.hpp	/^	class TORRENT_EXTRA_EXPORT web_peer_connection$/;"	c	namespace:libtorrent
web_seed	libtorrent/include/libtorrent/peer_info.hpp	/^			web_seed = 1,$/;"	e	enum:libtorrent::peer_info::connection_type_t
web_seed	libtorrent/include/libtorrent/torrent_peer.hpp	/^		bool web_seed:1;$/;"	m	struct:libtorrent::torrent_peer
web_seed_entry	libtorrent/include/libtorrent/torrent_info.hpp	/^	struct TORRENT_EXPORT web_seed_entry$/;"	s	namespace:libtorrent
web_seed_name_lookup_retry	libtorrent/include/libtorrent/settings_pack.hpp	/^			web_seed_name_lookup_retry,$/;"	e	enum:libtorrent::settings_pack::int_types
web_seed_t	libtorrent/include/libtorrent/torrent.hpp	/^	struct web_seed_t : web_seed_entry$/;"	s	namespace:libtorrent
web_seeds	libtorrent/include/libtorrent/torrent_info.hpp	/^		std::vector<web_seed_entry> const& web_seeds() const { return m_web_seeds; }$/;"	f	class:libtorrent::torrent_info::std
weiter	libowfat/ent.c	/^  struct letters* weiter;$/;"	m	struct:letter	typeref:struct:letter::letters	file:
what	libowfat/io_internal.h	/^  enum { CANREAD, CANWRITE, TIMEOUT } what;$/;"	m	struct:eventpacket	typeref:enum:eventpacket::__anon41
whole_pieces_threshold	libtorrent/include/libtorrent/settings_pack.hpp	/^			whole_pieces_threshold,$/;"	e	enum:libtorrent::settings_pack::int_types
winsock2errno	libowfat/unix/winsock2errno.c	/^int winsock2errno(long l) {$/;"	f
winsock2errno	libowfat/windoze.h	17;"	d
withheld	libtorrent/include/libtorrent/alert_types.hpp	/^		bool const withheld;$/;"	m	struct:libtorrent::final
wmb	libowfat/CAS.h	128;"	d
wmb	libowfat/CAS.h	140;"	d
wmb	libowfat/CAS.h	151;"	d
wnd_size	libtorrent/include/libtorrent/utp_stream.hpp	/^	be_uint32 wnd_size;$/;"	m	struct:libtorrent::utp_header
work	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				std::unique_ptr<boost::asio::io_service::work> work;$/;"	m	struct:libtorrent::aux::final::work_thread_t
work_thread_t	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				work_thread_t()$/;"	f	struct:libtorrent::aux::final::work_thread_t
work_thread_t	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^			struct work_thread_t$/;"	s	struct:libtorrent::aux::final
worker	libowfat/test/iom.c	/^int worker(void* arg) {$/;"	f
working	libowfat/io.h	/^  int working;	\/* used to synchronize who is filling the queue *\/$/;"	m	struct:iomux
working	libowfat/libowfat/io.h	/^  int working;	\/* used to synchronize who is filling the queue *\/$/;"	m	struct:iomux
wrap	libtorrent/include/libtorrent/aux_/torrent_impl.hpp	/^	void torrent::wrap(Fun f, Args&&... a)$/;"	f	class:libtorrent::torrent
write	libtorrent/include/libtorrent/disk_io_job.hpp	/^		, write$/;"	m	class:libtorrent::job_action_t
write_address	libtorrent/include/libtorrent/socket_io.hpp	/^		void write_address(address const& a, OutIt&& out)$/;"	f	namespace:libtorrent::detail
write_blocked	libtorrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		bool write_blocked = false;$/;"	m	struct:libtorrent::aux::session_udp_socket
write_cache	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		enum kind_t { read_cache = 0, write_cache = 1, volatile_read_cache = 2 };$/;"	e	enum:libtorrent::cached_piece_info::kind_t
write_cache_blocks	libtorrent/include/libtorrent/performance_counters.hpp	/^			write_cache_blocks,$/;"	e	enum:libtorrent::counters::stats_gauge_t
write_cache_line_size	libtorrent/include/libtorrent/settings_pack.hpp	/^			write_cache_line_size,$/;"	e	enum:libtorrent::settings_pack::int_types
write_cache_size	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int write_cache_size;$/;"	m	struct:libtorrent::cache_status
write_cb	libowfat/test/iob.c	/^static int64 write_cb(int64 fd,const void* buf,uint64 len) {$/;"	f	file:
write_char	libtorrent/include/libtorrent/bencode.hpp	/^		void write_char(OutIt& out, char c)$/;"	f	namespace:libtorrent::detail
write_endpoint	libtorrent/include/libtorrent/socket_io.hpp	/^		void write_endpoint(Endpoint const& e, OutIt&& out)$/;"	f	namespace:libtorrent::detail
write_impl	libtorrent/include/libtorrent/aux_/io.hpp	/^	write_impl(In data, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_impl	libtorrent/include/libtorrent/io.hpp	/^		write_impl(In data, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_impl	libtorrent/include/libtorrent/io.hpp	/^		write_impl(Val val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_int16	libtorrent/include/libtorrent/aux_/io.hpp	/^	void write_int16(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_int16	libtorrent/include/libtorrent/io.hpp	/^		void write_int16(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_int32	libtorrent/include/libtorrent/aux_/io.hpp	/^	void write_int32(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_int32	libtorrent/include/libtorrent/io.hpp	/^		void write_int32(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_int64	libtorrent/include/libtorrent/aux_/io.hpp	/^	void write_int64(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_int64	libtorrent/include/libtorrent/io.hpp	/^		void write_int64(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_int8	libtorrent/include/libtorrent/aux_/io.hpp	/^	void write_int8(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_int8	libtorrent/include/libtorrent/io.hpp	/^		void write_int8(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_integer	libtorrent/include/libtorrent/bencode.hpp	/^		int write_integer(OutIt& out, In data)$/;"	f	namespace:libtorrent::detail
write_jobs_in_use	libtorrent/include/libtorrent/disk_job_pool.hpp	/^		int write_jobs_in_use() const { return m_write_jobs; }$/;"	f	struct:libtorrent::disk_job_pool
write_lru	libtorrent/include/libtorrent/block_cache.hpp	/^			write_lru,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
write_lru_pieces	libtorrent/include/libtorrent/block_cache.hpp	/^		list_iterator<cached_piece_entry> write_lru_pieces() const$/;"	f	struct:libtorrent::block_cache
write_only	libtorrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t write_only = 0_bit;$/;"	m	namespace:libtorrent::file_open_mode
write_only	libtorrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t write_only = 0_bit;$/;"	m	namespace:libtorrent::open_mode
write_request	libtorrent/include/libtorrent/extensions.hpp	/^		virtual bool write_request(peer_request const&) { return false; }$/;"	f	struct:libtorrent::peer_plugin
write_some	libtorrent/include/libtorrent/aux_/socket_type.hpp	/^		std::size_t write_some(Const_Buffers const& buffers, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
write_some	libtorrent/include/libtorrent/proxy_base.hpp	/^	std::size_t write_some(Const_Buffers const& buffers)$/;"	f	class:libtorrent::proxy_base
write_some	libtorrent/include/libtorrent/proxy_base.hpp	/^	std::size_t write_some(Const_Buffers const& buffers, error_code& ec)$/;"	f	class:libtorrent::proxy_base
write_some	libtorrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t write_some(Const_Buffers const& buffers, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
write_some	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::size_t write_some(Const_Buffers const& \/* buffers *\/, error_code& \/* ec *\/)$/;"	f	struct:libtorrent::utp_stream
write_some	libtorrent/include/libtorrent/utp_stream.hpp	/^	std::size_t write_some(Const_Buffers const& buffers)$/;"	f	struct:libtorrent::utp_stream
write_state	libtorrent/include/libtorrent/peer_info.hpp	/^		bandwidth_state_flags_t write_state;$/;"	m	struct:libtorrent::peer_info
write_string	libtorrent/include/libtorrent/aux_/io.hpp	/^	inline int write_string(std::string const& str, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_string	libtorrent/include/libtorrent/io.hpp	/^		inline int write_string(std::string const& str, char*& start)$/;"	f	namespace:libtorrent::detail
write_string	libtorrent/include/libtorrent/io.hpp	/^		int write_string(std::string const& val, OutIt& out)$/;"	f	namespace:libtorrent::detail
write_uint16	libtorrent/include/libtorrent/aux_/io.hpp	/^	void write_uint16(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_uint16	libtorrent/include/libtorrent/io.hpp	/^		void write_uint16(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_uint32	libtorrent/include/libtorrent/aux_/io.hpp	/^	void write_uint32(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_uint32	libtorrent/include/libtorrent/io.hpp	/^		void write_uint32(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_uint64	libtorrent/include/libtorrent/aux_/io.hpp	/^	void write_uint64(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_uint64	libtorrent/include/libtorrent/io.hpp	/^		void write_uint64(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_uint8	libtorrent/include/libtorrent/aux_/io.hpp	/^	void write_uint8(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_uint8	libtorrent/include/libtorrent/io.hpp	/^		void write_uint8(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
writecb	libowfat/io/io_sendfile.c	/^static int64 writecb(int64 s,const void* buf,uint64 n) {$/;"	f	file:
writecb	libowfat/t.c	/^int64 writecb(int64 fd,const void* buf,uint64 n) {$/;"	f
writepos	libowfat/test/io.c	/^int64 writepos = 0;$/;"	v
writepos	libowfat/test/io2.c	/^int64 writepos = 0;$/;"	v
writequeued	libowfat/io_internal.h	/^  unsigned int writequeued:2;$/;"	m	struct:__anon40
writes	libtorrent/include/libtorrent/disk_io_thread.hpp	/^		int writes;$/;"	m	struct:libtorrent::cache_status
writing	libtorrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t writing:15;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
writing	libtorrent/include/libtorrent/torrent_handle.hpp	/^			writing,$/;"	e	enum:libtorrent::block_info::block_state_t
writing	libtorrent/include/libtorrent/torrent_handle.hpp	/^		int writing;$/;"	m	struct:libtorrent::partial_piece_info
x	libowfat/buffer.h	/^  char *x;		\/* actual buffer space *\/$/;"	m	struct:buffer
x	libowfat/buffer/errmsg_puts.c	/^static struct iovec x[COUNT];$/;"	v	typeref:struct:iovec	file:
x	libowfat/libowfat/buffer.h	/^  char *x;		\/* actual buffer space *\/$/;"	m	struct:buffer
x	libowfat/libowfat/tai.h	/^  uint64 x;$/;"	m	struct:tai
x	libowfat/tai.h	/^  uint64 x;$/;"	m	struct:tai
x	libtorrent/include/libtorrent/pe_crypto.hpp	/^		int x;$/;"	m	struct:libtorrent::rc4
xml_attribute	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_attribute,$/;"	e	enum:libtorrent::__anon69
xml_comment	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_comment,$/;"	e	enum:libtorrent::__anon69
xml_declaration_tag	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_declaration_tag,$/;"	e	enum:libtorrent::__anon69
xml_empty_tag	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_empty_tag,$/;"	e	enum:libtorrent::__anon69
xml_end_tag	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_end_tag,$/;"	e	enum:libtorrent::__anon69
xml_parse_error	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_parse_error,$/;"	e	enum:libtorrent::__anon69
xml_start_tag	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_start_tag,$/;"	e	enum:libtorrent::__anon69
xml_string	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_string,$/;"	e	enum:libtorrent::__anon69
xml_tag_content	libtorrent/include/libtorrent/xml_parse.hpp	/^		xml_tag_content$/;"	e	enum:libtorrent::__anon69
y	libtorrent/include/libtorrent/pe_crypto.hpp	/^		int y;$/;"	m	struct:libtorrent::rc4
yzy_packet	include/packet.h	/^struct yzy_packet{$/;"	s
yzy_packet	include/packet.h	/^typedef struct yzy_packet yzy_packet;$/;"	t	typeref:struct:yzy_packet
zap	libowfat/fmt/fmt_asn1derlength.c	33;"	d	file:
zap	libowfat/fmt/fmt_asn1dertag.c	/^void zap() { size_t i; for (i=0; i<sizeof(buf); ++i) buf[i]='_'; }$/;"	f
zap	libowfat/test/marshal.c	/^void zap() { size_t i; for (i=0; i<sizeof(buf); ++i) buf[i]='_'; }$/;"	f
zap2	libowfat/test/marshal.c	/^void zap2() { size_t i; for (i=0; i<sizeof(buf); ++i) buf[i]=i; }$/;"	f
zero	libtorrent/include/libtorrent/ip_filter.hpp	/^	Addr zero()$/;"	f	namespace:libtorrent::detail
zero	libtorrent/include/libtorrent/ip_filter.hpp	/^	inline std::uint16_t zero<std::uint16_t>() { return 0; }$/;"	f	namespace:libtorrent::detail
zerocopy	libowfat/io_internal.h	/^  unsigned int zerocopy:1;	\/* linux: setsockopt SO_ZEROCOPY done *\/$/;"	m	struct:__anon40
~alloca_destructor	libtorrent/include/libtorrent/aux_/alloca.hpp	/^	~alloca_destructor()$/;"	f	struct:libtorrent::aux::alloca_destructor
~bandwidth_socket	libtorrent/include/libtorrent/bandwidth_socket.hpp	/^		virtual ~bandwidth_socket() {}$/;"	f	struct:libtorrent::bandwidth_socket
~broadcast_socket	libtorrent/include/libtorrent/broadcast_socket.hpp	/^		~broadcast_socket() { close(); }$/;"	f	class:libtorrent::broadcast_socket
~buffer	libtorrent/include/libtorrent/buffer.hpp	/^	~buffer() { std::free(m_begin); }$/;"	f	class:libtorrent::buffer
~cork	libtorrent/include/libtorrent/peer_connection.hpp	/^		~cork()$/;"	f	struct:libtorrent::cork
~crypt_hash	libtorrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		~crypt_hash() { CryptDestroyHash(m_hash); }$/;"	f	struct:libtorrent::aux::crypt_hash
~crypto_plugin	libtorrent/include/libtorrent/extensions.hpp	/^		virtual ~crypto_plugin() {}$/;"	f	struct:libtorrent::crypto_plugin
~dev_random	libtorrent/include/libtorrent/aux_/dev_random.hpp	/^		~dev_random() { close(m_fd); }$/;"	f	struct:libtorrent::aux::dev_random
~dht_storage_interface	libtorrent/include/libtorrent/kademlia/dht_storage.hpp	/^		virtual ~dht_storage_interface() {}$/;"	f	struct:libtorrent::dht::dht_storage_interface
~disk_interface	libtorrent/include/libtorrent/disk_interface.hpp	/^		~disk_interface() {}$/;"	f	struct:libtorrent::disk_interface
~disk_job_fence	libtorrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		~disk_job_fence()$/;"	f	struct:libtorrent::aux::disk_job_fence
~disk_observer	libtorrent/include/libtorrent/disk_observer.hpp	/^		~disk_observer() {}$/;"	f	struct:libtorrent::disk_observer
~error_handler_interface	libtorrent/include/libtorrent/aux_/allocating_handler.hpp	/^		~error_handler_interface() {}$/;"	f	struct:libtorrent::aux::error_handler_interface
~heterogeneous_queue	libtorrent/include/libtorrent/heterogeneous_queue.hpp	/^		~heterogeneous_queue() { clear(); }$/;"	f	struct:libtorrent::heterogeneous_queue
~increment_guard	libtorrent/include/libtorrent/debug.hpp	/^		~increment_guard() { --m_cnt; TORRENT_ASSERT(m_cnt >= 0); }$/;"	f	struct:libtorrent::increment_guard
~invariant_checker_impl	libtorrent/include/libtorrent/invariant_check.hpp	/^		~invariant_checker_impl()$/;"	f	struct:libtorrent::invariant_checker_impl
~ip_change_notifier	libtorrent/include/libtorrent/aux_/ip_notifier.hpp	/^		virtual ~ip_change_notifier() {}$/;"	f	struct:libtorrent::aux::ip_change_notifier
~lazy_entry	libtorrent/include/libtorrent/lazy_entry.hpp	/^		~lazy_entry()$/;"	f	struct:libtorrent::lazy_entry
~lsd_callback	libtorrent/include/libtorrent/aux_/lsd.hpp	/^		~lsd_callback() {}$/;"	f	struct:libtorrent::aux::lsd_callback
~peer_connection_interface	libtorrent/include/libtorrent/peer_connection_interface.hpp	/^		~peer_connection_interface() {}$/;"	f	struct:libtorrent::peer_connection_interface
~peer_plugin	libtorrent/include/libtorrent/extensions.hpp	/^		virtual ~peer_plugin() {}$/;"	f	struct:libtorrent::peer_plugin
~plugin	libtorrent/include/libtorrent/extensions.hpp	/^		virtual ~plugin() {}$/;"	f	struct:libtorrent::plugin
~pool_thread_interface	libtorrent/include/libtorrent/disk_io_thread_pool.hpp	/^		virtual ~pool_thread_interface() {}$/;"	f	struct:libtorrent::pool_thread_interface
~portmap_callback	libtorrent/include/libtorrent/aux_/portmap.hpp	/^		~portmap_callback() {}$/;"	f	struct:libtorrent::aux::portmap_callback
~request_callback	libtorrent/include/libtorrent/tracker_manager.hpp	/^		virtual ~request_callback() {}$/;"	f	struct:libtorrent::request_callback
~resolver_interface	libtorrent/include/libtorrent/resolver_interface.hpp	/^	~resolver_interface() {}$/;"	f	struct:libtorrent::resolver_interface
~scope_end_impl	libtorrent/include/libtorrent/aux_/scope_end.hpp	/^		~scope_end_impl() { if (m_armed) m_fun(); }$/;"	f	struct:libtorrent::aux::scope_end_impl
~session_interface	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		virtual ~session_interface() {}$/;"	f	struct:libtorrent::aux::session_interface
~session_logger	libtorrent/include/libtorrent/aux_/session_interface.hpp	/^		~session_logger() {}$/;"	f	struct:libtorrent::aux::session_logger
~single_threaded	libtorrent/include/libtorrent/debug.hpp	/^		~single_threaded() { m_id = std::thread::id(); }$/;"	f	struct:libtorrent::single_threaded
~storage_holder	libtorrent/include/libtorrent/disk_interface.hpp	/^		~storage_holder()$/;"	f	struct:libtorrent::storage_holder
~storage_interface	libtorrent/include/libtorrent/storage.hpp	/^		virtual ~storage_interface() {}$/;"	f	struct:libtorrent::storage_interface
~string_ptr	libtorrent/include/libtorrent/aux_/string_ptr.hpp	/^		~string_ptr()$/;"	f	struct:libtorrent::aux::string_ptr
~torrent_peer	libtorrent/include/libtorrent/torrent_peer.hpp	/^		~torrent_peer() { TORRENT_ASSERT(in_use); in_use = false; }$/;"	f	struct:libtorrent::torrent_peer
~torrent_peer_allocator	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		~torrent_peer_allocator() {$/;"	f	struct:libtorrent::final
~torrent_peer_allocator_interface	libtorrent/include/libtorrent/torrent_peer_allocator.hpp	/^		~torrent_peer_allocator_interface() {}$/;"	f	struct:libtorrent::torrent_peer_allocator_interface
~torrent_plugin	libtorrent/include/libtorrent/extensions.hpp	/^		virtual ~torrent_plugin() {}$/;"	f	struct:libtorrent::torrent_plugin
~ut_pex_peer_store	libtorrent/include/libtorrent/bt_peer_connection.hpp	/^		virtual ~ut_pex_peer_store() {}$/;"	f	struct:libtorrent::ut_pex_peer_store
~work_thread_t	libtorrent/include/libtorrent/aux_/session_impl.hpp	/^				~work_thread_t()$/;"	f	struct:libtorrent::aux::final::work_thread_t
